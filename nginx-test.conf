events {
    worker_connections 1024;
}

http {
    # Mimic Cloudflare headers
    map $remote_addr $cf_connecting_ip {
        default $remote_addr;
    }

    # Upstream servers
    upstream frontend {
        server frontend:3000;
    }

    upstream backend {
        server backend:8000;
    }

    server {
        listen 80;
        server_name localhost;

        # Add Cloudflare-like headers
        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Mimic Cloudflare headers
            proxy_set_header CF-Connecting-IP $cf_connecting_ip;
            proxy_set_header CF-Ray "test-ray-id";
            proxy_set_header CF-Visitor "{\"scheme\":\"http\"}";
            
            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        # API routes
        location /api {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Mimic Cloudflare headers
            proxy_set_header CF-Connecting-IP $cf_connecting_ip;
            proxy_set_header CF-Ray "test-ray-id";
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "OK\n";
            add_header Content-Type text/plain;
        }
    }
}