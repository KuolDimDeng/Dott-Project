/**
 * HR employees API route handler
 * Proxies requests to the backend HR API
 */
import { NextResponse } from 'next/server';
import { logger } from '@/utils/logger';
import axios from 'axios';
import https from 'https';

// Get the backend API URL from environment variable or use default
const BACKEND_API_URL = process.env.BACKEND_API_URL || 'https://127.0.0.1:8000';

// Create axios instance for backend requests with SSL verification disabled for local dev
const backendAxios = axios.create({
  baseURL: `${BACKEND_API_URL}/api/hr`,
  timeout: 30000,
  httpsAgent: new https.Agent({
    rejectUnauthorized: false // Disable SSL certificate verification for local dev
  })
});

/**
 * Helper function to forward headers from the original request
 * @param {Request} request - The original Next.js request
 * @returns {Object} Headers to include in the backend request
 */
function getForwardedHeaders(request) {
  const headers = {};
  
  // Get the authorization header
  const authHeader = request.headers.get('Authorization');
  if (authHeader) {
    headers['Authorization'] = authHeader;
  }
  
  // Get tenant-related headers
  const tenantId = request.headers.get('X-Tenant-ID');
  if (tenantId) {
    headers['X-Tenant-ID'] = tenantId;
  }
  
  // Set content type
  headers['Content-Type'] = 'application/json';
  
  return headers;
}

/**
 * Extract query parameters from request
 * @param {Request} request - The Next.js request
 * @returns {Object} The query parameters
 */
function getQueryParams(request) {
  const url = new URL(request.url);
  const params = {};
  
  for (const [key, value] of url.searchParams.entries()) {
    params[key] = value;
  }
  
  return params;
}

/**
 * GET handler for employees data - proxies to the real backend
 */
export async function GET(request) {
  try {
    logger.info('[HR API] Proxying employee GET request to backend');
    
    // Forward headers from the original request
    const headers = getForwardedHeaders(request);
    
    // Get query parameters
    const params = getQueryParams(request);
    
    // Forward the request to the backend
    const response = await backendAxios.get('/employees', {
      headers,
      params
    });
    
    // Return the response from the backend
    return NextResponse.json(response.data, { status: response.status });
  } catch (error) {
    // Handle errors
    logger.error('[HR API] Error proxying to backend:', error);
    
    if (error.response) {
      // If we have a response from the backend, return it
      return NextResponse.json(
        error.response.data || { error: 'Backend API error' },
        { status: error.response.status }
      );
    } else if (error.request) {
      // If the request was made but no response received
      return NextResponse.json(
        { error: 'Backend API not responding', message: error.message },
        { status: 503 }
      );
    } else {
      // Something else happened in setting up the request
      return NextResponse.json(
        { error: 'API proxy error', message: error.message },
        { status: 500 }
      );
    }
  }
}

/**
 * POST handler for creating employees - proxies to the real backend
 */
export async function POST(request) {
  try {
    logger.info('[HR API] Proxying employee POST request to backend');
    
    // Get the request body
    const body = await request.json();
    
    // Forward headers from the original request
    const headers = getForwardedHeaders(request);
    
    // Get query parameters
    const params = getQueryParams(request);
    
    // Forward the request to the backend
    const response = await backendAxios.post('/employees', body, {
      headers,
      params
    });
    
    // Return the response from the backend
    return NextResponse.json(response.data, { status: response.status });
  } catch (error) {
    // Handle errors
    logger.error('[HR API] Error proxying POST to backend:', error);
    
    if (error.response) {
      // If we have a response from the backend, return it
      return NextResponse.json(
        error.response.data || { error: 'Backend API error' },
        { status: error.response.status }
      );
    } else if (error.request) {
      // If the request was made but no response received
      return NextResponse.json(
        { error: 'Backend API not responding', message: error.message },
        { status: 503 }
      );
    } else {
      // Something else happened in setting up the request
      return NextResponse.json(
        { error: 'API proxy error', message: error.message },
        { status: 500 }
      );
    }
  }
}