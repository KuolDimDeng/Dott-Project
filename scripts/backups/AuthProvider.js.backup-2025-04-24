import { Auth } from 'aws-amplify';
import { useRouter } from 'next/router';
import { createContext, useContext, useState, useEffect } from 'react';

const AuthContext = createContext({});

export function AuthProvider({ children }) {
  const [user, setUser] = useState(null);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const router = useRouter();

  const login = async (username, password) => {
    try {
      setIsLoading(true);
      setError(null);
      
      // Sign in with Cognito
      const user = await Auth.signIn(username, password);
      
      // Store user data
      setUser(user);
      setIsAuthenticated(true);
      
      // Redirect to dashboard
      router.push('/dashboard');
    } catch (error) {
      console.error('Login error:', error);
      setError(error.message || 'Failed to login');
    } finally {
      setIsLoading(false);
    }
  };

  const logout = async () => {
    try {
      setIsLoading(true);
      
      // Sign out from Cognito
      await Auth.signOut();
      
      // Clear user data
      setUser(null);
      setIsAuthenticated(false);
      
      // Redirect to login
      router.push('/login');
    } catch (error) {
      console.error('Logout error:', error);
      setError(error.message || 'Failed to logout');
    } finally {
      setIsLoading(false);
    }
  };

  const checkAuth = async () => {
    try {
      setIsLoading(true);
      
      // Check if user is authenticated with Cognito
      const user = await Auth.currentAuthenticatedUser();
      
      // Set user data
      setUser(user);
      setIsAuthenticated(true);
    } catch (error) {
      console.error('Check auth error:', error);
      setError(error.message || 'Failed to check authentication');
      
      // Clear user data
      setUser(null);
      setIsAuthenticated(false);
    } finally {
      setIsLoading(false);
    }
  };

  const refreshSession = async () => {
    try {
      // Refresh session with Cognito
      const session = await Auth.currentSession();
      return true;
    } catch (error) {
      console.error('Refresh session error:', error);
      return false;
    }
  };

  const getTokens = async () => {
    try {
      const session = await Auth.currentSession();
      return {
        idToken: session.getIdToken().getJwtToken(),
        accessToken: session.getAccessToken().getJwtToken()
      };
    } catch (error) {
      console.error('Get tokens error:', error);
      throw error;
    }
  };

  // Check authentication on mount
  useEffect(() => {
    checkAuth();
  }, []);

  return (
    <AuthContext.Provider
      value={{
        user,
        isAuthenticated,
        isLoading,
        error,
        login,
        logout,
        checkAuth,
        refreshSession,
        getTokens
      }}
    >
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  return useContext(AuthContext);
} 