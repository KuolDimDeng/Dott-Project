'use client';
import React, { useState, useEffect, useCallback, memo, Fragment, useRef, useMemo } from 'react';
import { useRouter } from 'next/navigation';
import { v4 as uuidv4 } from 'uuid';
import { axiosInstance, backendHrApiInstance, resetCircuitBreakers } from '@/lib/axiosConfig';
import { countries } from 'countries-list';
import { format, parseISO } from 'date-fns';
import { refreshUserSession } from '@/utils/refreshUserSession';
import { Dialog, Transition } from '@headlessui/react';
import { toast } from 'react-hot-toast';
import { useTable, usePagination, useSortBy } from 'react-table';
import { extractTenantId, getSecureTenantId } from '@/utils/tenantUtils';
import { getCacheValue, setCacheValue } from '@/utils/appCache';
import { Button, Typography, Alert } from '@mui/material';
// Import the API utilities
import api from '@/utils/api';
import { logger } from '@/utils/logger';
import { employeeApi } from '@/utils/apiClient';
import { invalidateCache } from '@/utils/apiHelpers';
import { verifyBackendConnection } from '@/lib/axiosConfig';
import BackendConnectionCheck from '../BackendConnectionCheck';
import { getCurrentUser, getUserProfile } from '@/services/userService';

// Employee Form Component
// Personal Information Tab component - direct display of Cognito attributes
const PersonalInfoTab = () => {
  const [userData, setUserData] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  
  // Load user data from Cognito on component mount
  useEffect(() => {
    const loadUserData = async () => {
      try {
        setIsLoading(true);
        
        // Get user attributes from Cognito directly
        const cognitoUser = await getCurrentUser();
        if (!cognitoUser) {
          setError('Unable to retrieve user information');
          return;
        }
        
        // Format data for display
        const formattedData = {
          first_name: cognitoUser.given_name || cognitoUser.firstName || '',
          last_name: cognitoUser.family_name || cognitoUser.lastName || '',
          email: cognitoUser.email || '',
          phone_number: cognitoUser.phone_number || '',
          job_title: 'Owner', // Default for owner
          department: 'Management', // Default for owner
          business_name: cognitoUser.custom_businessname || cognitoUser['custom:businessname'] || ''
        };
        
        // Log successful data retrieval
        logger.debug('[PersonalInfoTab] User data loaded from Cognito:', formattedData);
        
        setUserData(formattedData);
      } catch (error) {
        logger.error('[PersonalInfoTab] Error loading user data:', error);
        setError('Failed to load your information. Please try again.');
      } finally {
        setIsLoading(false);
      }
    };
    
    loadUserData();
  }, []);
  
  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="flex flex-col items-center">
          <div className="animate-spin rounded-full h-10 w-10 border-t-2 border-b-2 border-blue-500"></div>
          <p className="mt-4 text-gray-600">Loading your information...</p>
        </div>
      </div>
    );
  }
  
  if (error) {
    return (
      <div className="bg-red-50 border border-red-200 rounded-lg p-6">
        <h3 className="text-red-800 font-medium text-lg mb-2">Error</h3>
        <p className="text-red-700">{error}</p>
      </div>
    );
  }
  
  if (!userData) {
    return (
      <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-6">
        <h3 className="text-yellow-800 font-medium text-lg mb-2">No Information Available</h3>
        <p className="text-yellow-700">Your personal information could not be loaded at this time.</p>
      </div>
    );
  }
  
  return (
    <div className="bg-white shadow rounded-lg p-6">
      <div className="flex justify-between items-center mb-4">
        <Typography variant="h5" component="h2">
          Personal Information
        </Typography>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <Typography variant="subtitle2" color="textSecondary">
            First Name
          </Typography>
          <Typography variant="body1">
            {userData.first_name}
          </Typography>
        </div>
        <div>
          <Typography variant="subtitle2" color="textSecondary">
            Last Name
          </Typography>
          <Typography variant="body1">
            {userData.last_name}
          </Typography>
        </div>
        <div>
          <Typography variant="subtitle2" color="textSecondary">
            Email
          </Typography>
          <Typography variant="body1">
            {userData.email}
          </Typography>
        </div>
        <div>
          <Typography variant="subtitle2" color="textSecondary">
            Phone Number
          </Typography>
          <Typography variant="body1">
            {userData.phone_number || 'Not provided'}
          </Typography>
        </div>
        <div>
          <Typography variant="subtitle2" color="textSecondary">
            Job Title
          </Typography>
          <Typography variant="body1">
            {userData.job_title}
          </Typography>
        </div>
        <div>
          <Typography variant="subtitle2" color="textSecondary">
            Department
          </Typography>
          <Typography variant="body1">
            {userData.department}
          </Typography>
        </div>
        {userData.business_name && (
          <div>
            <Typography variant="subtitle2" color="textSecondary">
              Business Name
            </Typography>
            <Typography variant="body1">
              {userData.business_name}
            </Typography>
          </div>
        )}
      </div>
    </div>
  );
};

const EmployeeFormComponent = ({ isEdit = false, onSubmit, newEmployee, handleInputChange, isLoading, setNewEmployee, setShowAddForm, setShowEditForm }) => {
  return (
    <form onSubmit={onSubmit} className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">First Name</label>
          <input
            type="text"
            name="first_name"
            value={newEmployee.first_name || ''}
            onChange={handleInputChange}
            className="w-full p-2 border border-gray-300 rounded-md"
            required
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Last Name</label>
          <input
            type="text"
            name="last_name"
            value={newEmployee.last_name || ''}
            onChange={handleInputChange}
            className="w-full p-2 border border-gray-300 rounded-md"
            required
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Email</label>
          <input
            type="email"
            name="email"
            value={newEmployee.email || ''}
            onChange={handleInputChange}
            className="w-full p-2 border border-gray-300 rounded-md"
            required
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Phone Number</label>
          <input
            type="text"
            name="phone_number"
            value={newEmployee.phone_number || ''}
            onChange={handleInputChange}
            className="w-full p-2 border border-gray-300 rounded-md"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Date of Birth</label>
          <input
            type="date"
            name="dob"
            value={newEmployee.dob || ''}
            onChange={handleInputChange}
            className="w-full p-2 border border-gray-300 rounded-md"
            required
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Date Joined</label>
          <input
            type="date"
            name="date_joined"
            value={newEmployee.date_joined || ''}
            onChange={handleInputChange}
            className="w-full p-2 border border-gray-300 rounded-md"
          />
        </div>
      </div>
      
      {/* Hidden input to ensure role is set to EMPLOYEE */}
      <input 
        type="hidden" 
        name="role" 
        value="employee" 
      />
      
      <div className="flex justify-end space-x-2">
        <Button 
          variant="outlined"
          color="secondary"
          onClick={() => isEdit ? setShowEditForm(false) : setShowAddForm(false)}
        >
          Cancel
        </Button>
        <Button 
          type="submit"
          variant="contained"
          color="primary"
          disabled={isLoading}
        >
          {isLoading ? 'Saving...' : (isEdit ? 'Update' : 'Create')}
        </Button>
      </div>
    </form>
  );
};

// Memoize the form component to prevent unnecessary re-renders
const EmployeeForm = memo(EmployeeFormComponent);

const EmployeeManagement = () => {
  // Add tab state
  const [activeTab, setActiveTab] = useState('personal'); // Default to personal tab
  const router = useRouter();
  const [employees, setEmployees] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [showConnectionChecker, setShowConnectionChecker] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedEmployee, setSelectedEmployee] = useState(null);
  const [showAddForm, setShowAddForm] = useState(false);
  const [showEditForm, setShowEditForm] = useState(false);
  const [showEmployeeDetails, setShowEmployeeDetails] = useState(false);
  const [isCreating, setIsCreating] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [currentUser, setCurrentUser] = useState(null);
  const [isOwner, setIsOwner] = useState(false);
  const [newEmployee, setNewEmployee] = useState({
    first_name: '',
    last_name: '',
    email: '',
    phone_number: '',
    job_title: '',
    department: '',
    dob: new Date().toISOString().split('T')[0],
    date_joined: new Date().toISOString().split('T')[0],
    role: 'employee',
  });
  
  // Function to manually refresh the user session
  const refreshSession = async () => {
    try {
      setLoading(true);
      const refreshed = await refreshUserSession();
      if (refreshed) {
        setError(null);
        toast.success('Session refreshed successfully');
        fetchEmployees(); // Retry fetching data
      } else {
        setError('Failed to refresh session. Please log in again.');
      }
    } catch (error) {
      logger.error('[EmployeeManagement] Error refreshing session:', error);
      setError('Failed to refresh session. Please log in again.');
    } finally {
      setLoading(false);
    }
  };

  // Function to handle login redirection on session expiration
  const redirectToLogin = () => {
    const currentPath = window.location.pathname + window.location.search;
    window.location.href = `/login?expired=true&redirect=${encodeURIComponent(currentPath)}`;
  };

  // Fetch current user information
  useEffect(() => {
    const fetchCurrentUser = async () => {
      try {
        logger.debug('[EmployeeManagement] Fetching current user and profile...');
        
        // Get user attributes from Cognito
        const user = await getCurrentUser();
        if (user) {
          setCurrentUser(user);
          logger.debug('[EmployeeManagement] Current user set:', user);
          
          // Get tenant ID from URL or app cache
          const tenantId = await getSecureTenantId();
          logger.debug('[EmployeeManagement] Using tenant ID for profile:', tenantId);
          
          // Check if user is an owner
          const profile = await getUserProfile(tenantId);
          logger.debug('[EmployeeManagement] User profile retrieved:', profile);
          setIsOwner(profile?.role === 'owner' || profile?.userRole === 'owner');
          
          // If user is owner, set their information as the selected employee
          logger.debug('[EmployeeManagement] Checking if user is owner:', { 
            role: profile?.role,
            userRole: profile?.userRole,
            isOwnerCheck: profile?.role === 'owner' || profile?.userRole === 'owner'
          });
          if (profile?.role === 'owner' || profile?.userRole === 'owner') {
            setSelectedEmployee({
              first_name: user.firstName,
              last_name: user.lastName,
              email: user.email,
              phone_number: user.phone_number || '',
              job_title: 'Owner',
              department: 'Management',
              role: 'owner'
            });
            setShowEmployeeDetails(true);
          }
        }
      } catch (error) {
        logger.error('[EmployeeManagement] Error fetching current user:', error);
        setError('Failed to load user information');
      }
    };

    fetchCurrentUser();
  }, []);

  // Handle creating a new employee
  const handleCreateEmployee = async (e) => {
    e.preventDefault();
    setIsCreating(true);
    
    try {
      // Format the employee data for the API
      const formattedEmployee = {
        ...newEmployee,
        dob: newEmployee.dob ? new Date(newEmployee.dob).toISOString().split('T')[0] : new Date().toISOString().split('T')[0], // Set today as default if not provided
        date_joined: newEmployee.date_joined ? new Date(newEmployee.date_joined).toISOString().split('T')[0] : null,
        role: 'employee', // Changed to lowercase
      };

      // Log the data being sent
      logger.debug('[EmployeeManagement] Creating employee:', formattedEmployee);
      
      // Send the API request
      const response = await employeeApi.createEmployee(formattedEmployee);
      
      // Handle the success response
      logger.info('[EmployeeManagement] Employee created successfully:', response);
      toast.success('Employee created successfully');
      
      // Update the UI
      setShowAddForm(false);
      fetchEmployees(); // Refresh the employee list
      
      // Reset the form
      setNewEmployee({
        first_name: '',
        last_name: '',
        email: '',
        phone_number: '',
        job_title: '',
        department: '',
        dob: new Date().toISOString().split('T')[0], // Default to today
        date_joined: new Date().toISOString().split('T')[0], // Default to today
        role: 'employee',
      });
    } catch (error) {
      // Handle errors
      logger.error('[EmployeeManagement] Error creating employee:', error);
      
      let errorMessage = 'Failed to create employee. Please try again.';
      if (error.response && error.response.data) {
        if (typeof error.response.data === 'string') {
          errorMessage = error.response.data;
        } else if (typeof error.response.data === 'object') {
          errorMessage = Object.entries(error.response.data)
            .map(([key, value]) => `${key}: ${value}`)
            .join(', ');
        }
      }
      
      toast.error(errorMessage);
    } finally {
      setIsCreating(false);
    }
  };
  
  // Handle input changes
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setNewEmployee(prev => ({
      ...prev,
      [name]: value
    }));
  };
  
  // Fetch employees from the API
  const fetchEmployees = useCallback(async () => {
    setLoading(true);
    setError(null);
    
    try {
      const response = await employeeApi.getEmployees();
      setEmployees(response || []);
    } catch (error) {
      logger.error('[EmployeeManagement] Error fetching employees:', error);
      setError('Failed to load employees. Please try again.');
      setShowConnectionChecker(true);
    } finally {
      setLoading(false);
    }
  }, []);
  
  // Load employees on component mount
  useEffect(() => {
    fetchEmployees();
  }, [fetchEmployees]);
  
  // Handle connection restoration
  const handleConnectionRestored = () => {
    setShowConnectionChecker(false);
    fetchEmployees();
  };

  // Handle closing employee details
  const handleCloseEmployeeDetails = () => {
    setShowEmployeeDetails(false);
    setSelectedEmployee(null);
  };

  // Handle updating employee information
  const handleUpdateEmployee = async (e) => {
    e.preventDefault();
    setIsEditing(true);
    
    try {
      // Format the employee data for the API
      const formattedEmployee = {
        ...newEmployee,
        dob: newEmployee.dob ? new Date(newEmployee.dob).toISOString().split('T')[0] : null,
        date_joined: newEmployee.date_joined ? new Date(newEmployee.date_joined).toISOString().split('T')[0] : null,
      };

      // Log the data being sent
      logger.debug('[EmployeeManagement] Updating employee:', formattedEmployee);
      
      // Send the API request
      const response = await employeeApi.updateEmployee(selectedEmployee.id, formattedEmployee);
      
      // Handle the success response
      logger.info('[EmployeeManagement] Employee updated successfully:', response);
      toast.success('Information updated successfully');
      
      // Update the UI
      setShowEditForm(false);
      setSelectedEmployee(formattedEmployee);
      
      // If this is the owner, update the current user information
      if (isOwner) {
        setCurrentUser(prev => ({
          ...prev,
          firstName: formattedEmployee.first_name,
          lastName: formattedEmployee.last_name,
          email: formattedEmployee.email,
          phone_number: formattedEmployee.phone_number
        }));
      }
    } catch (error) {
      // Handle errors
      logger.error('[EmployeeManagement] Error updating employee:', error);
      
      let errorMessage = 'Failed to update information. Please try again.';
      if (error.response && error.response.data) {
        if (typeof error.response.data === 'string') {
          errorMessage = error.response.data;
        } else if (typeof error.response.data === 'object') {
          errorMessage = Object.entries(error.response.data)
            .map(([key, value]) => `${key}: ${value}`)
            .join(', ');
        }
      }
      
      toast.error(errorMessage);
    } finally {
      setIsEditing(false);
    }
  };

  const renderEmployeesList = () => {
    // ... existing code ...
    return (
      <div className="overflow-x-auto bg-white rounded-lg shadow">
        {/* Extract key from table props */}
        {(() => {
          return (
            <table {...getTableProps()} className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                {headerGroups.map(headerGroup => {
                  return (
                    <tr {...headerGroup.getHeaderGroupProps()}>
                      {headerGroup.headers.map(column => {
                        // Extract key from props and pass it separately to avoid React warning
                        return (
                          <th {...column.getHeaderProps(column.getSortByToggleProps())}
                            className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                          >
                            {column.render('Header')}
                            <span>
                              {column.isSorted
                                ? column.isSortedDesc
                                  ? ' 🔽'
                                  : ' 🔼'
                                : ''}
                            </span>
                          </th>
                        );
                      })}
                    </tr>
                  );
                })}
              </thead>
              {(() => {
                return (
                  <tbody {...getTableBodyProps()} className="bg-white divide-y divide-gray-200">
                    {page.map((row, i) => {
                      prepareRow(row);
                      return (
                        <tr key={`row-${row.id}`} {...row.getRowProps()} 
                          className="hover:bg-gray-50 cursor-pointer"
                          onClick={() => {
                            setSelectedEmployee(row.original);
                            setShowEmployeeDetails(true);
                          }}
                        >
                          {row.cells.map(cell => {
                            return (
                              <td key={`cell-${row.id}-${cell.column.id}`} {...cell.getCellProps()}
                                className="px-6 py-4 whitespace-nowrap"
                                onClick={(e) => {
                                  // Prevent row click for action buttons
                                  if (cell.column.id === 'actions') {
                                    e.stopPropagation();
                                  }
                                }}
                              >
                                {cell.render('Cell')}
                              </td>
                            )
                          })}
                        </tr>
                      )
                    })}
                  </tbody>
                );
              })()}
            </table>
          );
        })()}
      </div>
    );
  };

  return (
    <div className="relative">
      {/* Tabs for navigation */}
      <div className="border-b border-gray-200 mb-6">
        <nav className="flex -mb-px">
          <button
            onClick={() => setActiveTab('personal')}
            className={`px-4 py-2 font-medium text-sm border-b-2 ${
              activeTab === 'personal'
                ? 'border-blue-500 text-blue-600'
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
          >
            Personal Information
          </button>
          <button
            onClick={() => setActiveTab('employees')}
            className={`px-4 py-2 font-medium text-sm border-b-2 ${
              activeTab === 'employees'
                ? 'border-blue-500 text-blue-600'
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
          >
            Employee Management
          </button>
        </nav>
      </div>

      {/* Error display with connection checker */}
      {error && (
        <div className="mb-4">
          <Alert severity="error" className="mb-2">
            {error}
          </Alert>
          {showConnectionChecker && (
            <BackendConnectionCheck onConnectionRestored={handleConnectionRestored} />
          )}
        </div>
      )}

      {/* Tab Content */}
      {activeTab === 'personal' ? (
        <PersonalInfoTab />
      ) : (
        <>
          {/* Page Header */}
          <div className="mb-6">
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
              <Typography variant="h4" component="h1" className="mb-4 sm:mb-0">
                Employee Management
              </Typography>
              
              <div className="flex flex-col sm:flex-row gap-2">
                {!isOwner && (
                  <Button
                    variant="contained"
                    color="primary"
                    onClick={() => {
                      setShowAddForm(true);
                      setIsCreating(false);
                      setIsEditing(false);
                      setShowEmployeeDetails(false);
                      setSelectedEmployee(null);
                    }}
                    startIcon={
                      <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                      </svg>
                    }
                  >
                    Add Employee
                  </Button>
                )}
              </div>
            </div>
          </div>
          
          {/* Employee Forms */}
          <div className="mt-4">
            {showAddForm && !showEmployeeDetails && (
              <EmployeeForm 
                onSubmit={handleCreateEmployee}
                newEmployee={newEmployee}
                handleInputChange={handleInputChange}
                isLoading={isCreating}
                setNewEmployee={setNewEmployee}
                setShowAddForm={setShowAddForm}
              />
            )}
            
            {showEditForm && selectedEmployee && (
              <EmployeeForm 
                isEdit={true}
                onSubmit={handleUpdateEmployee}
                newEmployee={newEmployee}
                handleInputChange={handleInputChange}
                isLoading={isEditing}
                setNewEmployee={setNewEmployee}
                setShowEditForm={setShowEditForm}
              />
            )}
          </div>
          
          {/* Employee Details Dialog */}
          <Transition.Root show={showEmployeeDetails} as={Fragment}>
            <Dialog as="div" className="relative z-10" onClose={handleCloseEmployeeDetails}>
              <Transition.Child
                as={Fragment}
                enter="ease-out duration-300"
                enterFrom="opacity-0"
                enterTo="opacity-100"
                leave="ease-in duration-200"
                leaveFrom="opacity-100"
                leaveTo="opacity-0"
              >
                <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" />
              </Transition.Child>
    
              <div className="fixed inset-0 z-10 overflow-y-auto">
                <div className="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
                  <Transition.Child
                    as={Fragment}
                    enter="ease-out duration-300"
                    enterFrom="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                    enterTo="opacity-100 translate-y-0 sm:scale-100"
                    leave="ease-in duration-200"
                    leaveFrom="opacity-100 translate-y-0 sm:scale-100"
                    leaveTo="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                  >
                    <Dialog.Panel className="relative transform overflow-hidden rounded-lg bg-white px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:p-6">
                      <div className="absolute right-0 top-0 hidden pr-4 pt-4 sm:block">
                        <button
                          type="button"
                          className="rounded-md bg-white text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
                          onClick={handleCloseEmployeeDetails}
                        >
                          <span className="sr-only">Close</span>
                          <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor" aria-hidden="true">
                            <path strokeLinecap="round" strokeLinejoin="round" d="M6 18L18 6M6 6l12 12" />
                          </svg>
                        </button>
                      </div>
                      <div className="sm:flex sm:items-start">
                        <div className="mt-3 text-center sm:mt-0 sm:text-left w-full">
                          <Dialog.Title as="h3" className="text-base font-semibold leading-6 text-gray-900">
                            Employee Details
                          </Dialog.Title>
                          <div className="mt-4">
                            <div className="grid grid-cols-1 gap-4">
                              <div>
                                <label className="block text-sm font-medium text-gray-700">First Name</label>
                                <p className="mt-1 text-sm text-gray-900">{selectedEmployee?.first_name}</p>
                              </div>
                              <div>
                                <label className="block text-sm font-medium text-gray-700">Last Name</label>
                                <p className="mt-1 text-sm text-gray-900">{selectedEmployee?.last_name}</p>
                              </div>
                              <div>
                                <label className="block text-sm font-medium text-gray-700">Email</label>
                                <p className="mt-1 text-sm text-gray-900">{selectedEmployee?.email}</p>
                              </div>
                              <div>
                                <label className="block text-sm font-medium text-gray-700">Phone Number</label>
                                <p className="mt-1 text-sm text-gray-900">{selectedEmployee?.phone_number || 'Not provided'}</p>
                              </div>
                              <div>
                                <label className="block text-sm font-medium text-gray-700">Job Title</label>
                                <p className="mt-1 text-sm text-gray-900">{selectedEmployee?.job_title}</p>
                              </div>
                              <div>
                                <label className="block text-sm font-medium text-gray-700">Department</label>
                                <p className="mt-1 text-sm text-gray-900">{selectedEmployee?.department}</p>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div className="mt-5 sm:mt-4 sm:flex sm:flex-row-reverse">
                        <Button
                          type="button"
                          variant="contained"
                          color="primary"
                          onClick={() => {
                            setShowEditForm(true);
                            setIsEditing(true);
                            setNewEmployee(selectedEmployee);
                          }}
                          className="w-full sm:ml-3 sm:w-auto"
                        >
                          Edit Information
                        </Button>
                        <Button
                          type="button"
                          variant="outlined"
                          color="secondary"
                          onClick={handleCloseEmployeeDetails}
                          className="mt-3 w-full sm:mt-0 sm:w-auto"
                        >
                          Close
                        </Button>
                      </div>
                    </Dialog.Panel>
                  </Transition.Child>
                </div>
              </div>
            </Dialog>
          </Transition.Root>
        </>
      )}
    </div>
  );
};

export default EmployeeManagement; 