'use client';
import React, { useState, useEffect, useCallback, memo, Fragment, useRef, useMemo } from 'react';
import { useRouter } from 'next/navigation';
import { v4 as uuidv4 } from 'uuid';
import { axiosInstance, backendHrApiInstance, resetCircuitBreakers } from '@/lib/axiosConfig';
import { countries } from 'countries-list';
import { format, parseISO } from 'date-fns';
import EmployeePermissions from './EmployeePermissions';
import { refreshUserSession, ensureAuthProvider } from '@/utils/refreshUserSession';
import { Dialog, Transition } from '@headlessui/react';
import { toast } from 'react-hot-toast';
import { useTable, usePagination, useSortBy } from 'react-table';
import { extractTenantId, getSecureTenantId } from '@/utils/tenantUtils';
import { getCacheValue, setCacheValue } from '@/utils/appCache';
// Import the API utilities
import api from '@/utils/api';
import { logger } from '@/utils/logger';
import { employeeApi } from '@/utils/apiClient';
import { invalidateCache } from '@/utils/apiHelpers';
import { verifyBackendConnection } from '@/lib/axiosConfig';
import BackendConnectionCheck from '../BackendConnectionCheck';

// UI Components - similar to ProductManagement.js
const Typography = ({ variant, component, className, color, children, gutterBottom, ...props }) => {
  let baseClasses = '';
  
  // Handle variants
  if (variant === 'h4' || (component === 'h1' && !variant)) {
    baseClasses = 'text-2xl font-bold';
  } else if (variant === 'h5') {
    baseClasses = 'text-xl font-semibold';
  } else if (variant === 'h6') {
    baseClasses = 'text-lg font-medium';
  } else if (variant === 'subtitle1' || variant === 'subtitle2') {
    baseClasses = 'text-sm font-medium';
  } else if (variant === 'body1') {
    baseClasses = 'text-base';
  } else if (variant === 'body2') {
    baseClasses = 'text-sm';
  }
  
  // Handle colors
  if (color === 'textSecondary') {
    baseClasses += ' text-gray-500';
  } else if (color === 'primary') {
    baseClasses += ' text-blue-600';
  } else if (color === 'error') {
    baseClasses += ' text-red-600';
  }
  
  // Handle gutterBottom
  if (gutterBottom) {
    baseClasses += ' mb-2';
  }
  
  const Tag = component || 'p';
  
  return (
    <Tag className={`${baseClasses} ${className || ''}`} {...props}>
      {children}
    </Tag>
  );
};

const Alert = ({ severity, className, children }) => {
  let bgColor = 'bg-blue-50';
  let borderColor = 'border-blue-400';
  let textColor = 'text-blue-800';
  
  if (severity === 'error') {
    bgColor = 'bg-red-50';
    borderColor = 'border-red-400';
    textColor = 'text-red-800';
  } else if (severity === 'warning') {
    bgColor = 'bg-yellow-50';
    borderColor = 'border-yellow-400';
    textColor = 'text-yellow-800';
  } else if (severity === 'success') {
    bgColor = 'bg-green-50';
    borderColor = 'border-green-400';
    textColor = 'text-green-800';
  } else if (severity === 'info') {
    bgColor = 'bg-blue-50';
    borderColor = 'border-blue-400';
    textColor = 'text-blue-800';
  }
  
  return (
    <div className={`p-4 mb-4 ${bgColor} border-l-4 ${borderColor} ${textColor} ${className || ''}`}>
      {children}
    </div>
  );
};

const Paper = ({ elevation, className, children }) => {
  const shadowClass = elevation === 3 ? 'shadow-md' : 'shadow-sm';
  
  return (
    <div className={`bg-white rounded-lg ${shadowClass} ${className || ''}`}>
      {children}
    </div>
  );
};

const Button = ({ variant, color, size, onClick, disabled, type, className, startIcon, children }) => {
  let baseClasses = 'inline-flex items-center justify-center rounded-md font-medium focus:outline-none focus:ring-2 focus:ring-offset-2';
  
  // Size classes
  if (size === 'small') {
    baseClasses += ' px-2.5 py-1.5 text-xs';
  } else if (size === 'large') {
    baseClasses += ' px-6 py-3 text-base';
  } else {
    baseClasses += ' px-4 py-2 text-sm'; // Medium (default)
  }
  
  // Variant and color classes
  if (variant === 'contained') {
    if (color === 'primary') {
      baseClasses += ' bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500';
    } else if (color === 'secondary') {
      baseClasses += ' bg-purple-600 text-white hover:bg-purple-700 focus:ring-purple-500';
    } else if (color === 'error') {
      baseClasses += ' bg-red-600 text-white hover:bg-red-700 focus:ring-red-500';
    } else if (color === 'info') {
      baseClasses += ' bg-sky-600 text-white hover:bg-sky-700 focus:ring-sky-500';
    } else {
      baseClasses += ' bg-gray-600 text-white hover:bg-gray-700 focus:ring-gray-500';
    }
  } else if (variant === 'outlined') {
    if (color === 'primary') {
      baseClasses += ' border border-blue-500 text-blue-700 hover:bg-blue-50 focus:ring-blue-500';
    } else if (color === 'secondary') {
      baseClasses += ' border border-purple-500 text-purple-700 hover:bg-purple-50 focus:ring-purple-500';
    } else if (color === 'error') {
      baseClasses += ' border border-red-500 text-red-700 hover:bg-red-50 focus:ring-red-500';
    } else if (color === 'info') {
      baseClasses += ' border border-sky-500 text-sky-700 hover:bg-sky-50 focus:ring-sky-500';
    } else {
      baseClasses += ' border border-gray-300 text-gray-700 hover:bg-gray-50 focus:ring-gray-500';
    }
  } else {
    // Text variant
    if (color === 'primary') {
      baseClasses += ' text-blue-700 hover:bg-blue-50 focus:ring-blue-500';
    } else if (color === 'secondary') {
      baseClasses += ' text-purple-700 hover:bg-purple-50 focus:ring-purple-500';
    } else if (color === 'error') {
      baseClasses += ' text-red-700 hover:bg-red-50 focus:ring-red-500';
    } else {
      baseClasses += ' text-gray-700 hover:bg-gray-50 focus:ring-gray-500';
    }
  }
  
  // Disabled state
  if (disabled) {
    baseClasses = baseClasses.replace(/hover:[^ ]*/g, '');
    baseClasses += ' opacity-50 cursor-not-allowed';
  }
  
  return (
    <button
      type={type || 'button'}
      onClick={disabled ? undefined : onClick}
      disabled={disabled}
      className={`${baseClasses} ${className || ''}`}
    >
      {startIcon && <span className="mr-2">{startIcon}</span>}
      {children}
    </button>
  );
};

const TextField = ({ label, fullWidth, multiline, rows, value, onChange, required, placeholder, name, type, inputProps, variant, className, onClick, autoComplete }) => {
  const width = fullWidth ? 'w-full' : '';
  
  return (
    <div className={`mb-4 ${width} ${className || ''}`}>
      {label && <label className="block text-sm font-medium text-gray-700 mb-1">{label}{required && <span className="text-red-500 ml-1">*</span>}</label>}
      {multiline ? (
        <textarea
          name={name}
          value={value || ''}
          onChange={onChange}
          onClick={onClick}
          placeholder={placeholder}
          rows={rows || 3}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
        />
      ) : (
          <input
          type={type || 'text'}
          name={name}
          value={value || ''}
          onChange={onChange}
          onClick={onClick}
          placeholder={placeholder}
          autoComplete={autoComplete}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
          {...inputProps}
        />
      )}
    </div>
  );
};

const CircularProgress = ({ size, color, className }) => {
  const sizeClass = size === 'small' ? 'h-4 w-4' : 'h-6 w-6';
  const colorClass = color === 'inherit' ? 'text-current' : 'text-blue-600';
  
  return (
    <svg className={`animate-spin ${sizeClass} ${colorClass} ${className || ''}`} xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
    </svg>
  );
};

const DialogTitle = ({ className, children }) => {
  return (
    <div className={`px-6 py-4 border-b border-gray-200 ${className || ''}`}>
      <h3 className="text-lg font-medium text-gray-900">{children}</h3>
    </div>
  );
};

const DialogContent = ({ className, children }) => {
  return (
    <div className={`px-6 py-4 ${className || ''}`}>
      {children}
    </div>
  );
};

const DialogActions = ({ className, children }) => {
  return (
    <div className={`px-6 py-4 border-t border-gray-200 flex justify-end space-x-2 ${className || ''}`}>
      {children}
    </div>
  );
};

const ModernFormLayout = ({ children, title, subtitle, onSubmit, isLoading, submitLabel }) => {
  return (
    <form onSubmit={onSubmit} className="bg-white rounded-lg shadow-lg overflow-hidden">
      <div className="px-6 py-4 bg-gradient-to-r from-blue-500 to-blue-600">
        <h2 className="text-xl font-semibold text-white mb-1">{title}</h2>
        {subtitle && <p className="text-blue-100 text-sm">{subtitle}</p>}
      </div>
      
      <div className="p-6">
        {children}
      </div>
      
      <div className="px-6 py-4 bg-gray-50 flex justify-end space-x-2">
        <Button 
          variant="outlined" 
          color="primary"
          type="button"
          className="w-24"
          onClick={() => window.history.back()}
        >
          Cancel
        </Button>
        
        <Button
          variant="contained"
          color="primary"
          type="submit"
          className="w-24"
          disabled={isLoading}
        >
          {isLoading ? (
            <CircularProgress size="small" color="inherit" className="mr-2" />
          ) : null}
          {submitLabel || 'Save'}
        </Button>
      </div>
    </form>
  );
};

// Employee form component with validation
const EmployeeFormComponent = ({ isEdit = false, onSubmit, newEmployee, handleInputChange, isLoading, setNewEmployee, setShowAddForm, setShowEditForm, employees = [] }) => {
    // Ensure we have a clean way to close the form
    const handleCancel = () => {
      if (isEdit && setShowEditForm) {
        setShowEditForm(false);
      } else if (setShowAddForm) {
        setEmployeeTab('list');
      }
      logger.debug('[EmployeeManagement] Form canceled:', isEdit ? 'edit' : 'add');
    };
  return (
    <ModernFormLayout 
      title={isEdit ? "Edit Employee" : "Add New Employee"}
      subtitle={isEdit ? "Update employee information" : "Add a new employee to your organization"}
      onSubmit={onSubmit}
      onCancel={handleCancel}
      isSubmitting={isLoading}
      submitLabel={isEdit ? "Update Employee" : "Add Employee"}
    >
      {!isEdit && (
        <div className="mb-4 p-3 bg-blue-50 border border-blue-200 rounded-md">
          <p className="text-sm text-blue-700">
            <span className="font-medium">Note:</span> User invitation functionality has been moved to the User Management section in Settings.
          </p>
        </div>
      )}
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
        <TextField
          label="First Name"
            name="first_name"
            value={newEmployee.first_name}
            onChange={handleInputChange}
            required
          fullWidth
        />
        
        <TextField
          label="Date Joined"
          type="date"
          name="date_joined"
          value={newEmployee.date_joined || new Date().toISOString().split('T')[0]}
          onChange={handleInputChange}
          required
          fullWidth
        />
        
        <TextField
          label="Middle Name"
            name="middle_name"
            value={newEmployee.middle_name}
            onChange={handleInputChange}
          fullWidth
        />
        
        <TextField
          label="Last Name"
            name="last_name"
            value={newEmployee.last_name}
            onChange={handleInputChange}
            required
          fullWidth
          />
        
        <TextField
          label="Date of Birth"
          type="date"
          name="dob"
          value={newEmployee.dob}
          onChange={handleInputChange}
          required
          fullWidth
        />
        
        
        
        <TextField
          label="Email"
            type="email"
            name="email"
            value={newEmployee.email}
            onChange={handleInputChange}
            required
          fullWidth
          />
        
        <TextField
          label="Phone Number"
            type="tel"
            name="phone_number"
            value={newEmployee.phone_number}
            onChange={handleInputChange}
          fullWidth
        />
        
        <TextField
          label="Job Title"
            name="job_title"
            value={newEmployee.job_title}
            onChange={handleInputChange}
            required
          fullWidth
        />
        
        <TextField
          label="Department"
            name="department"
            value={newEmployee.department}
            onChange={handleInputChange}
          fullWidth
          />
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Compensation Type</label>
          <select
            name="compensation_type"
            value={newEmployee.compensation_type}
            onChange={handleInputChange}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
          >
            <option value="SALARY">Salary (Yearly)</option>
            <option value="WAGE">Wage (Hourly)</option>
          </select>
        </div>
        
        {newEmployee.compensation_type === 'SALARY' ? (
          <TextField
            label="Annual Salary"
            type="number"
            name="salary"
            value={newEmployee.salary}
            onChange={handleInputChange}
            fullWidth
            inputProps={{ min: "0", step: "0.01" }}
          />
        ) : (
          <TextField
            label="Hourly Wage"
            type="number"
            name="wage_per_hour"
            value={newEmployee.wage_per_hour}
            onChange={handleInputChange}
            fullWidth
            inputProps={{ min: "0", step: "0.01" }}
          />
        )}
        
        
        
        
        
        
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Employment Type</label>
          <select
            name="employment_type"
            value={newEmployee.employment_type}
            onChange={handleInputChange}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
          >
            <option value="FT">Full-time</option>
            <option value="PT">Part-time</option>
          </select>
        </div>
      </div>
      
      {newEmployee.compensation_type === 'WAGE' && (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
          <TextField
            label="Hours Per Day"
            type="number"
            name="hours_per_day"
            value={newEmployee.hours_per_day}
            onChange={handleInputChange}
            fullWidth
            inputProps={{ min: "0", max: "24", step: "0.5" }}
          />
          
          <TextField
            label="Days Per Week"
            type="number"
            name="days_per_week"
            value={newEmployee.days_per_week}
            onChange={handleInputChange}
            fullWidth
            inputProps={{ min: "1", max: "7", step: "1" }}
          />
          
          <TextField
            label="Overtime Rate"
            type="number"
            name="overtime_rate"
            value={newEmployee.overtime_rate}
            onChange={handleInputChange}
            fullWidth
            inputProps={{ min: "0", step: "0.01" }}
          />
      </div>
      )}
    
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
          <div className="flex items-center">
            <input
              type="checkbox"
              name="ID_verified"
              checked={newEmployee.ID_verified}
              onChange={(e) => handleInputChange({ target: { name: 'ID_verified', value: e.target.checked } })}
              className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            />
            <label className="ml-2 block text-sm text-gray-700">
              ID Verified
            </label>
          </div>
          
          <div className="flex items-center">
            <input
              type="checkbox"
              name="areManager"
              checked={newEmployee.areManager}
              onChange={(e) => handleInputChange({ target: { name: 'areManager', value: e.target.checked } })}
              className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            />
            <label className="ml-2 block text-sm text-gray-700">
              Is Manager
            </label>
          </div>
          
          {newEmployee.areManager && (
            <div className="col-span-2">
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Supervising Employees
              </label>
              <div className="mt-2 space-y-2 max-h-60 overflow-y-auto border border-gray-300 rounded-md p-2">
                {employees
                  .filter(emp => emp.id !== newEmployee.id)
                  .map(emp => (
                    <div key={emp.id} className="flex items-center">
                      <input
                        type="radio"
                        name="supervising"
                        id={`supervising-${emp.id}`}
                        value={emp.id}
                        checked={newEmployee.supervising === emp.id}
                        onChange={(e) => {
                          handleInputChange({ 
                            target: { 
                              name: 'supervising', 
                              value: e.target.checked ? emp.id : null 
                            } 
                          });
                        }}
                        className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300"
                      />
                      <label 
                        htmlFor={`supervising-${emp.id}`}
                        className="ml-2 block text-sm text-gray-700"
                      >
                        {emp.first_name} {emp.last_name}
                      </label>
                    </div>
                  ))}
              </div>
              <p className="mt-1 text-sm text-gray-500">
                Select one employee to supervise
              </p>
            </div>
          )}
        </div>
    </ModernFormLayout>
  );
};

// Memoize the form component to prevent unnecessary re-renders
const EmployeeForm = memo(EmployeeFormComponent);

/**
 * Employee Management Component
 * Handles CRUD operations for employees
 */
const EmployeeManagement = () => {

  // Function to handle login redirection on session expiration
  const redirectToLogin = () => {
    const currentPath = window.location.pathname + window.location.search;
    window.location.href = `/login?expired=true&redirect=${encodeURIComponent(currentPath)}`;
  };

  // Function to manually refresh the user session
  const refreshSession = async () => {
    try {
      setLoading(true);
      logger.info('[EmployeeManagement] Attempting to refresh user session manually');
      
      // Ensure auth provider is set
      ensureAuthProvider();
      
      // Try multiple approaches to refresh the session
      
      // 1. First try the standard refresh mechanism
      let refreshed = await refreshUserSession();
      
      // 2. If that fails, try to get current user as a fallback
      if (!refreshed) {
        try {
          const { getCurrentUser, fetchAuthSession } = await import('aws-amplify/auth');
          const currentUser = await getCurrentUser();
          if (currentUser) {
            // Get a fresh auth session
            const session = await fetchAuthSession({ forceRefresh: true });
            if (session?.tokens) {
              logger.info('[EmployeeManagement] Successfully refreshed session via fetchAuthSession');
              refreshed = true;
              
              // Store tokens in app cache for other components to access
              if (typeof window !== 'undefined' && window.__APP_CACHE) {
                window.__APP_CACHE.auth = window.__APP_CACHE.auth || {};
                window.__APP_CACHE.auth.token = session.tokens.idToken?.toString();
                window.__APP_CACHE.auth.provider = 'cognito';
              }
            }
          }
        } catch (getUserError) {
          logger.error('[EmployeeManagement] Error in getCurrentUser fallback:', getUserError);
        }
      }
      
      if (refreshed) {
        setError(null);
        toast.success('Session refreshed successfully');
        fetchEmployees(); // Retry fetching data
      } else {
        setError('Failed to refresh session. Please log in again.');
        // Redirect to login after a short delay
        setTimeout(() => {
          redirectToLogin();
        }, 2000);
      }
    } catch (error) {
      logger.error('[EmployeeManagement] Error refreshing session:', error);
      setError('Failed to refresh session. Please log in again.');
      // Redirect to login after a short delay
      setTimeout(() => {
        redirectToLogin();
      }, 2000);
    } finally {
      setLoading(false);
    }
  };
  const router = useRouter();
  const notifySuccess = (message) => toast.success(message);
  const notifyError = (message) => toast.error(message);
  const notifyInfo = (message) => toast.loading(message);
  const notifyWarning = (message) => toast.error(message, { icon: '⚠️' });
  
  // Add isMounted ref to track component mounting status
  const isMounted = useRef(true);
  // Add refs for tracking network requests and timeouts
  const fetchRequestRef = useRef(null);
  const fetchTimeoutRef = useRef(null);
  
  // Effect to track component mount status
  useEffect(() => {
    const fetchPersonalInfo = async () => {
      try {
        // Fetch real user profile data from API
        const { getUserProfile } = await import('@/services/userService');
        const profileData = await getUserProfile();
        
        if (!profileData || !profileData.profile) {
          console.error('Error: No profile data returned from API');
          return;
        }
        
        const { profile } = profileData;
        
        // Map profile data to our form fields
        setPersonalInfo({
          first_name: profile.firstName || '',
          last_name: profile.lastName || '',
          middle_name: profile.middleName || '',
          email: profile.email || '',
          phone_number: profile.phoneNumber || '',
          address: profile.address || '',
          city: profile.city || '',
          state: profile.state || '',
          zip_code: profile.zipCode || '',
          country: profile.country || 'US',
          dob: profile.dateOfBirth || '',
          gender: profile.gender || '',
          marital_status: profile.maritalStatus || '',
          payment_method: {
            bank_name: profile.bankName || '',
            account_number: profile.bankAccountLastFour ? '****' + profile.bankAccountLastFour : '',
            account_number_confirm: '',
            routing_number: profile.bankRoutingLastFour ? '****' + profile.bankRoutingLastFour : '',
            mobile_wallet_id: profile.mobileWalletId || ''
          },
          emergency_contact: {
            name: profile.emergencyContactName || '',
            relationship: profile.emergencyContactRelationship || '',
            phone: profile.emergencyContactPhone || ''
          }
        });
      } catch (error) {
        console.error('Error fetching personal information:', error);
      }
    };
    
    fetchPersonalInfo();
  }, []);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    
    if (name.includes('.')) {
      const [parent, child] = name.split('.');
      setPersonalInfo(prev => ({
        ...prev,
        [parent]: {
          ...prev[parent],
          [child]: value
        }
      }));
    } else {
      setPersonalInfo(prev => ({
        ...prev,
        [name]: value
      }));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    // Validate that account numbers match if we're editing and both fields have values
    if (isEditing && personalInfo.accountNumber && personalInfo.accountNumberConfirmation) {
      if (personalInfo.accountNumber !== personalInfo.accountNumberConfirmation) {
        setAlertMessage({
          type: 'error',
          message: 'Account numbers do not match. Please verify and try again.'
        });
        return;
      }
    }
    
    setLoading(true);
    
    try {
      // Prepare data for API submission
      const paymentDetails = {};
      
      // Add data based on payment provider
      if (personalInfo.paymentProvider === 'stripe') {
        paymentDetails.bank_name = personalInfo.bankName;
        
        // Only include account details if they were modified
        if (personalInfo.accountNumber && personalInfo.routingNumber) {
          paymentDetails.account_number = personalInfo.accountNumber;
          paymentDetails.routing_number = personalInfo.routingNumber;
        }
      } else if (personalInfo.paymentProvider === 'mpesa') {
        paymentDetails.mpesa_phone_number = personalInfo.mpesaPhoneNumber;
      } else if (personalInfo.paymentProvider === 'paypal') {
        paymentDetails.paypal_email = personalInfo.paypalEmail;
      }
      
      // Call the API to update employee payment method
      const paymentResponse = await fetch(`/api/payments/employees/${employeeData.id}/payment-method/`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          provider: personalInfo.paymentProvider,
          details: paymentDetails
        })
      });
      
      const paymentResult = await paymentResponse.json();
      
      if (paymentResponse.ok) {
        // Now update the rest of the personal information
        // ... existing simulation code ...
        
        // Show success message with security note if using Stripe
        if (paymentResult.secure_storage) {
          setAlertMessage({
            type: 'success',
            message: 'Your information was saved successfully. For security, your full account details are stored securely with our payment processor and only the last 4 digits are stored in our system.'
          });
        } else {
          setAlertMessage({
            type: 'success',
            message: 'Your information was saved successfully!'
          });
        }
        
        // Reset confirmation field and editing state
        setPersonalInfo(prev => ({
          ...prev,
          accountNumberConfirmation: ''
        }));
        setIsEditing(false);
      } else {
        throw new Error(paymentResult.error || 'Failed to update payment information');
      }
    } catch (error) {
      console.error("Error saving information:", error);
      setAlertMessage({
        type: 'error',
        message: error.message || 'An error occurred while saving your information. Please try again.'
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="bg-white rounded-lg">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-xl font-semibold">Personal Information</h2>
        {!isEditing ? (
          <Button
            variant="contained"
            color="primary"
            onClick={() => setIsEditing(true)}
          >
            Edit Information
          </Button>
        ) : (
          <div className="flex space-x-2">
            <Button
              variant="outlined"
              color="primary"
              onClick={() => setIsEditing(false)}
              disabled={isSaving}
            >
              Cancel
            </Button>
            <Button
              variant="contained"
              color="primary"
              onClick={handleSubmit}
              disabled={isSaving}
            >
              {isSaving ? 'Saving...' : 'Save Changes'}
            </Button>
          </div>
        )}
      </div>

      {saveSuccess && (
        <Alert severity="success" className="mb-4">
          Your personal information has been updated successfully.
        </Alert>
      )}

      {saveError && (
        <Alert severity="error" className="mb-4">
          {saveError}
        </Alert>
      )}

      <form onSubmit={handleSubmit}>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <TextField
            label="First Name"
            name="first_name"
            value={personalInfo.first_name}
            onChange={handleInputChange}
            required
            fullWidth
            disabled={!isEditing}
          />
          
          <TextField
            label="Last Name"
            name="last_name"
            value={personalInfo.last_name}
            onChange={handleInputChange}
            required
            fullWidth
            disabled={!isEditing}
          />
          
          <TextField
            label="Middle Name"
            name="middle_name"
            value={personalInfo.middle_name}
            onChange={handleInputChange}
            fullWidth
            disabled={!isEditing}
          />
          
          <TextField
            label="Email"
            type="email"
            name="email"
            value={personalInfo.email}
            onChange={handleInputChange}
            required
            fullWidth
            disabled={!isEditing}
          />
          
          <TextField
            label="Phone Number"
            type="tel"
            name="phone_number"
            value={personalInfo.phone_number}
            onChange={handleInputChange}
            fullWidth
            disabled={!isEditing}
          />
          
          <TextField
            label="Date of Birth"
            type="date"
            name="dob"
            value={personalInfo.dob}
            onChange={handleInputChange}
            fullWidth
            disabled={!isEditing}
          />
          
          <TextField
            label="Gender"
            name="gender"
            value={personalInfo.gender}
            onChange={handleInputChange}
            fullWidth
            disabled={!isEditing}
          />
          
          <TextField
            label="Marital Status"
            name="marital_status"
            value={personalInfo.marital_status}
            onChange={handleInputChange}
            fullWidth
            disabled={!isEditing}
          />
          
          <TextField
            label="Address"
            name="address"
            value={personalInfo.address}
            onChange={handleInputChange}
            fullWidth
            disabled={!isEditing}
          />
          
          <TextField
            label="City"
            name="city"
            value={personalInfo.city}
            onChange={handleInputChange}
            fullWidth
            disabled={!isEditing}
          />
          
          <TextField
            label="State/Province"
            name="state"
            value={personalInfo.state}
            onChange={handleInputChange}
            fullWidth
            disabled={!isEditing}
          />
          
          <TextField
            label="ZIP/Postal Code"
            name="zip_code"
            value={personalInfo.zip_code}
            onChange={handleInputChange}
            fullWidth
            disabled={!isEditing}
          />
          
          <TextField
            label="Country"
            name="country"
            value={personalInfo.country}
            onChange={handleInputChange}
            fullWidth
            disabled={!isEditing}
          />
        </div>
        
        <div className="mt-8">
          <h3 className="text-lg font-medium mb-4">Payment Method</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <TextField
              label="Bank Name"
              name="payment_method.bank_name"
              value={personalInfo.payment_method.bank_name}
              onChange={handleInputChange}
              fullWidth
              disabled={!isEditing}
            />
            
            <TextField
              label="Account Number"
              name="payment_method.account_number"
              value={personalInfo.payment_method.account_number}
              onChange={handleInputChange}
              fullWidth
              disabled={!isEditing}
              type={isEditing ? "text" : "password"}
            />
            
            {isEditing && (
              <TextField
                label="Confirm Account Number"
                name="payment_method.account_number_confirm"
                value={personalInfo.payment_method.account_number_confirm}
                onChange={handleInputChange}
                fullWidth
                required
                error={personalInfo.payment_method.account_number !== personalInfo.payment_method.account_number_confirm}
                helperText={personalInfo.payment_method.account_number !== personalInfo.payment_method.account_number_confirm ? "Account numbers don't match" : ""}
                type="text"
              />
            )}
            
            <TextField
              label="Routing Number"
              name="payment_method.routing_number"
              value={personalInfo.payment_method.routing_number}
              onChange={handleInputChange}
              fullWidth
              disabled={!isEditing}
              type={isEditing ? "text" : "password"}
            />
            
            {personalInfo.country === 'KE' && (
              <TextField
                label="M-Pesa Phone Number"
                name="payment_method.mobile_wallet_id"
                value={personalInfo.payment_method.mobile_wallet_id}
                onChange={handleInputChange}
                fullWidth
                disabled={!isEditing}
                placeholder="e.g., 07XXXXXXXX"
              />
            )}
          </div>
        </div>
        
        <div className="mt-8">
          <h3 className="text-lg font-medium mb-4">Emergency Contact</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <TextField
              label="Name"
              name="emergency_contact.name"
              value={personalInfo.emergency_contact.name}
              onChange={handleInputChange}
              fullWidth
              disabled={!isEditing}
            />
            
            <TextField
              label="Relationship"
              name="emergency_contact.relationship"
              value={personalInfo.emergency_contact.relationship}
              onChange={handleInputChange}
              fullWidth
              disabled={!isEditing}
            />
            
            <TextField
              label="Phone Number"
              name="emergency_contact.phone"
              value={personalInfo.emergency_contact.phone}
              onChange={handleInputChange}
              fullWidth
              disabled={!isEditing}
            />
          </div>
        </div>
      </form>
    </div>
  );
};

export default EmployeeManagement;