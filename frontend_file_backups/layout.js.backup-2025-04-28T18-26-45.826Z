'use client';

import React, { useState, useEffect, useMemo } from 'react';
import { useRouter, usePathname, useSearchParams } from 'next/navigation';
import { refreshUserSession } from '@/utils/refreshUserSession';
import { getStoredTokens } from '@/utils/tokenStorage';
import { logger } from '@/utils/logger';

const ONBOARDING_STEPS = {
  'business-info': { title: 'Business Info', description: 'Enter your business details', step: 1 },
  'subscription': { title: 'Choose Plan', description: 'Select a subscription plan', step: 2 },
  'payment': { title: 'Payment Details', description: 'Enter your payment information', step: 3 },
  'setup': { title: 'Setup', description: 'Final setup and configuration', step: 4 },
  'complete': { title: 'Complete', description: 'Onboarding complete', step: 5 }
};

export default function OnboardingLayout({ children }) {
  const router = useRouter();
  const pathname = usePathname();
  const searchParams = useSearchParams();
  const [isLoading, setIsLoading] = useState(true);
  const [isRefreshing, setIsRefreshing] = useState(false); 
  const [refreshError, setRefreshError] = useState(false);
  const [currentStep, setCurrentStep] = useState('');

  // Function to handle token refresh
  const handleTokenRefresh = async () => {
    try {
      setIsRefreshing(true);
      logger.debug('[OnboardingLayout] Attempting to refresh user session');
      const result = await refreshUserSession();
      
      if (result && result.tokens) {
        logger.debug('[OnboardingLayout] Session refreshed successfully');
        setRefreshError(false);
        return true;
      } else {
        logger.warn('[OnboardingLayout] Failed to refresh session, tokens not returned');
        setRefreshError(true);
        return false;
      }
    } catch (error) {
      logger.error('[OnboardingLayout] Error refreshing session:', error);
      setRefreshError(true);
      return false;
    } finally {
      setIsRefreshing(false);
    }
  };

  useEffect(() => {
    const checkAuth = async () => {
      // Regular auth check
      const hasAuthToken = getStoredTokens().idToken || getStoredTokens().accessToken;
      
      if (!hasAuthToken) {
        logger.debug('[OnboardingLayout] No auth tokens found, attempting refresh');
        const refreshSuccessful = await handleTokenRefresh();
        
        if (!refreshSuccessful) {
          logger.debug('[OnboardingLayout] Refresh failed, redirecting to signin');
          router.push('/auth/signin?from=onboarding&noredirect=true');
          return;
        }
      }

      setIsLoading(false);
    };

    checkAuth();
  }, [router, pathname]);

  return (
    <div className="flex flex-col min-h-screen md:flex-row bg-gray-50">
      {children}
    </div>
  );
}
