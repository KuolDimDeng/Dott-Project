{
  "permissions": {
    "allow": [
      "Bash(./fix-browserslist.sh)",
      "Bash(./sync_tenant_tables.sh)",
      "Bash(PGPASSWORD=postgres psql -h localhost -U postgres -l)",
      "Bash(cat:*)",
      "Bash(cd:*)",
      "Bash(chmod:*)",
      "Bash(cp:*)",
      "Bash(find:*)",
      "Bash(git add:*)",
      "Bash(git checkout:*)",
      "Bash(git commit:*)",
      "Bash(grep:*)",
      "Bash(ls -la package*)",
      "Bash(ls)",
      "Bash(ls:*)",
      "Bash(mkdir:*)",
      "Bash(mv:*)",
      "Bash(node:*)",
      "Bash(npm run build:*)",
      "Bash(npm run clear:*)",
      "Bash(npm run dev:*)",
      "Bash(npx browserslist)",
      "Bash(pip install:*)",
      "Bash(pnpm add:*)",
      "Bash(pnpm dev:*)",
      "Bash(pnpm remove:*)",
      "Bash(pnpm run dev:*)",
      "Bash(pnpm run:*)",
      "Bash(psql:*)",
      "Bash(python manage.py reset_db_main:*)",
      "Bash(python manage.py:*)",
      "Bash(python3 manage.py shell:*)",
      "Bash(python3:*)",
      "Bash(python:*)",
      "Bash(rm:*)",
      "Bash(sed:*)",
      "Bash(source:*)",
      "Bash(touch:*)",
      "Bash(aws logs:*)",
      "Bash(aws elasticbeanstalk request-environment-info:*)",
      "Bash(./scripts/deploy_fixed_dottapps.sh:*)",
      "Bash(./scripts/deploy_optimized_dottapps.sh:*)",
      "Bash(aws elasticbeanstalk list-available-solution-stacks:*)",
      "Bash(git push:*)",
      "Bash(./deploy-to-eb.sh:*)",
      "Bash(./deploy-with-aws-cli.sh)",
      "Bash(./deploy-clean.sh:*)",
      "Bash(aws elasticbeanstalk describe-environments:*)",
      "Bash(aws elasticbeanstalk describe-events:*)",
      "Bash(aws elasticbeanstalk retrieve-environment-info:*)",
      "Bash(eb deploy:*)",
      "Bash(__NEW_LINE__ aws elasticbeanstalk create-environment --application-name DottApps --environment-name DottApps-env-clean --solution-stack-name \"64bit Amazon Linux 2023 v4.5.2 running Docker\" --version-label \"clean-deployment-20250529-200047\" --option-settings file://environment-config.json --region us-east-1)",
      "Bash(__NEW_LINE__ aws apprunner create-vpc-connector --vpc-connector-name dott-vpc-connector --subnets subnet-0cc4a92e849ff4b13 subnet-005ad102daaebca3a --region us-east-1)",
      "Bash(__NEW_LINE__ aws apprunner create-service --cli-input-json file://apprunner-simple-config.json --region us-east-1)",
      "Bash(aws apprunner describe-service:*)",
      "Bash(./deploy-to-apprunner.sh:*)",
      "Bash(./deploy-with-codebuild.sh)",
      "Bash(brew install:*)",
      "Bash(open:*)",
      "Bash(ln:*)",
      "Bash(export:*)",
      "Bash(docker:*)",
      "Bash(./deploy-simple.sh)",
      "Bash(killall:*)",
      "Bash(./deploy-via-codebuild-fixed.sh:*)",
      "Bash(tar:*)",
      "Bash(aws s3 cp:*)",
      "Bash(./create-minimal-source.sh:*)",
      "Bash(./create-essential-source.sh:*)",
      "Bash(./create-final-source.sh:*)",
      "Bash(aws codebuild start-build:*)",
      "Bash(aws codebuild batch-get-builds:*)",
      "Bash(./create-root-dockerfile.sh:*)",
      "Bash(./create-ultra-minimal.sh:*)",
      "Bash(pnpm list:*)",
      "Bash(pnpm install:*)",
      "Bash(pnpm build:*)",
      "Bash(npm view:*)",
      "Bash(vercel:*)",
      "Bash(./trigger-render-deployment.sh:*)",
      "Bash(./monitor-render-deployment.sh:*)",
      "Bash(./test-deployment-success.sh:*)",
      "Bash(./force-backend-deployment.sh:*)",
      "Bash(./deploy-frontend-render.sh:*)",
      "Bash(git reset:*)",
      "Bash(curl:*)",
      "Bash(venv/bin/python scripts/fix_onboarding_redirect_loop.py:*)",
      "Bash(venv/bin/python scripts/fix_user_onboarding_status.py:*)",
      "WebFetch(domain:www.waveapps.com)",
      "Bash(./scripts/test_session_locally.sh:*)",
      "Bash(rg:*)",
      "Bash(true)",
      "Bash(./scripts/update_signin_form.sh:*)",
      "Bash(timeout 30 pnpm run build:*)",
      "Bash(git rm:*)",
      "Bash(git revert:*)",
      "Bash(git restore:*)",
      "Bash(awk:*)",
      "Bash(npm run lint:*)",
      "Bash(for:*)",
      "Bash(do echo \"=== $file ===\")",
      "Bash(done)",
      "Bash(npx create-expo-app:*)",
      "Bash(npx expo start:*)",
      "Bash(DJANGO_SETTINGS_MODULE=pyfactor.settings python -c \"import django; django.setup(); from taxes.views import TaxFilingLocationViewSet, TaxReminderViewSet; print(''✅ Successfully imported TaxFilingLocationViewSet and TaxReminderViewSet'')\")",
      "Bash(pnpm start:*)",
      "Bash(pkill:*)",
      "Bash(expo start:*)",
      "Bash(npx expo install:*)",
      "Bash(/bin/bash -c \"cd /Users/kuoldeng/projectx && pwd && git status\")",
      "Bash(git --git-dir=/Users/kuoldeng/projectx/.git --work-tree=/Users/kuoldeng/projectx add frontend/pyfactor_next/src/app/api/taxes/suggestions/route.js)",
      "Bash(/Users/kuoldeng/projectx/deploy_tax_debug.sh:*)",
      "Bash(./deploy_tax_debug.sh:*)",
      "Bash(bash:*)",
      "Bash(git -C /Users/kuoldeng/projectx status)",
      "Bash(/usr/bin/git -C /Users/kuoldeng/projectx status)",
      "Bash(sh -c 'cd /Users/kuoldeng/projectx && git status')",
      "Bash(exec bash -c 'cd /Users/kuoldeng/projectx && git status')",
      "Bash(ZDOTDIR=/tmp bash -c 'cd /Users/kuoldeng/projectx && git status')",
      "Bash(./deploy_chart_fix.sh:*)",
      "Bash(npx eslint:*)",
      "Bash(pip3 install:*)",
      "Bash(NODE_ENV=production NODE_OPTIONS=\"--max-old-space-size=6144\" pnpm build)",
      "Bash(NODE_ENV=production NODE_OPTIONS=\"--max-old-space-size=6144\" pnpm run build:render)",
      "Bash(dig:*)",
      "Bash(nslookup:*)",
      "Bash(sudo dscacheutil:*)",
      "Bash(sudo killall:*)",
      "Bash(DJANGO_SETTINGS_MODULE=pyfactor.settings python3 -c \"import django; django.setup(); print(''✅ Django settings loaded successfully'')\")",
      "Bash(DJANGO_SETTINGS_MODULE=pyfactor.settings python3 -c \"import django; django.setup(); print(''✅ Django settings loaded successfully with all packages'')\")",
      "WebFetch(domain:docs.wise.com)",
      "Bash(git fetch:*)",
      "Bash(scp:*)",
      "Bash(ssh:*)",
      "Bash(do echo -n \"$lang: \")",
      "Bash([ -f \"/Users/kuoldeng/projectx/frontend/pyfactor_next/public/locales/$lang/auth.json\" ])",
      "Bash(/tmp/check_free_translation.sh:*)",
      "Bash(do)",
      "Bash(file=\"/Users/kuoldeng/projectx/frontend/pyfactor_next/public/locales/$lang/onboarding.json\")",
      "Bash(if [ -f \"$file\" ])",
      "Bash(jq:*)",
      "Bash(/dev/null)",
      "Bash(then)",
      "Bash(echo:*)",
      "Bash(fi)",
      "Bash(DATABASE_URL=\"postgresql://postgres:postgres@localhost:5432/pyfactor_dev\" python3 interactive_user_cleanup.py)",
      "Bash(./scripts/test_whatsapp_business_locally.sh:*)",
      "Bash(./scripts/quick_test_whatsapp.sh:*)",
      "Bash(/Users/kuoldeng/projectx/test_frontend_build.sh:*)",
      "Bash(./test_whatsapp_docker.sh:*)",
      "Bash(npx tsc:*)",
      "WebFetch(domain:dottapps.com)",
      "Bash(git pull:*)",
      "Bash(pnpm logs:*)",
      "Bash(__NEW_LINE__ LANGUAGES=\"pt de ja tr id vi nl ha yo am zu ko\")",
      "Bash(if [ ! -f \"$lang/calendar.json\" ])",
      "Bash(else)",
      "Bash(__NEW_LINE__ for lang in pt de ja tr id vi nl ha yo am zu ko)"
    ],
    "deny": []
  }
}