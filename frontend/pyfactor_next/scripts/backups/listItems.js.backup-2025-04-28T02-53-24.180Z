/**
 * @component MainListItems
 * @description 
 * IMPORTANT: THIS IS THE FINAL DESIGN AND LAYOUT FOR THE MAIN LIST MENU.
 * DO NOT MAKE ANY CHANGES TO THIS COMPONENT WITHOUT EXPRESS PERMISSION FROM THE OWNER.
 * This design was finalized on 2025-04-06 with the following specifications:
 * - Complete navigation menu system for the dashboard with collapsible sections
 * - Support for both expanded and icon-only views
 * - Custom SVG icons for all menu items
 * - Mobile and desktop responsive behavior
 * - Smooth animations and hover effects
 * 
 * Any changes require explicit approval from the project owner.
 */

'use client';

import React,    /* 
    // CRM menu item - This will be used in future versions of the application    /* 
    // Transport menu item - This will be used in future versions of the application
    {
      icon: <NavIcons.Shipping className="w-5 h-5" />,
      label: 'Transport',
      subItems: [
        { label: 'Dashboard', onClick: handleTransportClick, value: 'dashboard' },
        { label: 'Loads/Jobs', onClick: handleTransportClick, value: 'loads' },
        { label: 'Vehicle', onClick: handleTransportClick, value: 'equipment' },
        { label: 'Routes', onClick: handleTransportClick, value: 'routes' },
        { label: 'Expenses', onClick: handleTransportClick, value: 'expenses' },
        { label: 'Maintenance', onClick: handleTransportClick, value: 'maintenance' },
        { label: 'Compliance', onClick: handleTransportClick, value: 'compliance' },
        { label: 'Reports', onClick: handleTransportClick, value: 'reports' },
      ],
    },
    */
        { label: 'Loads/Jobs', onClick: handleTransportClick, value: 'loads' },
        { label: 'Vehicle', onClick: handleTransportClick, value: 'equipment' },
        { label: 'Routes', onClick: handleTransportClick, value: 'routes' },
        { label: 'Expenses', onClick: handleTransportClick, value: 'expenses' },
        { label: 'Maintenance', onClick: handleTransportClick, value: 'maintenance' },
        { label: 'Compliance', onClick: handleTransportClick, value: 'compliance' },
        { label: 'Reports', onClick: handleTransportClick, value: 'reports' },
      ],
    },
    {
      icon: <NavIcons.Payments className="w-5 h-5" />,
      label: 'Payments',
      subItems: [
        { label: 'Dashboard', onClick: handlePaymentsClick, value: 'dashboard' },
        { label: 'Receive Payments', onClick: handlePaymentsClick, value: 'receive-payments' },
        { label: 'Make Payments', onClick: handlePaymentsClick, value: 'make-payments' },
        { label: 'Payment Methods', onClick: handlePaymentsClick, value: 'payment-methods' },
        { label: 'Recurring Payments', onClick: handlePaymentsClick, value: 'recurring-payments' },
        { label: 'Refunds', onClick: handlePaymentsClick, value: 'refunds' },
        { label: 'Payment Reconciliation', onClick: handlePaymentsClick, value: 'reconciliation' },
        { label: 'Payment Gateways', onClick: handlePaymentsClick, value: 'payment-gateways' },
        { label: 'Payment Plans', onClick: handlePaymentsClick, value: 'payment-plans' },
        { label: 'Reports', onClick: handlePaymentsClick, value: 'reports' },
      ],
    },
    {
      icon: <NavIcons.Cart className="w-5 h-5" />,
      label: 'Purchases',
      subItems: [
        { label: 'Dashboard', onClick: handlePurchasesClick, value: 'dashboard' },
        { label: 'Vendors', onClick: handlePurchasesClick, value: 'vendors' },
        { label: 'Purchase Orders', onClick: handlePurchasesClick, value: 'purchase-orders' },
        { label: 'Bills', onClick: handlePurchasesClick, value: 'bills' },
        { label: 'Expenses', onClick: handlePurchasesClick, value: 'expenses' },
        { label: 'Purchase Returns', onClick: handlePurchasesClick, value: 'purchase-returns' },
        { label: 'Procurement', onClick: handlePurchasesClick, value: 'procurement' },
        { label: 'Reports', onClick: handlePurchasesClick, value: 'reports' },
      ],
    },
    {
      icon: <NavIcons.Bank className="w-5 h-5" />,
      label: 'Accounting',
      subItems: [
        { label: 'Dashboard', onClick: handleAccountingClick, value: 'dashboard' },
        { label: 'Chart of Accounts', onClick: handleAccountingClick, value: 'chart-of-accounts' },
        { label: 'Journal Entries', onClick: handleAccountingClick, value: 'journal-entries' },
        { label: 'General Ledger', onClick: handleAccountingClick, value: 'general-ledger' },
        { label: 'Reconciliation', onClick: handleAccountingClick, value: 'reconciliation' },
        {
          label: 'Financial Statements',
          onClick: handleAccountingClick,
          value: 'financial-statements',
        },
        { label: 'Fixed Assets', onClick: handleAccountingClick, value: 'fixed-assets' },
        { label: 'Reports', onClick: handleAccountingClick, value: 'reports' },
      ],
    },
    {
      icon: <NavIcons.Wallet className="w-5 h-5" />,
      label: 'Banking',
      subItems: [
        { label: 'Dashboard', onClick: handleBankingClick, value: 'dashboard' },
        { label: 'Connect to Bank', onClick: handleBankingClick, value: 'connect' },
        { label: 'Bank Transactions', onClick: handleBankingClick, value: 'transactions' },
        { label: 'Bank Reconciliation', onClick: handleBankingClick, value: 'reconciliation' },
        { label: 'Reports', onClick: handleBankingClick, value: 'bank-reports' },
      ],
    },
    {
      icon: <NavIcons.People className="w-5 h-5" />,
      label: 'HR',
      subItems: [
        { label: 'Dashboard', onClick: handleHRClick, value: 'dashboard' },
        { 
          label: 'Employees', 
          onClick: () => {
            console.log('[listItems] Employees menu item clicked');
            // Dispatch a standardized navigation event
            const navigationKey = `nav-${Date.now()}`;
            const payload = { 
              item: 'employees', 
              navigationKey
            };
            
            // Dispatch navigation events for all listeners
            window.dispatchEvent(new CustomEvent('menuNavigation', { detail: payload }));
            
            // Call the handler directly if it exists
            if (typeof handleEmployeeManagementClick === 'function') {
              handleEmployeeManagementClick();
            } else if (typeof handleHRClick === 'function') {
              // Fallback to handleHRClick with employees section
              handleHRClick('employees');
            }
          }
        },
        { 
          label: 'Timesheets', 
          onClick: () => {
            console.log('[listItems] Timesheets menu item clicked');
            // Dispatch a standardized navigation event
            const navigationKey = `nav-${Date.now()}`;
            const payload = { 
              item: 'timesheets', 
              navigationKey
            };
            
            // Dispatch navigation events for all listeners
            window.dispatchEvent(new CustomEvent('menuNavigation', { detail: payload }));
            
            // Call the handler directly
            if (typeof handleHRClick === 'function') {
              handleHRClick('timesheets');
            }
          }
        },
        { 
          label: 'Pay', 
          onClick: () => {
            console.log('[listItems] Pay menu item clicked');
            // Dispatch a standardized navigation event
            const navigationKey = `nav-${Date.now()}`;
            const payload = { 
              item: 'pay', 
              navigationKey
            };
            
            // Dispatch navigation events for all listeners
            window.dispatchEvent(new CustomEvent('menuNavigation', { detail: payload }));
            
            // Call the handler directly
            if (typeof handleHRClick === 'function') {
              handleHRClick('pay');
            }
          }
        },
        { 
          label: 'Benefits', 
          onClick: () => {
            console.log('[DEBUG] Benefits menu item clicked - Start');
            
            // Generate a unique navigation key for navigation
            const navigationKey = `benefits-${Date.now()}`;
            console.log('[DEBUG] Generated navigationKey:', navigationKey);
            
            const payload = { 
              item: 'benefits', 
              navigationKey,
              source: 'hr-benefits-menu-click'
            };
            
            console.log('[DEBUG] Dispatching menuNavigation event with payload:', JSON.stringify(payload));
            
            // Dispatch navigation events for all listeners
            window.dispatchEvent(new CustomEvent('menuNavigation', { detail: payload }));
            console.log('[DEBUG] menuNavigation event dispatched');
            
            // Call the handler directly
            if (typeof handleHRClick === 'function') {
              console.log('[DEBUG] Calling handleHRClick with section: benefits');
              handleHRClick('benefits');
              console.log('[DEBUG] handleHRClick called');
            } else {
              console.error('[DEBUG] handleHRClick is not a function');
            }
            
            console.log('[DEBUG] Benefits menu item clicked - End');
          }
        },
        { 
          label: 'Reports', 
          onClick: () => {
            console.log('[DEBUG-REPORT] Reports menu item clicked - Starting the click handler');
            
            // Generate a unique navigation key for proper remounting
            const navigationKey = `reports-${Date.now()}`;
            
            // Use a standard payload format that matches what handleMenuNavigation expects
            const payload = {
              item: 'hr-reports', 
              navigationKey,
              source: 'hr-reports-menu-click'
            };
            
            console.log('[DEBUG-REPORT] About to dispatch menuNavigation event with payload:', payload);
            window.dispatchEvent(new CustomEvent('menuNavigation', { detail: payload }));
            console.log('[DEBUG-REPORT] menuNavigation event dispatched');
            
            // Call the handler directly
            if (typeof handleHRClick === 'function') {
              console.log('[DEBUG-REPORT] handleHRClick exists, calling with section: reports');
              handleHRClick('reports');
              console.log('[DEBUG-REPORT] handleHRClick called successfully');
            } else {
              console.error('[DEBUG-REPORT] ERROR: handleHRClick is not a function, type:', typeof handleHRClick);
            }
            
            console.log('[DEBUG-REPORT] Reports menu item click handler completed');
          }
        },
        { label: 'Performance', onClick: handleHRClick, value: 'performance' },
      ],
    },
    {
      icon: <NavIcons.Payments className="w-5 h-5" />,
      label: 'Payroll',
      subItems: [
        { label: 'Dashboard', onClick: handlePayrollClick, value: 'dashboard' },
        { label: 'Run Payroll', onClick: handlePayrollClick, value: 'run' },
        { label: 'Payroll Transactions', onClick: handlePayrollClick, value: 'transactions' },
        { label: 'Reports', onClick: handlePayrollClick, value: 'reports' },
      ],
    },
    {
      icon: <NavIcons.Receipt className="w-5 h-5" />,
      label: 'Taxes',
      subItems: [
        { label: 'Dashboard', onClick: handleTaxesClick, value: 'dashboard' },
        { label: 'Sales Tax', onClick: handleTaxesClick, value: 'sales-tax' },
        { label: 'Income Tax', onClick: handleTaxesClick, value: 'income-tax' },
        { label: 'Payroll Tax', onClick: handleTaxesClick, value: 'payroll-tax' },
        { label: 'Tax Payments', onClick: handleTaxesClick, value: 'tax-payments' },
        { label: 'Tax Forms', onClick: handleTaxesClick, value: 'tax-forms' },
        { label: 'Reports', onClick: handleTaxesClick, value: 'reports' },
      ],
    },
    {
      icon: <NavIcons.Reports className="w-5 h-5" />,
      label: 'Reports',
      subItems: [
        { label: 'Profit & Loss Statement', onClick: handleReportClick, value: 'income_statement' },
        { label: 'Balance Sheet', onClick: handleReportClick, value: 'balance_sheet' },
        { label: 'Cash Flow', onClick: handleReportClick, value: 'cash_flow' },
        { label: 'Sales Tax ', onClick: handleReportClick, value: 'sales_tax_report' },
        { label: 'Payroll Wage Tax', onClick: handleReportClick, value: 'payroll_wage_tax_report' },
        { label: 'Income by Customer', onClick: handleReportClick, value: 'income_by_customer' },
        { label: 'Aged Receivables', onClick: handleReportClick, value: 'aged_receivables' },
        { label: 'Purchases by Vendor', onClick: handleReportClick, value: 'purchases_by_vendor' },
        { label: 'Aged Payables', onClick: handleReportClick, value: 'aged_payables' },
        { label: 'Account Balances', onClick: handleReportClick, value: 'account_balances' },
        { label: 'Trial Balances', onClick: handleReportClick, value: 'trial_balance' },
        { label: 'General Ledger', onClick: handleReportClick, value: 'general_ledger' },
      ],
    },
    {
      icon: <NavIcons.Analytics className="w-5 h-5" />,
      label: 'Analytics',
      subItems: [
        { label: 'Dashboard', onClick: handleAnalysisClick, value: 'kpi-data' },
        { label: 'A.I Query', onClick: handleAnalysisClick, value: 'ai-query' },
      ],
    },
  ];

  const createOptions = [
    {
      label: 'Create New',
      description: 'Create a new transaction, invoice, or entity',
      icon: (props) => (
        <svg className={props.className} fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
        </svg>
      ),
      onClick: (isIconOnly, handleDrawerClose, handleShowCreateMenu) => {
        console.log('Create New button clicked');
        if (isIconOnly) {
          handleDrawerClose();
        }
        // Use handleShowCreateMenu instead of showing a local dropdown
        if (typeof handleShowCreateMenu === 'function') {
          handleShowCreateMenu();
        } else {
          console.error('handleShowCreateMenu is not a function');
        }
      }
    },
    {
      label: 'Transaction',
      description: 'Create a new transaction',
      icon: (props) => (
        <svg className={props.className} fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2zm7-5a2 2 0 11-4 0 2 2 0 014 0z" />
        </svg>
      ),
      onClick: (isIconOnly, handleDrawerClose, handleShowCreateMenu, handleShowCreateOptions) => {
        if (typeof handleShowCreateOptions === 'function') {
          handleShowCreateOptions('Transaction');
        }
      }
    },
    {
      label: 'Product',
      icon: <NavIcons.Inventory className="w-4 h-4" />,
      onClick: (isIconOnly, handleDrawerClose, handleShowCreateMenu, handleShowCreateOptions) => {
        if (typeof handleShowCreateOptions === 'function') {
          handleShowCreateOptions('Product');
        }
      },
      value: 'Product'
    },
    {
      label: 'Service',
      icon: <NavIcons.Receipt className="w-4 h-4" />,
      onClick: (isIconOnly, handleDrawerClose, handleShowCreateMenu, handleShowCreateOptions) => {
        if (typeof handleShowCreateOptions === 'function') {
          handleShowCreateOptions('Service');
        }
      },
      value: 'Service'
    },
    {
      label: 'Invoice',
      icon: <NavIcons.Description className="w-4 h-4" />,
      onClick: (isIconOnly, handleDrawerClose, handleShowCreateMenu, handleShowCreateOptions) => {
        if (typeof handleShowCreateOptions === 'function') {
          handleShowCreateOptions('Invoice');
        }
      },
      value: 'Invoice'
    },
    {
      label: 'Bill',
      icon: <NavIcons.Cart className="w-4 h-4" />,
      onClick: (isIconOnly, handleDrawerClose, handleShowCreateMenu, handleShowCreateOptions) => {
        if (typeof handleShowCreateOptions === 'function') {
          handleShowCreateOptions('Bill');
        }
      },
      value: 'Bill'
    },
    {
      label: 'Estimate',
      icon: <NavIcons.Reports className="w-4 h-4" />,
      onClick: (isIconOnly, handleDrawerClose, handleShowCreateMenu, handleShowCreateOptions) => {
        if (typeof handleShowCreateOptions === 'function') {
          handleShowCreateOptions('Estimate');
        }
      },
      value: 'Estimate'
    },
    {
      label: 'Customer',
      icon: <NavIcons.People className="w-4 h-4" />,
      onClick: (isIconOnly, handleDrawerClose, handleShowCreateMenu, handleShowCreateOptions) => {
        if (typeof handleShowCreateOptions === 'function') {
          handleShowCreateOptions('Customer');
        }
      },
      value: 'Customer'
    },
    {
      label: 'Vendor',
      icon: <NavIcons.Contacts className="w-4 h-4" />,
      onClick: (isIconOnly, handleDrawerClose, handleShowCreateMenu, handleShowCreateOptions) => {
        if (typeof handleShowCreateOptions === 'function') {
          handleShowCreateOptions('Vendor');
        }
      },
      value: 'Vendor'
    },
  ];

  // Create a Tailwind CSS based collapsible menu component to replace MUI Collapse
  const CollapsibleMenu = ({ isOpen, children }) => (
    <div className={`overflow-hidden transition-all duration-300 ease-in-out ${isOpen ? 'max-h-96' : 'max-h-0'}`}>
      {children}
    </div>
  );

  // Render the sub-menu using Tailwind instead of MUI components
  const renderSubMenu = (items, parentMenu) => (
    <CollapsibleMenu isOpen={openMenu === parentMenu}>
      <ul className="pl-10 mt-1">
        {items.map((item, index) => (
          <li key={index}>
            <button
              className={`flex items-center w-full text-left px-4 py-2 text-sm rounded-md
                ${hoveredItem === `${parentMenu}-${item.value}` ? 'bg-gray-100' : ''}
                hover:bg-gray-100 text-primary-main
              `}
              onClick={(event) => {
                if (item.subItems) {
                  handleMenuToggle(item.label);
                } else if (item.onClick && item.value) {
                  // For handlers that take a value parameter
                  if (typeof item.onClick === 'function') {
                    item.onClick(item.value);
                  }
                  // Also update our active item state
                  setActiveItem && setActiveItem(`${parentMenu}-${item.value}`);
                } else if (item.onClick) {
                  // For handlers without parameters
                  if (typeof item.onClick === 'function') {
                    item.onClick();
                  }
                  // Also update our active item state
                  setActiveItem && setActiveItem(item.label);
                }
              }}
              onMouseEnter={() => handleMouseEnter(`${parentMenu}-${item.value}`)}
              onMouseLeave={handleMouseLeave}
            >
              {item.label}
            </button>
          </li>
        ))}
      </ul>
    </CollapsibleMenu>
  );

  // Listen for navigation events from other components
  useEffect(() => {
    if (typeof window === 'undefined') return;
    
    const handleNavigationChange = (event) => {
      const { item, navigationKey } = event.detail;
      
      // Update active item if one is provided
      if (item && setActiveItem) {
        console.log(`[listItems] Navigation change detected for ${item}, updating active item`);
        setActiveItem(item);
      }
    };
    
    window.addEventListener('navigationChange', handleNavigationChange);
    
    return () => {
      window.removeEventListener('navigationChange', handleNavigationChange);
    };
  }, [setActiveItem]);
  
  // Listen for drawer state changes to reset menu state when drawer closes
  useEffect(() => {
    if (typeof window === 'undefined') return;
    
    const handleDrawerStateChange = () => {
      // Close any open menus when drawer state changes
      if (isIconOnly) {
        setOpenMenu('');
        setHoveredItem(null);
      }
    };
    
    window.addEventListener('drawerStateChanged', handleDrawerStateChange);
    
    return () => {
      window.removeEventListener('drawerStateChanged', handleDrawerStateChange);
    };
  }, [isIconOnly]);

  // Filter menuItems before rendering
  const renderFilteredMenuItem = (item, index) => {
    return (
      <li
        key={index}
        className={`mb-2 ${isIconOnly ? '' : 'pr-3'}`}
      >
        <button
          className={`flex items-center w-full rounded-md text-left ${
            isIconOnly ? 'justify-center py-3 px-0' : 'px-4 py-2'
          } ${
            hoveredItem === item.label
              ? 'text-white bg-blue-600 hover:bg-blue-700'
              : 'text-gray-700 hover:bg-gray-100'
          } transition-colors duration-150`}
          onClick={(e) => {
            if (item.subItems) {
              handleMenuToggle(item.label);
            } else if (item.onClick) {
              item.onClick(e);
            }
          }}
          onMouseEnter={() => handleMouseEnter(item.label)}
          onMouseLeave={handleMouseLeave}
        >
          <span className={`${isIconOnly ? '' : 'mr-3'} flex items-center justify-center`}>
            {item.icon}
          </span>
          {!isIconOnly && (
            <span className="flex-1">{item.label}</span>
          )}
          {!isIconOnly && item.subItems && (
            <span className="ml-2">
              {openMenu === item.label ? (
                <NavIcons.ChevronUp className="w-4 h-4" />
              ) : (
                <NavIcons.ChevronDown className="w-4 h-4" />
              )}
            </span>
          )}
        </button>
        {item.subItems && renderSubMenu(item.subItems, item.label)}
      </li>
    );
  };

  return (
    <div className="relative">
      <div
        id="main-menu-container"
        className="w-full h-full overflow-x-hidden overflow-y-auto"
        style={{ borderRight: `${borderRightWidth} solid ${borderRightColor}` }}
      >
        <div
          ref={paperRef}
          className="w-full pt-4 bg-transparent"
          style={{ width: isIconOnly ? '60px' : MENU_WIDTH + 'px' }}
        >
          <nav className="w-full" aria-label="Main Navigation">
            <ul className="w-full space-y-0.5 px-3">
              {menuItems.map((item, index) => renderFilteredMenuItem(item, index))}
            </ul>
          </nav>
        </div>
      </div>
    </div>
  );
};

export default MainListItems;