'use client';
import React, { useState, useEffect, useCallback, useRef } from 'react';
import { Button, TextField } from '@/components/ui/TailwindComponents';
import { useAuth } from '@/context/AuthContext';
import { useNotification } from '@/context/NotificationContext';
import { extractTenantId } from '@/utils/tenantUtils';
import { logger } from '@/utils/logger';
import { employeeApi } from '@/utils/apiClient';
import api from '@/utils/api';
import UserMenuPrivileges from './UserMenuPrivileges';
import UserPagePrivileges from './UserPagePrivileges';

  // Cognito custom attributes schema for user management
  const cognitoCustomAttributes = {
    USERROLE: 'custom:userrole', // "Owner", "User"
    ACCESSIBLE_PAGES: 'custom:accessiblePages', // comma-separated list of page IDs
    CAN_MANAGE_USERS: 'custom:canManageUsers', // "true"/"false"
    MANAGABLE_PAGES: 'custom:managablePages' // comma-separated list of page IDs
  };

  // Define all available pages for user access permissions
  const ALL_PAGE_IDS = [
    'dashboard',
    'sales_orders', 'sales_customers', 'sales_quotes', 'sales_promotions',
    'inventory_products', 'inventory_categories', 'inventory_stock',
    'billing_invoices', 'billing_estimates', 'billing_payments', 'billing_subscriptions',
    'crm_contacts', 'crm_leads', 'crm_deals', 'crm_activities',
    'hr_employees', 'hr_attendance', 'hr_payroll',
    'reports_sales', 'reports_financial', 'reports_inventory',
    'settings_business', 'settings_users'
  ];

const SettingsManagement = () => {
  console.log('[SettingsManagement] Component rendering');
  const { user } = useAuth();
  const { notifySuccess, notifyError } = useNotification();
  const isMounted = useRef(true);
  
  // State for managing user list and form
  const [employees, setEmployees] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showAddUserForm, setShowAddUserForm] = useState(false);
  const [selectedUser, setSelectedUser] = useState(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  // New state for settings navigation
  const [activeSection, setActiveSection] = useState('userManagement');
  const [activeUserTab, setActiveUserTab] = useState('usersList');
  
  // Handler for selecting a user to edit
  const handleUserSelect = useCallback((userId) => {
    const user = employees.find(emp => emp.id === userId);
    setSelectedUser(user || null);
  }, [employees]);
  
  // Handler for editing a user
  const handleEditUser = useCallback((user) => {
    setSelectedUser(user);
    setActiveUserTab('userDetails');
  }, []);
  
  // Handler for changing user details
  const handleUserDetailChange = useCallback((field, value) => {
    setSelectedUser(prev => ({
      ...prev,
      [field]: value
    }));
  }, []);
  
  // Handler for changing managable pages selection
  const handleManagablePagesChange = useCallback((e) => {
    const selectedOptions = Array.from(e.target.selectedOptions).map(option => option.value);
    handleUserDetailChange('managablePages', selectedOptions);
  }, [handleUserDetailChange]);
  
  // Fetch employees (potential users)
  const fetchEmployees = useCallback(async () => {
    if (!isMounted.current) return;
    
    try {
      setLoading(true);
      const data = await employeeApi.getAll();
      
      if (isMounted.current) {
        setEmployees(data || []);
        setError(null);
      }
    } catch (err) {
      logger.error('[SettingsManagement] Error fetching employees:', err);
      if (isMounted.current) {
        setError('Failed to load employees');
      }
    } finally {
      if (isMounted.current) {
        setLoading(false);
      }
    }
  }, []);
  
  // Handler for saving user details
  const handleSaveUserDetails = useCallback(async () => {
    if (!selectedUser) return;
    
    try {
      setIsSubmitting(true);
      
      // Call API to update user
      await api.post('/users/api/update-user/', {
        user_id: selectedUser.id,
        first_name: selectedUser.first_name,
        last_name: selectedUser.last_name,
        role: selectedUser.role,
        canManageUsers: selectedUser.canManageUsers,
        managablePages: selectedUser.managablePages
      });
      
      notifySuccess('User updated successfully');
      fetchEmployees(); // Refresh the list
    } catch (error) {
      logger.error('[SettingsManagement] Error updating user:', error);
      notifyError(error.message || 'Failed to update user');
    } finally {
      setIsSubmitting(false);
    }
  }, [selectedUser, notifySuccess, notifyError, fetchEmployees]);
  
  // New user form state
  const [newUser, setNewUser] = useState({
    email: '',
    firstName: '',
    lastName: '',
    role: 'employee'
  });
  
  // Check if user has owner permissions
  const isOwner = useCallback(() => {
    if (!user || !user.attributes) return false;
    return user.attributes['custom:userrole'] === 'owner';
  }, [user]);
  
  // Fetch employees on mount
  useEffect(() => {
    fetchEmployees();
    
    return () => {
      isMounted.current = false;
    };
  }, [fetchEmployees]);
  
  // Handle form input changes
  const handleInputChange = useCallback((e) => {
    const { name, value } = e.target;
    setNewUser(prev => ({
      ...prev,
      [name]: value
    }));
  }, []);
  
  // Handle add user from form
  const handleAddUser = useCallback(async (e) => {
    e.preventDefault();
    
    if (!isOwner()) {
      notifyError('Only owners can add users');
      return;
    }
    
    try {
      setIsSubmitting(true);
      
      // Validate email
      if (!newUser.email) {
        notifyError('Email is required');
        setIsSubmitting(false);
        return;
      }
      
      const tenantId = extractTenantId();
      if (!tenantId) {
        notifyError('Tenant ID not found');
        setIsSubmitting(false);
        return;
      }
      
      // Send invitation to user
      await api.post('/api/hr/employees/invite', {
        email: newUser.email,
        firstName: newUser.firstName,
        lastName: newUser.lastName,
        role: newUser.role,
        companyName: process.env.NEXT_PUBLIC_COMPANY_NAME || 'Your Company Name'
      });
      
      notifySuccess(`Invitation sent to ${newUser.email}`);
      setNewUser({
        email: '',
        firstName: '',
        lastName: '',
        role: 'employee'
      });
      setShowAddUserForm(false);
      
      // Refresh employee list
      fetchEmployees();
      
    } catch (error) {
      logger.error('[SettingsManagement] Error adding user:', error);
      notifyError(error.message || 'Failed to add user');
    } finally {
      setIsSubmitting(false);
    }
  }, [newUser, isOwner, notifyError, notifySuccess, fetchEmployees]);
  
  // Handle adding an existing employee as a user
  const handleAddExistingEmployee = useCallback(async (employee) => {
    if (!isOwner()) {
      notifyError('Only owners can add users');
      return;
    }
    
    if (!employee || !employee.email) {
      notifyError('Invalid employee data');
      return;
    }
    
    try {
      setIsSubmitting(true);
      
      // Send invitation to the selected employee
      await api.post('/api/hr/employees/invite', {
        email: employee.email,
        firstName: employee.first_name,
        lastName: employee.last_name,
        role: 'employee',
        companyName: process.env.NEXT_PUBLIC_COMPANY_NAME || 'Your Company Name'
      });
      
      notifySuccess(`Invitation sent to ${employee.email}`);
      setSelectedUser(null);
      
    } catch (error) {
      logger.error('[SettingsManagement] Error adding existing employee as user:', error);
      notifyError(error.message || 'Failed to add user');
    } finally {
      setIsSubmitting(false);
    }
  }, [isOwner, notifyError, notifySuccess]);

  
  // Settings navigation items
  const navigationItems = [
    { id: 'companyProfile', label: 'Company Profile', icon: 'building' },
    { id: 'userManagement', label: 'User Management', icon: 'users' },
  ];

  // Render icon based on icon name
  const renderIcon = (iconName) => {
    switch (iconName) {
      case 'users':
        return (
          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z"></path>
          </svg>
        );
      case 'building':
        return (
          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
          </svg>
        );
      case 'credit-card':
        return (
          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z"></path>
          </svg>
        );
      case 'shield':
        return (
          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
          </svg>
        );
      case 'cash':
        return (
          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2zm7-5a2 2 0 11-4 0 2 2 0 014 0z"></path>
          </svg>
        );
      case 'puzzle':
        return (
          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M11 4a2 2 0 114 0v1a1 1 0 001 1h3a1 1 0 011 1v3a1 1 0 01-1 1h-1a2 2 0 100 4h1a1 1 0 011 1v3a1 1 0 01-1 1h-3a1 1 0 01-1-1v-1a2 2 0 10-4 0v1a1 1 0 01-1 1H7a1 1 0 01-1-1v-3a1 1 0 00-1-1H4a2 2 0 110-4h1a1 1 0 001-1V7a1 1 0 011-1h3a1 1 0 001-1V4z"></path>
          </svg>
        );
      case 'globe':
        return (
          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
        );
      case 'shield-check':
        return (
          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
          </svg>
        );
      default:
        return (
          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
          </svg>
        );
    }
  };

  // Render placeholder section
  const renderPlaceholderSection = (title, description) => (
    <div className="bg-white rounded-lg shadow-md p-6">
      <h3 className="text-xl font-semibold text-gray-800 mb-3">{title}</h3>
      <p className="text-gray-600 mb-5">{description}</p>
      <div className="bg-gray-100 border border-gray-200 rounded-lg p-6 flex items-center justify-center h-40">
        <p className="text-gray-500">This section is under development</p>
      </div>
    </div>
  );

  // Render the User Management section
  
  // Render the User Management section
  const renderUserManagement = () => {
    // User management tabs
    const userTabs = [
      { id: 'usersList', label: 'Users List', icon: 'users-list' },
      { id: 'userDetails', label: 'User Details', icon: 'user-details' },
      { id: 'accessLogs', label: 'Access Logs', icon: 'access-logs' }
    ];
    
    return (
      <div className="bg-white rounded-lg shadow-md overflow-hidden">
        <div className="p-6">
          <h2 className="text-2xl font-semibold text-gray-800 mb-6">User Management</h2>
          
          {/* Tabs navigation */}
          <div className="border-b border-gray-200 mb-6">
            <nav className="flex space-x-8">
              {userTabs.map(tab => (
                <button
                  key={tab.id}
                  onClick={() => setActiveUserTab(tab.id)}
                  className={`py-4 px-1 inline-flex items-center border-b-2 font-medium text-sm ${
                    activeUserTab === tab.id
                      ? 'border-blue-500 text-blue-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  {renderTabIcon(tab.icon)}
                  <span className="ml-2">{tab.label}</span>
                </button>
              ))}
            </nav>
          </div>
          
          {/* Tab content */}
          {activeUserTab === 'usersList' && (
            <div>
              {!isOwner() ? (
                <div className="bg-yellow-50 border-l-4 border-yellow-400 p-4 mb-6">
                  <p className="text-yellow-700">Only business owners can manage users.</p>
                </div>
              ) : (
                <>
                  <div className="mb-8">
                    <button
                      onClick={() => setShowAddUserForm(!showAddUserForm)}
                      className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 flex items-center"
                    >
                      <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                      </svg>
                      {showAddUserForm ? 'Cancel' : 'Add New User'}
                    </button>
                    
                    {showAddUserForm && (
                      <div className="mt-4 bg-gray-50 p-4 rounded-md border border-gray-200">
                        <h3 className="text-lg font-medium text-gray-800 mb-4">Add New User</h3>
                        <form onSubmit={handleAddUser} className="space-y-4">
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <TextField
                              label="First Name"
                              name="firstName"
                              value={newUser.firstName}
                              onChange={handleInputChange}
                              placeholder="Enter first name"
                            />
                            <TextField
                              label="Last Name"
                              name="lastName"
                              value={newUser.lastName}
                              onChange={handleInputChange}
                              placeholder="Enter last name"
                            />
                          </div>
                          <TextField
                            label="Email Address"
                            name="email"
                            type="email"
                            value={newUser.email}
                            onChange={handleInputChange}
                            placeholder="Enter email address"
                            required
                          />
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">
                              User Role
                            </label>
                            <select
                              name="role"
                              value={newUser.role}
                              onChange={handleInputChange}
                              className="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                            >
                              <option value="employee">User</option>
                              <option value="owner">Owner</option>
                            </select>
                            <p className="mt-1 text-sm text-gray-500">
                              Owners have full access to all features
                            </p>
                          </div>
                          <div className="flex justify-end">
                            <Button
                              type="submit"
                              disabled={isSubmitting}
                              color="primary"
                              className={`${isSubmitting ? 'opacity-75 cursor-not-allowed' : ''}`}
                            >
                              {isSubmitting ? (
                                <>
                                  <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                  </svg>
                                  Adding...
                                </>
                              ) : (
                                'Add User'
                              )}
                            </Button>
                          </div>
                        </form>
                      </div>
                    )}
                  </div>
                  
                  <div>
                    <h3 className="text-lg font-medium text-gray-800 mb-3">Users</h3>
                    {loading ? (
                      <div className="flex justify-center py-8">
                        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                      </div>
                    ) : error ? (
                      <div className="bg-red-50 border-l-4 border-red-400 p-4">
                        <p className="text-red-700">{error}</p>
                      </div>
                    ) : employees.length === 0 ? (
                      <div className="bg-gray-50 p-8 text-center rounded-md border border-gray-200">
                        <p className="text-gray-500">No users found.</p>
                      </div>
                    ) : (
                      <div className="bg-white rounded-md shadow overflow-hidden">
                        <table className="min-w-full divide-y divide-gray-200">
                          <thead className="bg-gray-50">
                            <tr>
                              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Name
                              </th>
                              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Email
                              </th>
                              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Role
                              </th>
                              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Status
                              </th>
                              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Actions
                              </th>
                            </tr>
                          </thead>
                          <tbody className="bg-white divide-y divide-gray-200">
                            {employees.map(employee => (
                              <tr key={employee.id}>
                                <td className="px-6 py-4 whitespace-nowrap">
                                  <div className="text-sm font-medium text-gray-900">
                                    {employee.first_name} {employee.last_name}
                                  </div>
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap">
                                  <div className="text-sm text-gray-500">
                                    {employee.email}
                                  </div>
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap">
                                  <div className="text-sm text-gray-500">
                                    {employee.role || 'User'}
                                  </div>
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap">
                                  <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                                    employee.is_active
                                      ? 'bg-green-100 text-green-800'
                                      : 'bg-gray-100 text-gray-800'
                                  }`}>
                                    {employee.is_active ? 'Active' : 'Inactive'}
                                  </span>
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                  <button
                                    onClick={() => handleEditUser(employee)}
                                    className="text-blue-600 hover:text-blue-900 mr-3"
                                  >
                                    Edit
                                  </button>
                                  <button
                                    onClick={() => handleAddExistingEmployee(employee)}
                                    className="text-blue-600 hover:text-blue-900 mr-3"
                                  >
                                    Permissions
                                  </button>
                                </td>
                              </tr>
                            ))}
                          </tbody>
                        </table>
                      </div>
                    )}
                  </div>
                </>
              )}
            </div>
          )}
          
          {activeUserTab === 'userDetails' && (
            <div>
              <h3 className="text-lg font-medium text-gray-800 mb-4">User Details</h3>
              
              <div className="bg-white rounded-md shadow-md p-6">
                <div className="mb-6">
                  <label className="block text-sm font-medium text-gray-700 mb-2">Select User</label>
                  <select
                    className="w-full border-gray-300 rounded-md shadow-sm focus:border-blue-500 focus:ring-blue-500"
                    onChange={(e) => handleUserSelect(e.target.value)}
                  >
                    <option value="">-- Select a user --</option>
                    {employees.map(employee => (
                      <option key={employee.id} value={employee.id}>
                        {employee.first_name} {employee.last_name} ({employee.email})
                      </option>
                    ))}
                  </select>
                </div>
                
                {selectedUser && (
                  <div className="space-y-6">
                    <div className="border-b border-gray-200 pb-4">
                      <h4 className="text-md font-semibold mb-4">Profile Information</h4>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <label className="block text-sm text-gray-700 mb-1">First Name</label>
                          <input 
                            type="text" 
                            className="w-full border-gray-300 rounded-md shadow-sm focus:border-blue-500 focus:ring-blue-500"
                            value={selectedUser.first_name || ''}
                            onChange={(e) => handleUserDetailChange('first_name', e.target.value)}
                          />
                        </div>
                        <div>
                          <label className="block text-sm text-gray-700 mb-1">Last Name</label>
                          <input 
                            type="text" 
                            className="w-full border-gray-300 rounded-md shadow-sm focus:border-blue-500 focus:ring-blue-500"
                            value={selectedUser.last_name || ''}
                            onChange={(e) => handleUserDetailChange('last_name', e.target.value)}
                          />
                        </div>
                        <div>
                          <label className="block text-sm text-gray-700 mb-1">Email</label>
                          <input 
                            type="email" 
                            className="w-full border-gray-300 rounded-md shadow-sm focus:border-blue-500 focus:ring-blue-500"
                            value={selectedUser.email || ''}
                            readOnly
                          />
                        </div>
                        <div>
                          <label className="block text-sm text-gray-700 mb-1">Role</label>
                          <select 
                            className="w-full border-gray-300 rounded-md shadow-sm focus:border-blue-500 focus:ring-blue-500"
                            value={selectedUser.role || 'User'}
                            onChange={(e) => handleUserDetailChange('role', e.target.value)}
                          >
                            <option value="User">User</option>
                            <option value="Owner">Owner</option>
                          </select>
                        </div>
                      </div>
                    </div>
                    
                    <div className="border-b border-gray-200 pb-4">
                      <h4 className="text-md font-semibold mb-4">Page Access</h4>
                      <UserPagePrivileges userId={selectedUser.id} />
                    </div>
                    
                    <div className="border-b border-gray-200 pb-4">
                      <h4 className="text-md font-semibold mb-4">Management Permissions</h4>
                      <div>
                        <div className="flex items-center mb-4">
                          <input
                            type="checkbox"
                            id="can-manage-users"
                            className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                            checked={selectedUser.canManageUsers || false}
                            onChange={(e) => handleUserDetailChange('canManageUsers', e.target.checked)}
                          />
                          <label htmlFor="can-manage-users" className="ml-2 block text-sm text-gray-700">
                            Can manage users
                          </label>
                        </div>
                        
                        <div className="mb-4">
                          <label className="block text-sm text-gray-700 mb-2">
                            Pages this user can grant access to:
                          </label>
                          <select
                            multiple
                            className="w-full h-32 border-gray-300 rounded-md shadow-sm focus:border-blue-500 focus:ring-blue-500"
                            value={selectedUser.managablePages || []}
                            onChange={(e) => handleManagablePagesChange(e)}
                          >
                            {ALL_PAGE_IDS.map(pageId => (
                              <option key={pageId} value={pageId}>
                                {pageId.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}
                              </option>
                            ))}
                          </select>
                          <p className="text-xs text-gray-500 mt-1">Hold Ctrl/Cmd to select multiple pages</p>
                        </div>
                      </div>
                    </div>
                    
                    <div className="flex justify-end">
                      <Button
                        onClick={handleSaveUserDetails}
                        disabled={isSubmitting}
                        color="primary"
                      >
                        {isSubmitting ? 'Saving...' : 'Save Changes'}
                      </Button>
                    </div>
                  </div>
                )}
              </div>
            </div>
          )}
          
          {activeUserTab === 'accessLogs' && (
            <div>
              <h3 className="text-lg font-medium text-gray-800 mb-4">Access Logs</h3>
              <p className="text-gray-500 italic mb-4">Track when user permissions were modified</p>
              
              <div className="bg-gray-50 p-8 text-center rounded-md border border-gray-200">
                <p className="text-gray-500">Access logs will be available in a future update.</p>
              </div>
            </div>
          )}
        </div>
      </div>
    );
  };
  
  // Helper function to render tab icons
  const renderTabIcon = (iconName) => {
    switch (iconName) {
      case 'users-list':
        return (
          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z"></path>
          </svg>
        );
      case 'user-details':
        return (
          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5.121 17.804A13.937 13.937 0 0112 16c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0zm6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
        );
      case 'access-logs':
        return (
          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
        );
      default:
        return (
          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
        );
    }
  };


  // Render the active section content
  const renderActiveSection = () => {
    switch (activeSection) {
      case 'userManagement':
        return renderUserManagement();
      case 'companyProfile':
        return renderPlaceholderSection('Company Profile', 'Manage your business information, addresses, and legal details.');
      case 'payment':
        return renderPlaceholderSection('Payment Settings', 'Configure payment methods, billing preferences, and subscription details.');
      case 'securityCompliance':
        return renderPlaceholderSection('Security & Compliance', 'Manage security settings, compliance requirements, and data protection policies.');
      case 'payrollConfig':
        return renderPlaceholderSection('Payroll Configuration', 'Configure payroll settings, tax information, and payment schedules.');
      case 'integrationSettings':
        return renderPlaceholderSection('Integration Settings', 'Manage connections with third-party services and API configurations.');
      case 'regionalSettings':
        return renderPlaceholderSection('Regional Settings', 'Configure language, currency, time zones, and other region-specific settings.');
      default:
        return renderUserManagement();
    }
  };

  return (
    <div className="flex flex-col md:flex-row space-y-6 md:space-y-0 md:space-x-6">
      {/* Settings Navigation Sidebar */}
      <div className="w-full md:w-64 bg-white rounded-lg shadow-md overflow-hidden flex-shrink-0">
        <div className="px-4 py-5 bg-gray-50 border-b border-gray-200">
          <h3 className="text-lg font-medium text-gray-800">Settings</h3>
        </div>
        <nav className="p-2">
          <ul className="space-y-1">
            {navigationItems.map((item) => (
              <li key={item.id}>
                <button
                  onClick={() => setActiveSection(item.id)}
                  className={`w-full flex items-center px-3 py-2 text-sm font-medium rounded-md transition-colors ${
                    activeSection === item.id
                      ? 'bg-blue-50 text-blue-700'
                      : 'text-gray-700 hover:bg-gray-100'
                  }`}
                >
                  <span className="mr-3">{renderIcon(item.icon)}</span>
                  {item.label}
                </button>
              </li>
            ))}
          </ul>
        </nav>
      </div>

      {/* Main Content Area */}
      <div className="flex-grow">
        {renderActiveSection()}
      </div>
    </div>
  );
};

export default SettingsManagement; 