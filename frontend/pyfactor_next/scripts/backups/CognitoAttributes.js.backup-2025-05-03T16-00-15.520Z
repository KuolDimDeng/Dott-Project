/**
 * CognitoAttributes.js
 * 
 * A utility module for standardized access to Cognito user attributes.
 * This ensures consistent naming, validation, and usage of attributes
 * throughout the application.
 * 
 * IMPORTANT: Always use this module when accessing Cognito attributes
 * to prevent casing and naming inconsistencies.
 */

/**
 * Standard Cognito attribute names with correct casing
 */
export const StandardAttributes = {
  SUB: 'sub',
  EMAIL: 'email',
  GIVEN_NAME: 'given_name',
  FAMILY_NAME: 'family_name',
};

/**
 * Custom Cognito attribute names with correct casing
 */
export const CustomAttributes = {
  ACCOUNT_STATUS: 'custom:acctstatus',
  ATTR_VERSION: 'custom:attrversion',
  BUSINESS_COUNTRY: 'custom:businesscountry',
  BUSINESS_ID: 'custom:businessid',
  BUSINESS_NAME: 'custom:businessname',
  BUSINESS_STATE: 'custom:businessstate',
  BUSINESS_SUBTYPES: 'custom:businesssubtypes',
  BUSINESS_TYPE: 'custom:businesstype',
  CREATED_AT: 'custom:created_at',
  CURRENCY: 'custom:currency',
  DATE_FORMAT: 'custom:dateformat',
  DATE_FOUNDED: 'custom:datefounded',
  EMPLOYEE_ID: 'custom:employeeid',
  LANGUAGE: 'custom:language',
  LAST_LOGIN: 'custom:lastlogin',
  LEGAL_STRUCTURE: 'custom:legalstructure',
  ONBOARDING: 'custom:onboarding',
  PAYMENT_ID: 'custom:paymentid',
  PAYMENT_METHOD: 'custom:paymentmethod',
  PAYMENT_VERIFIED: 'custom:payverified',
  PREFERENCES: 'custom:preferences',
  REQUIRES_PAYMENT: 'custom:requirespayment',
  SETUP_DONE: 'custom:setupdone',
  SUBSCRIPTION_PLAN: 'custom:subplan',
  SUBSCRIPTION_INTERVAL: 'custom:subscriptioninterval',
  SUBSCRIPTION_STATUS: 'custom:subscriptionstatus',
  TENANT_ID: 'custom:tenant_ID', // Note the uppercase ID
  TIMEZONE: 'custom:timezone',
  UPDATED_AT: 'custom:updated_at',
  USER_ROLE: 'custom:userrole',
};

/**
 * Validation rules for Cognito attributes
 */
export const ValidationRules = {
  [StandardAttributes.SUB]: { required: true, mutable: false },
  [StandardAttributes.EMAIL]: { required: true, mutable: true, minLength: 5, maxLength: 254 },
  [StandardAttributes.GIVEN_NAME]: { required: false, mutable: true, minLength: 1, maxLength: 256 },
  [StandardAttributes.FAMILY_NAME]: { required: false, mutable: true, minLength: 1, maxLength: 256 },
  
  [CustomAttributes.ACCOUNT_STATUS]: { required: false, mutable: true, minLength: 6, maxLength: 9 },
  [CustomAttributes.ATTR_VERSION]: { required: false, mutable: true, minLength: 5, maxLength: 10 },
  [CustomAttributes.BUSINESS_COUNTRY]: { required: false, mutable: true, minLength: 2, maxLength: 3 },
  [CustomAttributes.BUSINESS_ID]: { required: false, mutable: true, minLength: 36, maxLength: 36 },
  [CustomAttributes.BUSINESS_NAME]: { required: false, mutable: true, minLength: 1, maxLength: 256 },
  [CustomAttributes.BUSINESS_STATE]: { required: false, mutable: true, minLength: 1, maxLength: 256 },
  [CustomAttributes.BUSINESS_SUBTYPES]: { required: false, mutable: true, minLength: 1, maxLength: 2048 },
  [CustomAttributes.BUSINESS_TYPE]: { required: false, mutable: true, minLength: 1, maxLength: 256 },
  [CustomAttributes.CREATED_AT]: { required: false, mutable: true, minLength: 1, maxLength: 24 },
  [CustomAttributes.CURRENCY]: { required: false, mutable: true, minLength: 0, maxLength: 5 },
  [CustomAttributes.DATE_FORMAT]: { required: false, mutable: true, minLength: 1, maxLength: 20 },
  [CustomAttributes.DATE_FOUNDED]: { required: false, mutable: true, minLength: 1, maxLength: 10 },
  [CustomAttributes.EMPLOYEE_ID]: { required: false, mutable: true, minLength: 3, maxLength: 15 },
  [CustomAttributes.LANGUAGE]: { required: false, mutable: true, minLength: 0, maxLength: 10 },
  [CustomAttributes.LAST_LOGIN]: { required: false, mutable: true, minLength: 24, maxLength: 24 },
  [CustomAttributes.LEGAL_STRUCTURE]: { required: false, mutable: true, minLength: 1, maxLength: 256 },
  [CustomAttributes.ONBOARDING]: { required: false, mutable: true, minLength: 1, maxLength: 256 },
  [CustomAttributes.PAYMENT_ID]: { required: false, mutable: true, minLength: 1, maxLength: 256 },
  [CustomAttributes.PAYMENT_METHOD]: { required: false, mutable: true, minLength: 0, maxLength: 128 },
  [CustomAttributes.PAYMENT_VERIFIED]: { required: false, mutable: true, minLength: 4, maxLength: 5 },
  [CustomAttributes.PREFERENCES]: { required: false, mutable: true, minLength: 2, maxLength: 2048 },
  [CustomAttributes.REQUIRES_PAYMENT]: { required: false, mutable: true, minLength: 1, maxLength: 10 },
  [CustomAttributes.SETUP_DONE]: { required: false, mutable: true, minLength: 4, maxLength: 5 },
  [CustomAttributes.SUBSCRIPTION_PLAN]: { required: false, mutable: true, minLength: 4, maxLength: 12 },
  [CustomAttributes.SUBSCRIPTION_INTERVAL]: { required: false, mutable: true, minLength: 6, maxLength: 7 },
  [CustomAttributes.SUBSCRIPTION_STATUS]: { required: false, mutable: true, minLength: 6, maxLength: 10 },
  [CustomAttributes.TENANT_ID]: { required: false, mutable: true, minLength: 0, maxLength: 36 },
  [CustomAttributes.TIMEZONE]: { required: false, mutable: true, minLength: 1, maxLength: 35 },
  [CustomAttributes.UPDATED_AT]: { required: false, mutable: true, minLength: 1, maxLength: 24 },
  [CustomAttributes.USER_ROLE]: { required: false, mutable: true, minLength: 4, maxLength: 6 },
};

/**
 * Combined dictionary of all attribute names for easy access
 */
export const AttributeNames = {
  ...StandardAttributes,
  ...CustomAttributes,
};

/**
 * Main utility class for Cognito attribute operations
 */
const CognitoAttributes = {
  // All attribute names
  ...AttributeNames,
  
  /**
   * Safely gets an attribute value with the correct casing
   * 
   * @param {Object} attributes - User attributes object from Cognito
   * @param {String} attributeName - Attribute name to retrieve
   * @param {*} defaultValue - Optional default value if attribute is not found
   * @returns {*} The attribute value or default value
   */
  getValue(attributes, attributeName, defaultValue = null) {
    if (!attributes) return defaultValue;
    return attributes[attributeName] !== undefined ? attributes[attributeName] : defaultValue;
  },
  
  /**
   * Validate an attribute value against the defined rules
   * 
   * @param {String} attributeName - Name of the attribute to validate
   * @param {String} value - Value to validate
   * @returns {Object} Validation result { valid: boolean, errors: string[] }
   */
  validateAttribute(attributeName, value) {
    const rules = ValidationRules[attributeName];
    const errors = [];
    
    if (!rules) {
      return { valid: false, errors: [`Unknown attribute: ${attributeName}`] };
    }
    
    // Check required
    if (rules.required && (value === undefined || value === null || value === '')) {
      errors.push(`${attributeName} is required`);
    }
    
    // Skip other validations if value is not provided and not required
    if (!rules.required && (value === undefined || value === null || value === '')) {
      return { valid: true, errors: [] };
    }
    
    // Check string length
    if (typeof value === 'string' && rules.minLength !== undefined) {
      if (value.length < rules.minLength) {
        errors.push(`${attributeName} must be at least ${rules.minLength} characters`);
      }
    }
    
    if (typeof value === 'string' && rules.maxLength !== undefined) {
      if (value.length > rules.maxLength) {
        errors.push(`${attributeName} cannot exceed ${rules.maxLength} characters`);
      }
    }
    
    return {
      valid: errors.length === 0,
      errors,
    };
  },
  
  /**
   * Validate multiple attributes at once
   * 
   * @param {Object} attributes - Object containing attribute names and values
   * @returns {Object} Validation result { valid: boolean, errors: Object }
   */
  validateAttributes(attributes) {
    const results = {};
    let isValid = true;
    
    for (const [name, value] of Object.entries(attributes)) {
      const result = this.validateAttribute(name, value);
      results[name] = result;
      
      if (!result.valid) {
        isValid = false;
      }
    }
    
    return {
      valid: isValid,
      results,
    };
  },
  
  /**
   * Generate user initials from attributes
   * 
   * @param {Object} attributes - User attributes object
   * @returns {String} User initials (2 characters)
   */
  getUserInitials(attributes) {
    // Only use documented attribute names and always trim whitespace
    const firstName = this.getValue(attributes, this.GIVEN_NAME, '').trim();
    const lastName = this.getValue(attributes, this.FAMILY_NAME, '').trim();
    if (firstName && lastName) {
      return `${firstName.charAt(0).toUpperCase()}${lastName.charAt(0).toUpperCase()}`;
    }
    if (firstName) {
      return firstName.charAt(0).toUpperCase();
    }
    if (lastName) {
      return lastName.charAt(0).toUpperCase();
    }
    const email = this.getValue(attributes, this.EMAIL, '').trim();
    if (email && email.includes('@')) {
      const namePart = email.split('@')[0];
      return namePart.charAt(0).toUpperCase();
    }
    return 'U'; // Default fallback
  },
  
  /**
   * Get tenant ID with correct casing
   * 
   * @param {Object} attributes - User attributes object
   * @returns {String|null} The tenant ID or null if not found
   */
  getTenantId(attributes) {
    return this.getValue(attributes, this.TENANT_ID);
  },
  
  /**
   * Get business name
   * 
   * @param {Object} attributes - User attributes object
   * @returns {String|null} The business name or null if not found
   */
  getBusinessName(attributes) {
    return this.getValue(attributes, this.BUSINESS_NAME);
  },
  
  /**
   * Get user role
   * 
   * @param {Object} attributes - User attributes object
   * @returns {String|null} The user role or null if not found
   */
  getUserRole(attributes) {
    return this.getValue(attributes, this.USER_ROLE);
  },
  
  /**
   * Check if the user is an admin
   * 
   * @param {Object} attributes - User attributes object
   * @returns {Boolean} True if the user is an admin
   */
  isAdmin(attributes) {
    const role = this.getUserRole(attributes);
    return role === 'admin';
  },
  
  /**
   * Create an update object for updating Cognito attributes
   * 
   * @param {Object} updates - Object containing attribute names and values to update
   * @returns {Object} Object formatted for Cognito update call
   */
  createUpdateObject(updates) {
    const updateObject = {};
    
    for (const [name, value] of Object.entries(updates)) {
      updateObject[name] = value !== null ? String(value) : '';
    }
    
    return updateObject;
  }
};

export default CognitoAttributes; 