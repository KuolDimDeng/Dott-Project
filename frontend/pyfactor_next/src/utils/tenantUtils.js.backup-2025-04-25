/**
 * Tenant Utilities
 * Handles tenant-related operations and storage
 */

import { getCurrentUser } from 'aws-amplify/auth';
import { fetchAuthSession } from 'aws-amplify/auth';
import { Cache as cache } from '@aws-amplify/core';

// Constants
const TENANT_ID_KEY = 'tenantId';
const TENANT_INFO_KEY = 'tenantInfo';
const TENANT_SETTINGS_KEY = 'tenantSettings';
const TENANT_CACHE_PREFIX = 'tenant_';

/**
 * Get the current tenant ID
 * @returns {Promise<string>} The tenant ID
 */
export const getTenantId = async () => {
  try {
    // Try to get from cache first
    const cachedTenantId = await cache.getItem(TENANT_ID_KEY);
    if (cachedTenantId) {
      return cachedTenantId;
    }

    // If not in cache, get from user attributes
    const user = await getCurrentUser();
    const session = await fetchAuthSession();
    const tenantId = user?.attributes?.['custom:tenantId'] || session?.accessToken?.payload?.['custom:tenantId'];

    if (!tenantId) {
      throw new Error('Tenant ID not found in user attributes or session');
    }

    // Cache the tenant ID
    await cache.setItem(TENANT_ID_KEY, tenantId);
    return tenantId;
  } catch (error) {
    console.error('Error getting tenant ID:', error);
    throw error;
  }
};

/**
 * Validate UUID format
 * @param {string} uuid - The UUID to validate
 * @returns {boolean} Whether the UUID is valid
 */
export const isValidUUID = (uuid) => {
  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
  return uuidRegex.test(uuid);
};

/**
 * Get tenant-specific cache key
 * @param {string} key - The base key
 * @returns {Promise<string>} The tenant-specific cache key
 */
export const getTenantCacheKey = async (key) => {
  const tenantId = await getTenantId();
  return `${TENANT_CACHE_PREFIX}${tenantId}_${key}`;
};

/**
 * Get tenant information
 * @returns {Promise<Object>} The tenant information
 */
export const getTenantInfo = async () => {
  try {
    const cacheKey = await getTenantCacheKey(TENANT_INFO_KEY);
    const cachedInfo = await cache.getItem(cacheKey);
    if (cachedInfo) {
      return cachedInfo;
    }

    // If not in cache, fetch from API
    const tenantId = await getTenantId();
    const response = await fetch(`/api/tenants/${tenantId}`);
    if (!response.ok) {
      throw new Error('Failed to fetch tenant info');
    }

    const tenantInfo = await response.json();
    await cache.setItem(cacheKey, tenantInfo);
    return tenantInfo;
  } catch (error) {
    console.error('Error getting tenant info:', error);
    throw error;
  }
};

/**
 * Get tenant settings
 * @returns {Promise<Object>} The tenant settings
 */
export const getTenantSettings = async () => {
  try {
    const cacheKey = await getTenantCacheKey(TENANT_SETTINGS_KEY);
    const cachedSettings = await cache.getItem(cacheKey);
    if (cachedSettings) {
      return cachedSettings;
    }

    // If not in cache, fetch from API
    const tenantId = await getTenantId();
    const response = await fetch(`/api/tenants/${tenantId}/settings`);
    if (!response.ok) {
      throw new Error('Failed to fetch tenant settings');
    }

    const settings = await response.json();
    await cache.setItem(cacheKey, settings);
    return settings;
  } catch (error) {
    console.error('Error getting tenant settings:', error);
    throw error;
  }
};

/**
 * Clear tenant cache
 * @returns {Promise<void>}
 */
export const clearTenantCache = async () => {
  try {
    const tenantId = await getTenantId();
    const keys = await cache.keys();
    const tenantKeys = keys.filter(key => key.startsWith(`${TENANT_CACHE_PREFIX}${tenantId}_`));
    await Promise.all(tenantKeys.map(key => cache.removeItem(key)));
  } catch (error) {
    console.error('Error clearing tenant cache:', error);
    throw error;
  }
};

/**
 * Check if user has access to tenant
 * @param {string} tenantId - The tenant ID to check
 * @returns {Promise<boolean>} Whether the user has access
 */
export const hasTenantAccess = async (tenantId) => {
  try {
    const userTenantId = await getTenantId();
    return userTenantId === tenantId;
  } catch (error) {
    console.error('Error checking tenant access:', error);
    return false;
  }
};

/**
 * Store tenant ID in cache
 * @param {string} tenantId - The tenant ID to store
 * @returns {Promise<void>}
 */
export const storeTenantId = async (tenantId) => {
  try {
    await cache.setItem(TENANT_ID_KEY, tenantId);
  } catch (error) {
    console.error('Error storing tenant ID:', error);
    throw error;
  }
};

/**
 * Fix onboarding status case
 * @param {string} status - The status to fix
 * @returns {string} The fixed status
 */
export const fixOnboardingStatusCase = (status) => {
  if (!status) return status;
  return status.charAt(0).toUpperCase() + status.slice(1).toLowerCase();
};

/**
 * Update tenant ID in Cognito
 * @param {string} tenantId - The new tenant ID
 * @returns {Promise<void>}
 */
export const updateTenantIdInCognito = async (tenantId) => {
  try {
    const user = await getCurrentUser();
    await user.updateUserAttributes({
      'custom:tenantId': tenantId
    });
    await storeTenantId(tenantId);
  } catch (error) {
    console.error('Error updating tenant ID in Cognito:', error);
    throw error;
  }
};

/**
 * Set authentication tokens
 * @param {Object} tokens - The tokens to set
 * @returns {Promise<void>}
 */
export const setTokens = async (tokens) => {
  try {
    await cache.setItem('auth_tokens', tokens);
  } catch (error) {
    console.error('Error setting tokens:', error);
    throw error;
  }
};

/**
 * Force validate tenant ID
 * @param {string} tenantId - The tenant ID to validate
 * @returns {Promise<boolean>} Whether the tenant ID is valid
 */
export const forceValidateTenantId = async (tenantId) => {
  try {
    if (!isValidUUID(tenantId)) {
      return false;
    }
    const response = await fetch(`/api/tenants/${tenantId}/validate`);
    return response.ok;
  } catch (error) {
    console.error('Error validating tenant ID:', error);
    return false;
  }
};

/**
 * Generate deterministic tenant ID
 * @param {string} input - The input to generate from
 * @returns {string} The generated tenant ID
 */
export const generateDeterministicTenantId = (input) => {
  // Simple hash function
  let hash = 0;
  for (let i = 0; i < input.length; i++) {
    const char = input.charCodeAt(i);
    hash = ((hash << 5) - hash) + char;
    hash = hash & hash;
  }
  // Convert to UUID v4 format
  return `00000000-0000-4000-a000-${Math.abs(hash).toString(16).padStart(12, '0')}`;
};
