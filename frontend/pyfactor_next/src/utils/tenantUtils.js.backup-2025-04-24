'use client';

import { usePathname, useParams, useSearchParams } from 'next/navigation';
import { logger } from './logger';
import { updateUserAttributes, fetchUserAttributes, getCurrentUser } from 'aws-amplify/auth';
import { setCacheValue, getCacheValue, removeCacheValue } from '@/utils/appCache';
import { saveUserPreference, PREF_KEYS } from '@/utils/userPreferences';
import { v4 as uuidv4, v5 as uuidv5 } from 'uuid';
import { resilientUpdateUserAttributes, resilientFetchUserAttributes } from '@/utils/amplifyResiliency';

// Initialize AppCache if not already done
if (typeof window !== 'undefined' && !window.__APP_CACHE) {
  window.__APP_CACHE = {
    auth: { provider: 'cognito', initialized: true },
    user: {},
    tenant: {},
    tenants: {}
  };
  console.log('[TenantUtils] AppCache initialized');
}

/**
 * Custom hook to get the tenant ID from various sources
 * @returns {Promise<string|null>} The tenant ID or null if not found
 */
export function useTenantId() {
  const pathname = usePathname();
  const params = useParams();
  const searchParams = useSearchParams();
  
  // First check route parameters from dynamic routes
  let tenantId = params?.tenantId || null;
  
  // If not in route params, try to extract from pathname
  if (!tenantId && pathname) {
    const match = pathname.match(/^\/([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})(\/|$)/i);
    if (match) {
      tenantId = match[1];
    }
  }
  
  // If still not found, check query parameters
  if (!tenantId) {
    tenantId = searchParams?.get('tenantId') || null;
  }
  
  return tenantId;
}

// ... Keep all existing functions but remove duplicates ...

// Add a method to handle network errors with retry logic
export const handleNetworkError = async (operation, maxRetries = 3) => {
  let retryCount = 0;
  let lastError = null;
  
  const exponentialBackoff = (attempt) => {
    const delay = Math.min(100 * Math.pow(2, attempt), 10000); // Cap at 10 seconds
    const jitter = Math.random() * 300; // Add up to 300ms of jitter
    return delay + jitter;
  };
  
  const executeWithRetry = async () => {
    while (retryCount < maxRetries) {
      try {
        return await operation();
      } catch (error) {
        lastError = error;
        retryCount++;
        
        // Log the retry attempt
        console.warn(`[TenantUtils] Operation failed (attempt ${retryCount}/${maxRetries}):`, 
          error.message || error);
        
        // If we've hit max retries, throw the last error
        if (retryCount >= maxRetries) {
          throw error;
        }
        
        // Wait with exponential backoff before retrying
        const backoffTime = exponentialBackoff(retryCount);
        console.log(`[TenantUtils] Retrying in ${Math.round(backoffTime)}ms...`);
        await new Promise(resolve => setTimeout(resolve, backoffTime));
      }
    }
    
    // This should never be reached due to the throw above
    throw lastError || new Error('Maximum retries exceeded');
  };
  
  try {
    return await executeWithRetry();
  } catch (finalError) {
    // Create a fallback response as a last resort
    console.error("[TenantUtils] All retries failed:", finalError);
    
    return {
      success: false,
      error: finalError.message || 'Operation failed after multiple retries',
      retries: retryCount,
      fallback: true
    };
  }
};

// Apply this to the tenant fetching function
export const getTenantFromCognito = async () => {
  try {
    const userAttributes = await handleNetworkError(async () => {
      return await fetchUserAttributes();
    });
    
    let tenantId = userAttributes['custom:businessid'];
    
    // Log tenant ID found in Cognito with different log level based on presence
    if (tenantId) {
      logger.info('[TenantUtils] Found tenant ID in Cognito:', tenantId);
    } else {
      logger.debug('[TenantUtils] No tenant ID found in Cognito attributes');
    }
    
    return tenantId || null;
  } catch (error) {
    logger.error('[TenantUtils] Error getting user attributes from Cognito:', error);
    return null;
  }
}; 