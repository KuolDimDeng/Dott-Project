/**\n * Version0009_fix_signin_redirect_debug.js\n * \n * Debug script to help identify why sign-in redirect isn't working\n * after successful authentication. This script adds enhanced logging\n * and monitoring to the sign-in process.\n * \n * Version: 1.0\n * Date: 2025-01-27\n * Dependencies: None\n */\n\n(function() {\n  'use strict';\n  \n  // Prevent multiple initialization\n  if (window.__SIGNIN_REDIRECT_DEBUG_APPLIED) {\n    console.log('[SignInRedirectDebug] Already applied');\n    return;\n  }\n  \n  const log = (level, message, data) => {\n    const timestamp = new Date().toISOString();\n    const logMessage = `[SignInRedirectDebug] ${timestamp} ${message}`;\n    \n    if (data) {\n      console[level](logMessage, data);\n    } else {\n      console[level](logMessage);\n    }\n  };\n  \n  log('info', 'Initializing sign-in redirect debug system');\n  \n  // Monitor form submissions\n  function monitorFormSubmissions() {\n    const forms = document.querySelectorAll('form');\n    \n    forms.forEach((form, index) => {\n      if (form.dataset.debugAdded) return;\n      form.dataset.debugAdded = 'true';\n      \n      log('info', `Monitoring form ${index}`);\n      \n      form.addEventListener('submit', function(e) {\n        log('info', 'Form submission detected', {\n          formIndex: index,\n          action: form.action,\n          method: form.method,\n          inputs: Array.from(form.querySelectorAll('input')).map(input => ({\n            name: input.name,\n            type: input.type,\n            hasValue: !!input.value\n          }))\n        });\n      });\n    });\n  }\n  \n  // Monitor router navigation\n  function monitorRouterPush() {\n    // Try to find Next.js router\n    if (typeof window !== 'undefined') {\n      // Monitor window location changes\n      const originalPushState = window.history.pushState;\n      const originalReplaceState = window.history.replaceState;\n      \n      window.history.pushState = function(...args) {\n        log('info', 'Navigation detected (pushState)', {\n          url: args[2],\n          state: args[0]\n        });\n        return originalPushState.apply(this, args);\n      };\n      \n      window.history.replaceState = function(...args) {\n        log('info', 'Navigation detected (replaceState)', {\n          url: args[2],\n          state: args[0]\n        });\n        return originalReplaceState.apply(this, args);\n      };\n    }\n  }\n  \n  // Monitor authentication state changes\n  function monitorAuthState() {\n    // Monitor localStorage changes\n    const originalSetItem = localStorage.setItem;\n    localStorage.setItem = function(key, value) {\n      if (key.includes('auth') || key.includes('tenant') || key.includes('token')) {\n        log('info', 'Auth-related localStorage update', {\n          key,\n          hasValue: !!value,\n          valueLength: value ? value.length : 0\n        });\n      }\n      return originalSetItem.apply(this, arguments);\n    };\n    \n    // Monitor AppCache changes\n    if (window.__APP_CACHE) {\n      const originalCache = window.__APP_CACHE;\n      \n      // Create a proxy to monitor changes\n      window.__APP_CACHE = new Proxy(originalCache, {\n        set(target, property, value) {\n          if (property.toString().includes('auth') || property.toString().includes('tenant')) {\n            log('info', 'AppCache auth-related update', {\n              property: property.toString(),\n              hasValue: !!value,\n              type: typeof value\n            });\n          }\n          target[property] = value;\n          return true;\n        }\n      });\n    }\n  }\n  \n  // Monitor Amplify sign-in calls\n  function monitorAmplifySignIn() {\n    // Try to intercept Amplify signIn calls\n    if (window.amplifySignIn) {\n      const originalSignIn = window.amplifySignIn;\n      \n      window.amplifySignIn = async function(...args) {\n        log('info', 'Amplify signIn called', {\n          hasCredentials: !!(args[0] && args[0].username),\n          options: args[0] ? Object.keys(args[0]) : []\n        });\n        \n        try {\n          const result = await originalSignIn.apply(this, args);\n          log('info', 'Amplify signIn result', {\n            isSignedIn: result.isSignedIn,\n            hasNextStep: !!result.nextStep,\n            nextStepType: result.nextStep ? result.nextStep.signInStep : 'none'\n          });\n          return result;\n        } catch (error) {\n          log('error', 'Amplify signIn error', {\n            code: error.code,\n            message: error.message,\n            name: error.name\n          });\n          throw error;\n        }\n      };\n    }\n  }\n  \n  // Monitor console errors\n  function monitorConsoleErrors() {\n    const originalError = console.error;\n    console.error = function(...args) {\n      // Check if this is a sign-in related error\n      const errorMessage = args.join(' ');\n      if (errorMessage.includes('SignInForm') || \n          errorMessage.includes('auth') || \n          errorMessage.includes('redirect') ||\n          errorMessage.includes('router')) {\n        log('error', 'Sign-in related error detected', {\n          error: errorMessage,\n          stack: new Error().stack\n        });\n      }\n      return originalError.apply(this, args);\n    };\n  }\n  \n  // Check current authentication state\n  function checkCurrentAuthState() {\n    log('info', 'Current authentication state', {\n      pathname: window.location.pathname,\n      search: window.location.search,\n      appCacheExists: !!window.__APP_CACHE,\n      authSession: localStorage.getItem('auth_had_session'),\n      lastAuthTime: localStorage.getItem('auth_last_time'),\n      tenantId: localStorage.getItem('tenantId') || localStorage.getItem('tenant_id'),\n      hasAmplifySignIn: typeof window.amplifySignIn === 'function'\n    });\n  }\n  \n  // Add debug helper function\n  window.__DEBUG_SIGNIN_REDIRECT = function() {\n    return {\n      currentLocation: window.location.href,\n      authSessionFlag: localStorage.getItem('auth_had_session'),\n      tenantId: localStorage.getItem('tenantId') || localStorage.getItem('tenant_id'),\n      appCache: window.__APP_CACHE,\n      hasAmplifySignIn: typeof window.amplifySignIn === 'function',\n      formElements: document.querySelectorAll('form').length,\n      signinLogs: console.memory // This will show recent console activity\n    };\n  };\n  \n  // Initialize all monitoring\n  function initialize() {\n    try {\n      log('info', 'Setting up debug monitoring');\n      \n      checkCurrentAuthState();\n      monitorFormSubmissions();\n      monitorRouterPush();\n      monitorAuthState();\n      monitorAmplifySignIn();\n      monitorConsoleErrors();\n      \n      // Re-monitor forms periodically in case they're dynamically created\n      setInterval(monitorFormSubmissions, 2000);\n      \n      // Mark as applied\n      window.__SIGNIN_REDIRECT_DEBUG_APPLIED = true;\n      \n      log('info', 'Sign-in redirect debug system initialized successfully');\n      log('info', 'Run window.__DEBUG_SIGNIN_REDIRECT() to get current state');\n      \n    } catch (error) {\n      log('error', 'Error initializing debug system', error);\n    }\n  }\n  \n  // Initialize when DOM is ready\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initialize);\n  } else {\n    initialize();\n  }\n  \n})(); 