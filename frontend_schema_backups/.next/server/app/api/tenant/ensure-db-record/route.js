/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/tenant/ensure-db-record/route";
exports.ids = ["app/api/tenant/ensure-db-record/route"];
exports.modules = {

/***/ "(rsc)/../../node_modules/.pnpm/next@15.2.2_@babel+core@7.26.10_react-dom@18.3.1_react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftenant%2Fensure-db-record%2Froute&page=%2Fapi%2Ftenant%2Fensure-db-record%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftenant%2Fensure-db-record%2Froute.js&appDir=%2FUsers%2Fkuoldeng%2Fprojectx%2Ffrontend%2Fpyfactor_next%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fkuoldeng%2Fprojectx%2Ffrontend%2Fpyfactor_next&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ../../node_modules/.pnpm/next@15.2.2_@babel+core@7.26.10_react-dom@18.3.1_react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftenant%2Fensure-db-record%2Froute&page=%2Fapi%2Ftenant%2Fensure-db-record%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftenant%2Fensure-db-record%2Froute.js&appDir=%2FUsers%2Fkuoldeng%2Fprojectx%2Ffrontend%2Fpyfactor_next%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fkuoldeng%2Fprojectx%2Ffrontend%2Fpyfactor_next&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/../../node_modules/.pnpm/next@15.2.2_@babel+core@7.26.10_react-dom@18.3.1_react@18.3.1/node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/../../node_modules/.pnpm/next@15.2.2_@babel+core@7.26.10_react-dom@18.3.1_react@18.3.1/node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/../../node_modules/.pnpm/next@15.2.2_@babel+core@7.26.10_react-dom@18.3.1_react@18.3.1/node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_kuoldeng_projectx_frontend_pyfactor_next_src_app_api_tenant_ensure_db_record_route_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/tenant/ensure-db-record/route.js */ \"(rsc)/./src/app/api/tenant/ensure-db-record/route.js\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/tenant/ensure-db-record/route\",\n        pathname: \"/api/tenant/ensure-db-record\",\n        filename: \"route\",\n        bundlePath: \"app/api/tenant/ensure-db-record/route\"\n    },\n    resolvedPagePath: \"/Users/kuoldeng/projectx/frontend/pyfactor_next/src/app/api/tenant/ensure-db-record/route.js\",\n    nextConfigOutput,\n    userland: _Users_kuoldeng_projectx_frontend_pyfactor_next_src_app_api_tenant_ensure_db_record_route_js__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL25leHRAMTUuMi4yX0BiYWJlbCtjb3JlQDcuMjYuMTBfcmVhY3QtZG9tQDE4LjMuMV9yZWFjdEAxOC4zLjEvbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvbmV4dC1hcHAtbG9hZGVyL2luZGV4LmpzP25hbWU9YXBwJTJGYXBpJTJGdGVuYW50JTJGZW5zdXJlLWRiLXJlY29yZCUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGdGVuYW50JTJGZW5zdXJlLWRiLXJlY29yZCUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRnRlbmFudCUyRmVuc3VyZS1kYi1yZWNvcmQlMkZyb3V0ZS5qcyZhcHBEaXI9JTJGVXNlcnMlMkZrdW9sZGVuZyUyRnByb2plY3R4JTJGZnJvbnRlbmQlMkZweWZhY3Rvcl9uZXh0JTJGc3JjJTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZVc2VycyUyRmt1b2xkZW5nJTJGcHJvamVjdHglMkZmcm9udGVuZCUyRnB5ZmFjdG9yX25leHQmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQStGO0FBQ3ZDO0FBQ3FCO0FBQzRDO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix5R0FBbUI7QUFDM0M7QUFDQSxjQUFjLGtFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsc0RBQXNEO0FBQzlEO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQzBGOztBQUUxRiIsInNvdXJjZXMiOlsiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvVXNlcnMva3VvbGRlbmcvcHJvamVjdHgvZnJvbnRlbmQvcHlmYWN0b3JfbmV4dC9zcmMvYXBwL2FwaS90ZW5hbnQvZW5zdXJlLWRiLXJlY29yZC9yb3V0ZS5qc1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvdGVuYW50L2Vuc3VyZS1kYi1yZWNvcmQvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS90ZW5hbnQvZW5zdXJlLWRiLXJlY29yZFwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvdGVuYW50L2Vuc3VyZS1kYi1yZWNvcmQvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVXNlcnMva3VvbGRlbmcvcHJvamVjdHgvZnJvbnRlbmQvcHlmYWN0b3JfbmV4dC9zcmMvYXBwL2FwaS90ZW5hbnQvZW5zdXJlLWRiLXJlY29yZC9yb3V0ZS5qc1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHdvcmtBc3luY1N0b3JhZ2UsIHdvcmtVbml0QXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHdvcmtBc3luY1N0b3JhZ2UsXG4gICAgICAgIHdvcmtVbml0QXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgd29ya0FzeW5jU3RvcmFnZSwgd29ya1VuaXRBc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/next@15.2.2_@babel+core@7.26.10_react-dom@18.3.1_react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftenant%2Fensure-db-record%2Froute&page=%2Fapi%2Ftenant%2Fensure-db-record%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftenant%2Fensure-db-record%2Froute.js&appDir=%2FUsers%2Fkuoldeng%2Fprojectx%2Ffrontend%2Fpyfactor_next%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fkuoldeng%2Fprojectx%2Ffrontend%2Fpyfactor_next&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/next@15.2.2_@babel+core@7.26.10_react-dom@18.3.1_react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!*******************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/next@15.2.2_@babel+core@7.26.10_react-dom@18.3.1_react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \*******************************************************************************************************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/tenant/db-config.js":
/*!*****************************************!*\
  !*** ./src/app/api/tenant/db-config.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDbPool: () => (/* binding */ createDbPool),\n/* harmony export */   disconnectAllClients: () => (/* binding */ disconnectAllClients),\n/* harmony export */   getDbConfig: () => (/* binding */ getDbConfig),\n/* harmony export */   getPrismaClient: () => (/* binding */ getPrismaClient),\n/* harmony export */   testDbConnection: () => (/* binding */ testDbConnection)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n/**\n * Database configuration for all tenant-related endpoints\n * Provides consistent connection settings with AWS RDS\n */ \n// Cache for Prisma clients to avoid creating multiple connections\nconst prismaClients = {};\n// Connection settings optimized for AWS RDS\nconst DB_DEFAULTS = {\n    port: 5432,\n    database: 'dott_main',\n    // Connection settings - increase timeouts to prevent client-side aborts\n    connectionTimeoutMillis: 15000,\n    statement_timeout: 30000,\n    query_timeout: 30000,\n    max: 5,\n    idleTimeoutMillis: 10000,\n    // Added connection retry logic\n    retryAttempts: 3,\n    retryDelay: 1000 // 1 second between retry attempts\n};\n/**\n * Get database configuration with fallbacks\n * This ensures consistent settings across all endpoints\n * @returns {object} Database configuration\n */ function getDbConfig() {\n    console.log('Using AWS RDS database connection');\n    // Check if SSL should be disabled\n    const useSSL = process.env.DB_USE_SSL !== 'false';\n    // Base configuration using environment variables with fallbacks for AWS RDS\n    const config = {\n        user: process.env.RDS_USERNAME || process.env.DB_USER || process.env.DJANGO_DB_USER || 'dott_admin',\n        password: process.env.RDS_PASSWORD || process.env.DB_PASSWORD || process.env.DJANGO_DB_PASSWORD || 'RRfXU6uPPUbBEg1JqGTJ',\n        host: process.env.RDS_HOSTNAME || process.env.DB_HOST || process.env.DJANGO_DB_HOST || 'dott-dev.c12qgo6m085e.us-east-1.rds.amazonaws.com',\n        port: parseInt(process.env.RDS_PORT || process.env.DB_PORT || process.env.DJANGO_DB_PORT || DB_DEFAULTS.port, 10),\n        database: process.env.RDS_DB_NAME || process.env.DB_NAME || process.env.DJANGO_DB_NAME || 'dott_main',\n        // Connection settings\n        connectionTimeoutMillis: DB_DEFAULTS.connectionTimeoutMillis,\n        statement_timeout: DB_DEFAULTS.statement_timeout,\n        max: DB_DEFAULTS.max,\n        idleTimeoutMillis: DB_DEFAULTS.idleTimeoutMillis\n    };\n    // Log connection details (without password)\n    console.log('AWS RDS connection details:', {\n        host: config.host,\n        database: config.database,\n        user: config.user,\n        port: config.port\n    });\n    // Always add SSL configuration for AWS RDS unless explicitly disabled\n    if (useSSL) {\n        config.ssl = {\n            rejectUnauthorized: false // Allow self-signed certs for AWS RDS\n        };\n    }\n    return config;\n}\n/**\n * Create a database pool with proper error handlers\n * @returns {Pool} Database connection pool\n */ async function createDbPool() {\n    const { Pool } = __webpack_require__(/*! pg */ \"pg\");\n    const config = getDbConfig();\n    try {\n        console.log('[DB] Creating database pool with config:', {\n            host: config.host,\n            port: config.port,\n            database: config.database,\n            user: config.user,\n            ssl: config.ssl ? 'enabled' : 'disabled',\n            connectionTimeoutMillis: config.connectionTimeoutMillis,\n            max: config.max\n        });\n        const pool = new Pool(config);\n        // Add error handler to prevent uncaught exceptions\n        pool.on('error', (err)=>{\n            // Log full error details for debugging\n            console.error('[DB] Pool error event:', {\n                message: err.message,\n                code: err.code,\n                severity: err.severity,\n                detail: err.detail,\n                hint: err.hint,\n                where: err.where,\n                stack: err.stack\n            });\n        // Don't crash on connection errors\n        });\n        // Test connection to verify settings\n        console.log('[DB] Attempting to get client from pool...');\n        // Implement retry logic for initial connection\n        let client = null;\n        let lastError = null;\n        let attemptCount = 0;\n        while(attemptCount < DB_DEFAULTS.retryAttempts){\n            try {\n                attemptCount++;\n                console.log(`[DB] Connection attempt ${attemptCount}/${DB_DEFAULTS.retryAttempts}...`);\n                client = await pool.connect();\n                // If we got here, connection successful - break retry loop\n                console.log('[DB] Client connected successfully');\n                break;\n            } catch (connectionError) {\n                lastError = connectionError;\n                console.error(`[DB] Connection attempt ${attemptCount} failed:`, {\n                    message: connectionError.message,\n                    code: connectionError.code\n                });\n                // Don't wait on the last attempt\n                if (attemptCount < DB_DEFAULTS.retryAttempts) {\n                    console.log(`[DB] Waiting ${DB_DEFAULTS.retryDelay}ms before retry...`);\n                    await new Promise((resolve)=>setTimeout(resolve, DB_DEFAULTS.retryDelay));\n                }\n            }\n        }\n        // If all connection attempts failed, throw the last error\n        if (!client) {\n            throw lastError || new Error('Failed to connect to database after multiple attempts');\n        }\n        try {\n            console.log('[DB] Running test query...');\n            const testResult = await client.query('SELECT 1 as connection_test');\n            console.log('[DB] Database connection test successful', {\n                host: config.host,\n                database: config.database,\n                timestamp: new Date().toISOString(),\n                result: testResult.rows[0]\n            });\n        } catch (queryError) {\n            console.error('[DB] Test query failed:', {\n                message: queryError.message,\n                code: queryError.code,\n                severity: queryError.severity,\n                detail: queryError.detail\n            });\n            throw queryError;\n        } finally{\n            if (client) client.release();\n        }\n        return pool;\n    } catch (error) {\n        console.error('[DB] Error creating database pool:', {\n            message: error.message,\n            code: error.code,\n            severity: error.severity,\n            detail: error.detail\n        });\n        throw error; // Rethrow original error for proper handling\n    }\n}\n/**\n * Test database connection and return status\n * @returns {object} Connection test result\n */ async function testDbConnection() {\n    let pool = null;\n    try {\n        pool = await createDbPool();\n        const result = await pool.query('SELECT 1 as connection_test');\n        const config = getDbConfig();\n        return {\n            success: true,\n            connected: result.rows[0].connection_test === 1,\n            // Only include non-sensitive configuration details\n            config: {\n                host: config.host,\n                database: config.database,\n                port: config.port,\n                ssl: config.ssl ? 'enabled' : 'disabled'\n            },\n            database: 'aws_rds'\n        };\n    } catch (error) {\n        const config = getDbConfig();\n        return {\n            success: false,\n            error: error.message,\n            code: error.code,\n            // Only include non-sensitive configuration details\n            config: {\n                host: config.host,\n                database: config.database,\n                port: config.port,\n                ssl: config.ssl ? 'enabled' : 'disabled'\n            },\n            database: 'aws_rds'\n        };\n    } finally{\n        if (pool) await pool.end();\n    }\n}\n/**\n * Get a Prisma client for a specific schema\n * @param {string} schema - The schema name to connect to\n * @returns {PrismaClient} A Prisma client connected to the specified schema\n */ async function getPrismaClient(schema = 'public') {\n    try {\n        // Return cached client if it exists\n        if (prismaClients[schema]) {\n            console.log(`Using cached Prisma client for schema: ${schema}`);\n            return prismaClients[schema];\n        }\n        console.log(`Creating new Prisma client for schema: ${schema}`);\n        // Get appropriate database URL\n        const dbUrl = process.env.DATABASE_URL || `postgresql://dott_admin:${process.env.DB_PASSWORD || 'RRfXU6uPPUbBEg1JqGTJ'}@dott-dev.c12qgo6m085e.us-east-1.rds.amazonaws.com:5432/dott_main?schema=${schema}`;\n        console.log(`Using database URL: ${dbUrl.replace(/:[^:]*@/, ':***@')}`);\n        // Create a new Prisma client with the schema connection\n        const prisma = new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient({\n            datasources: {\n                db: {\n                    url: dbUrl\n                }\n            },\n            // Add logging in development\n            log:  true ? [\n                {\n                    level: 'query',\n                    emit: 'event'\n                },\n                {\n                    level: 'error',\n                    emit: 'stdout'\n                },\n                {\n                    level: 'warn',\n                    emit: 'stdout'\n                }\n            ] : 0\n        });\n        // Add query logging in development\n        if (true) {\n            prisma.$on('query', (e)=>{\n                console.log(`[Prisma Query] ${e.query} (${e.duration}ms)`);\n            });\n        }\n        // Cache the client\n        prismaClients[schema] = prisma;\n        // Test the connection\n        try {\n            await prisma.$connect();\n            console.log(`Successfully connected to database schema: ${schema}`);\n            // Execute a simple query to verify\n            const result = await prisma.$queryRaw`SELECT 1 as connection_test`;\n            console.log(`Prisma connection test successful: ${JSON.stringify(result)}`);\n            return prisma;\n        } catch (error) {\n            console.error(`Failed to connect to database schema ${schema}:`, {\n                message: error.message,\n                code: error.code,\n                stack: error.stack\n            });\n            // Remove from cache if connection failed\n            delete prismaClients[schema];\n            throw error;\n        }\n    } catch (error) {\n        console.error(`Error setting up Prisma client for schema ${schema}:`, error);\n        throw error;\n    }\n}\n/**\n * Clean up all Prisma clients on server shutdown\n */ async function disconnectAllClients() {\n    for(const schema in prismaClients){\n        try {\n            await prismaClients[schema].$disconnect();\n            console.log(`Disconnected from schema: ${schema}`);\n        } catch (error) {\n            console.error(`Error disconnecting from schema ${schema}:`, error);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/tenant/db-config.js\n");

/***/ }),

/***/ "(rsc)/./src/app/api/tenant/ensure-db-record/route.js":
/*!******************************************************!*\
  !*** ./src/app/api/tenant/ensure-db-record/route.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/../../node_modules/.pnpm/next@15.2.2_@babel+core@7.26.10_react-dom@18.3.1_react@18.3.1/node_modules/next/dist/api/server.js\");\n/* harmony import */ var _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/utils/serverLogger */ \"(rsc)/./src/utils/serverLogger.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/v5.js\");\n\n\n\n// Namespace for deterministic tenant ID generation\nconst TENANT_NAMESPACE = '9a551c44-4ade-4f89-b078-0af8be794c23';\n/**\n * A minimal endpoint to ensure a tenant record exists in the database\n * This is deliberately designed to work without authentication\n * for resilience during onboarding flows\n */ async function POST(request) {\n    let pool = null;\n    let tenantId = '';\n    let schemaName = '';\n    try {\n        // Parse request body\n        let body;\n        try {\n            body = await request.json();\n        } catch (parseError) {\n            _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__.logger.warn('[EnsureDBRecord] Failed to parse request body:', parseError);\n            body = {};\n        }\n        // Get tenant data from request body\n        tenantId = body.tenantId || '';\n        let userId = body.userId || '';\n        const email = body.email || '';\n        const businessName = body.businessName || body.business_name || '';\n        const businessType = body.businessType || body.business_type || 'Other';\n        // If no userId is provided, generate a proper UUID for it\n        if (!userId) {\n            try {\n                // Generate a UUID using a timestamp-based namespace\n                const USER_NAMESPACE = '8a551c44-4ade-4f89-b078-0af8be794c10';\n                userId = (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(`anonymous_${Date.now()}`, USER_NAMESPACE);\n                _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__.logger.info('[EnsureDBRecord] Generated UUID for anonymous user:', userId);\n            } catch (uuidError) {\n                _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__.logger.error('[EnsureDBRecord] Error generating UUID for user:', uuidError);\n                // Use a fallback ID that's a valid UUID\n                userId = '28609ed2-1a46-4d50-bc4e-483d6e3405ff';\n            }\n        }\n        // If no tenant ID, try to generate one from user ID\n        if (!tenantId && userId) {\n            try {\n                tenantId = (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(userId, TENANT_NAMESPACE);\n                _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__.logger.info('[EnsureDBRecord] Generated deterministic tenant ID:', tenantId);\n            } catch (uuidError) {\n                _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__.logger.error('[EnsureDBRecord] Error generating UUID:', uuidError);\n                // Use a fallback ID\n                tenantId = '18609ed2-1a46-4d50-bc4e-483d6e3405ff';\n            }\n        }\n        // Final fallback - use a default tenant ID\n        if (!tenantId) {\n            tenantId = '18609ed2-1a46-4d50-bc4e-483d6e3405ff';\n            _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__.logger.warn('[EnsureDBRecord] Using fallback tenant ID:', tenantId);\n        }\n        // Generate schema name - convert hyphens to underscores for schema name (PostgreSQL limitation)\n        schemaName = `tenant_${tenantId.replace(/-/g, '_')}`;\n        // Connect directly to the database\n        try {\n            // First explicitly create the table to ensure it exists\n            try {\n                _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__.logger.info('[EnsureDBRecord] Ensuring table exists');\n                const createTableUrl = new URL('/api/tenant/create-table', request.url).toString();\n                _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__.logger.info('[EnsureDBRecord] Using create-table URL:', createTableUrl);\n                const createTableResponse = await fetch(createTableUrl);\n                if (createTableResponse.ok) {\n                    _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__.logger.info('[EnsureDBRecord] Table creation check successful');\n                } else {\n                    _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__.logger.warn('[EnsureDBRecord] Table creation check failed:', await createTableResponse.text().catch(()=>createTableResponse.status.toString()));\n                }\n            } catch (tableError) {\n                _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__.logger.warn('[EnsureDBRecord] Error checking/creating table:', tableError.message);\n            }\n            // Then ensure the database environment is initialized\n            try {\n                _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__.logger.info('[EnsureDBRecord] Initializing database environment');\n                const initUrl = new URL('/api/tenant/init-db-env', request.url).toString();\n                _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__.logger.info('[EnsureDBRecord] Using init-db-env URL:', initUrl);\n                const initResponse = await fetch(initUrl);\n                if (initResponse.ok) {\n                    const initData = await initResponse.json();\n                    _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__.logger.info('[EnsureDBRecord] Database initialization successful:', initData.message, 'Table exists:', initData.tableExists);\n                } else {\n                    _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__.logger.warn('[EnsureDBRecord] Database initialization failed:', await initResponse.text().catch(()=>initResponse.status.toString()));\n                // Continue anyway, as the operation might still succeed\n                }\n            } catch (initError) {\n                _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__.logger.warn('[EnsureDBRecord] Error initializing database environment:', initError.message);\n            // Continue anyway, as the operation might still succeed\n            }\n            // Import the database configuration helper\n            const { createDbPool } = __webpack_require__(/*! ../db-config */ \"(rsc)/./src/app/api/tenant/db-config.js\");\n            // Get a configured database pool\n            pool = await createDbPool();\n            // Log connection attempt for debugging\n            _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__.logger.info('[EnsureDBRecord] Created database pool');\n            // Ping database to verify connection\n            try {\n                await pool.query('SELECT 1');\n                _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__.logger.info('[EnsureDBRecord] Database connection successful');\n            } catch (pingError) {\n                _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__.logger.error('[EnsureDBRecord] Database ping failed:', pingError.message);\n                throw pingError;\n            }\n            // Begin transaction for atomicity\n            await pool.query('BEGIN');\n            try {\n                // First create the schema\n                await pool.query(`CREATE SCHEMA IF NOT EXISTS ${schemaName};`);\n                _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__.logger.info('[EnsureDBRecord] Created schema:', schemaName);\n                // Verify schema creation and wait if needed\n                let schemaExists = false;\n                let retryCount = 0;\n                const maxRetries = 3;\n                while(!schemaExists && retryCount < maxRetries){\n                    try {\n                        // Check if schema exists\n                        const checkSchemaQuery = `\n              SELECT EXISTS (\n                SELECT FROM information_schema.schemata \n                WHERE schema_name = $1\n              );\n            `;\n                        const schemaResult = await pool.query(checkSchemaQuery, [\n                            schemaName\n                        ]);\n                        schemaExists = schemaResult.rows[0].exists;\n                        if (schemaExists) {\n                            _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__.logger.info(`[EnsureDBRecord] Schema ${schemaName} exists and is ready`);\n                        } else {\n                            // Wait a bit before retrying\n                            _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__.logger.info(`[EnsureDBRecord] Schema ${schemaName} not ready yet, waiting... (attempt ${retryCount + 1}/${maxRetries})`);\n                            await new Promise((resolve)=>setTimeout(resolve, 500)); // 500ms delay\n                            retryCount++;\n                        }\n                    } catch (checkError) {\n                        _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__.logger.warn(`[EnsureDBRecord] Error checking schema existence: ${checkError.message}`);\n                        retryCount++;\n                        await new Promise((resolve)=>setTimeout(resolve, 500)); // 500ms delay\n                    }\n                }\n                if (!schemaExists) {\n                    _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__.logger.warn(`[EnsureDBRecord] Schema ${schemaName} may not be fully created yet, but continuing...`);\n                }\n                // Add owner to users table if not exists\n                // This is critical for proper tenant setup with RLS\n                try {\n                    // First insert a user record into custom_auth_user\n                    const userEmail = body.email || `${userId}@example.com`;\n                    const userInsertQuery = `\n            INSERT INTO custom_auth_user (\n              id, email, password, is_active, is_staff, is_superuser, date_joined,\n              first_name, last_name, email_confirmed, confirmation_token,\n              is_onboarded, role, occupation, tenant_id\n            )\n            VALUES (\n              $1, $2, 'pbkdf2_sha256$placeholder', true, false, false, NOW(),\n              'User', 'User', false, gen_random_uuid(),\n              false, 'OWNER', 'OWNER', $3\n            )\n            ON CONFLICT (id) DO NOTHING;\n          `;\n                    await pool.query(userInsertQuery, [\n                        userId,\n                        userEmail,\n                        tenantId\n                    ]);\n                    _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__.logger.info('[EnsureDBRecord] Ensured user record exists for:', userId);\n                    // Now insert the user profile\n                    const profileInsertQuery = `\n            INSERT INTO users_userprofile (id, user_id, tenant_id, created_at, updated_at)\n            VALUES ($1, $1, $2, NOW(), NOW())\n            ON CONFLICT (id) DO NOTHING;\n          `;\n                    await pool.query(profileInsertQuery, [\n                        userId,\n                        tenantId\n                    ]);\n                    _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__.logger.info('[EnsureDBRecord] Ensured user profile record exists for:', userId);\n                } catch (userError) {\n                    _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__.logger.warn('[EnsureDBRecord] Error ensuring user exists (non-fatal):', userError.message);\n                // Continue even if user creation fails\n                }\n                // Add business record if not exists\n                try {\n                    const businessInsertQuery = `\n            INSERT INTO users_business (id, name, tenant_id, created_at, updated_at)\n            VALUES ($1, $2, $1, NOW(), NOW())\n            ON CONFLICT (id) DO UPDATE\n            SET name = $2, updated_at = NOW()\n            RETURNING id, name;\n          `;\n                    const businessId = tenantId; // Use same ID for simplicity\n                    const businessResult = await pool.query(businessInsertQuery, [\n                        businessId,\n                        businessName\n                    ]);\n                    if (businessResult.rows && businessResult.rows.length > 0) {\n                        _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__.logger.info('[EnsureDBRecord] Business record inserted/updated:', businessResult.rows[0]);\n                    }\n                } catch (businessError) {\n                    _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__.logger.warn('[EnsureDBRecord] Error ensuring business exists (non-fatal):', businessError.message);\n                // Continue even if business creation fails\n                }\n                // Create tenant record\n                const tenantInsertQuery = `\n          INSERT INTO custom_auth_tenant (\n            id, name, owner_id, schema_name, created_at, updated_at,\n            rls_enabled, rls_setup_date\n          )\n          VALUES ($1, $2, $3, $4, NOW(), NOW(), true, NOW())\n          ON CONFLICT (id) DO UPDATE\n          SET name = $2, updated_at = NOW()\n          RETURNING id, name, schema_name, owner_id, rls_enabled;\n        `;\n                const tenantResult = await pool.query(tenantInsertQuery, [\n                    tenantId,\n                    businessName,\n                    userId,\n                    schemaName\n                ]);\n                if (tenantResult.rows && tenantResult.rows.length > 0) {\n                    _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__.logger.info('[EnsureDBRecord] Tenant record inserted/updated:', tenantResult.rows[0]);\n                    // Set up RLS policy right away\n                    try {\n                        // Grant permissions\n                        await pool.query(`GRANT USAGE ON SCHEMA ${schemaName} TO dott_admin;`);\n                        await pool.query(`GRANT ALL PRIVILEGES ON SCHEMA ${schemaName} TO dott_admin;`);\n                        // Check if product table exists in the schema, create if not\n                        const checkTableQuery = `\n              SELECT EXISTS (\n                SELECT FROM information_schema.tables \n                WHERE table_schema = '${schemaName}' \n                AND table_name = 'product'\n              );\n            `;\n                        const tableExists = await pool.query(checkTableQuery);\n                        // If product table doesn't exist, create it\n                        if (!tableExists.rows[0].exists) {\n                            _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__.logger.info(`[EnsureDBRecord] Product table doesn't exist in schema ${schemaName}, creating it`);\n                            const createTableQuery = `\n                CREATE TABLE IF NOT EXISTS ${schemaName}.product (\n                  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n                  name VARCHAR(255) NOT NULL,\n                  description TEXT,\n                  price DECIMAL(10, 2),\n                  tenant_id UUID NOT NULL,\n                  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n                  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n                );\n              `;\n                            await pool.query(createTableQuery);\n                            _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__.logger.info(`[EnsureDBRecord] Created product table in schema ${schemaName}`);\n                        }\n                        // Create a basic RLS policy (this will be expanded through migrations)\n                        const rlsQuery = `\n              ALTER TABLE IF EXISTS ${schemaName}.product ENABLE ROW LEVEL SECURITY;\n              DROP POLICY IF EXISTS tenant_isolation_policy ON ${schemaName}.product;\n              CREATE POLICY tenant_isolation_policy ON ${schemaName}.product \n              USING (tenant_id = '${tenantId}')\n              WITH CHECK (tenant_id = '${tenantId}');\n            `;\n                        await pool.query(rlsQuery);\n                        _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__.logger.info('[EnsureDBRecord] Set up RLS policy for schema');\n                    } catch (rlsError) {\n                        _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__.logger.warn('[EnsureDBRecord] Error setting up RLS policy (non-fatal):', rlsError.message);\n                    // Continue even if RLS setup fails\n                    }\n                    // Update user profile with business ID\n                    try {\n                        const userProfileQuery = `\n              UPDATE users_userprofile \n              SET business_id = $1\n              WHERE id = $2;\n            `;\n                        await pool.query(userProfileQuery, [\n                            tenantId,\n                            userId\n                        ]);\n                        _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__.logger.info('[EnsureDBRecord] Updated user profile with business ID');\n                    } catch (profileError) {\n                        _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__.logger.warn('[EnsureDBRecord] Error updating user profile (non-fatal):', profileError.message);\n                    // Continue even if profile update fails\n                    }\n                    // Commit the transaction\n                    await pool.query('COMMIT');\n                    _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__.logger.info('[EnsureDBRecord] Transaction committed successfully');\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        success: true,\n                        tenantId: tenantResult.rows[0].id,\n                        name: tenantResult.rows[0].name,\n                        schemaName: tenantResult.rows[0].schema_name,\n                        ownerId: tenantResult.rows[0].owner_id,\n                        rlsEnabled: tenantResult.rows[0].rls_enabled,\n                        created: true,\n                        message: 'Successfully created tenant record and schema'\n                    });\n                } else {\n                    throw new Error(\"Tenant record creation didn't return expected data\");\n                }\n            } catch (transactionError) {\n                // Rollback on any error\n                await pool.query('ROLLBACK');\n                _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__.logger.error('[EnsureDBRecord] Transaction failed:', transactionError.message);\n                throw transactionError;\n            }\n        } catch (dbError) {\n            // Reraise for outer catch block\n            throw dbError;\n        } finally{\n            // Close connection\n            if (pool) {\n                try {\n                    await pool.end();\n                    _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__.logger.info('[EnsureDBRecord] Database connection closed');\n                } catch (closeError) {\n                    _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__.logger.error('[EnsureDBRecord] Error closing connection:', closeError.message);\n                }\n            }\n        }\n    } catch (error) {\n        _utils_serverLogger__WEBPACK_IMPORTED_MODULE_1__.logger.error('[EnsureDBRecord] Error creating tenant record:', error.message);\n        // Always return a valid JSON response, even on errors\n        // Add proper Content-Type header to ensure browser treats it as JSON\n        return new next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse(JSON.stringify({\n            success: true,\n            tenantId,\n            schemaName,\n            clientSideOnly: true,\n            message: 'Failed to create tenant record in database, but client can use tenant ID',\n            error: error.message\n        }), {\n            status: 200,\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/tenant/ensure-db-record/route.js\n");

/***/ }),

/***/ "(rsc)/./src/utils/serverLogger.js":
/*!***********************************!*\
  !*** ./src/utils/serverLogger.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createContextualServerLogger: () => (/* binding */ createContextualServerLogger),\n/* harmony export */   createServerLogger: () => (/* binding */ createServerLogger),\n/* harmony export */   debug: () => (/* binding */ debug),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   error: () => (/* binding */ error),\n/* harmony export */   info: () => (/* binding */ info),\n/* harmony export */   logger: () => (/* binding */ logger),\n/* harmony export */   serverLogger: () => (/* binding */ serverLogger),\n/* harmony export */   warn: () => (/* binding */ warn)\n/* harmony export */ });\n// Server-side logger implementation\n// This file should be imported in API routes instead of the client-side logger\n/**\n * Server-side logger utility\n * \n * This logger is specifically designed for server components and API routes\n * where the client-side logger with browser-specific APIs can't be used.\n */ /**\n * Format log prefix to include timestamp and context\n */ function formatPrefix(level, context = {}) {\n    const timestamp = new Date().toISOString();\n    const tenantId = context.tenantId || 'no-tenant';\n    return `[${timestamp}] [SERVER:${level}] [${tenantId}]`;\n}\n/**\n * Server logger instance with standard logging methods\n */ const serverLogger = {\n    /**\n   * Log at DEBUG level\n   */ debug: (message, data, context = {})=>{\n        const prefix = formatPrefix('DEBUG', context);\n        if (data !== undefined) {\n            console.debug(`${prefix} ${message}`, data);\n        } else {\n            console.debug(`${prefix} ${message}`);\n        }\n    },\n    /**\n   * Log at INFO level\n   */ info: (message, data, context = {})=>{\n        const prefix = formatPrefix('INFO', context);\n        if (data !== undefined) {\n            console.info(`${prefix} ${message}`, data);\n        } else {\n            console.info(`${prefix} ${message}`);\n        }\n    },\n    /**\n   * Log at WARN level\n   */ warn: (message, data, context = {})=>{\n        const prefix = formatPrefix('WARN', context);\n        if (data !== undefined) {\n            console.warn(`${prefix} ${message}`, data);\n        } else {\n            console.warn(`${prefix} ${message}`);\n        }\n    },\n    /**\n   * Log at ERROR level\n   */ error: (message, data, context = {})=>{\n        const prefix = formatPrefix('ERROR', context);\n        if (data !== undefined) {\n            console.error(`${prefix} ${message}`, data);\n        } else {\n            console.error(`${prefix} ${message}`);\n        }\n    }\n};\n/**\n * Create a contextualized server logger with pre-bound context\n */ function createContextualServerLogger(context = {}) {\n    return {\n        debug: (message, data)=>serverLogger.debug(message, data, context),\n        info: (message, data)=>serverLogger.info(message, data, context),\n        warn: (message, data)=>serverLogger.warn(message, data, context),\n        error: (message, data)=>serverLogger.error(message, data, context)\n    };\n}\n/**\n * Legacy function for backward compatibility with existing imports\n * Creates a logger with a namespace\n */ function createServerLogger(namespace = 'API') {\n    return {\n        debug: (message, ...args)=>serverLogger.debug(`[${namespace}] ${message}`, args.length ? args[0] : undefined),\n        info: (message, ...args)=>serverLogger.info(`[${namespace}] ${message}`, args.length ? args[0] : undefined),\n        warn: (message, ...args)=>serverLogger.warn(`[${namespace}] ${message}`, args.length ? args[0] : undefined),\n        error: (message, ...args)=>serverLogger.error(`[${namespace}] ${message}`, args.length ? args[0] : undefined),\n        log: (message, ...args)=>serverLogger.info(`[${namespace}] ${message}`, args.length ? args[0] : undefined)\n    };\n}\n// Create a default server logger instance for compatibility with existing imports\nconst logger = createServerLogger('API');\n// Export individual functions directly from serverLogger for convenience\nconst debug = serverLogger.debug;\nconst info = serverLogger.info;\nconst warn = serverLogger.warn;\nconst error = serverLogger.error;\n// For CommonJS compatibility\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    serverLogger,\n    logger,\n    debug,\n    info,\n    warn,\n    error,\n    createContextualServerLogger,\n    createServerLogger\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/utils/serverLogger.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/next@15.2.2_@babel+core@7.26.10_react-dom@18.3.1_react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!*******************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/next@15.2.2_@babel+core@7.26.10_react-dom@18.3.1_react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \*******************************************************************************************************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("@prisma/client");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("pg");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next@15.2.2_@babel+core@7.26.10_react-dom@18.3.1_react@18.3.1","vendor-chunks/uuid"], () => (__webpack_exec__("(rsc)/../../node_modules/.pnpm/next@15.2.2_@babel+core@7.26.10_react-dom@18.3.1_react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftenant%2Fensure-db-record%2Froute&page=%2Fapi%2Ftenant%2Fensure-db-record%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftenant%2Fensure-db-record%2Froute.js&appDir=%2FUsers%2Fkuoldeng%2Fprojectx%2Ffrontend%2Fpyfactor_next%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fkuoldeng%2Fprojectx%2Ffrontend%2Fpyfactor_next&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();