"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/layout",{

/***/ "(app-pages-browser)/./src/app/dashboard/DashboardClient.js":
/*!**********************************************!*\
  !*** ./src/app/dashboard/DashboardClient.js ***!
  \**********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClientDataSync: () => (/* binding */ ClientDataSync),\n/* harmony export */   \"default\": () => (/* binding */ DashboardClient)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/../../node_modules/.pnpm/next@15.2.2_@babel+core@7.26.10_react-dom@18.3.1_react@18.3.1/node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../../node_modules/.pnpm/next@15.2.2_@babel+core@7.26.10_react-dom@18.3.1_react@18.3.1/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/utils/logger */ \"(app-pages-browser)/./src/utils/logger.js\");\n/* harmony import */ var _DashboardWrapper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./DashboardWrapper */ \"(app-pages-browser)/./src/app/dashboard/DashboardWrapper.js\");\n/* harmony import */ var next_navigation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/navigation */ \"(app-pages-browser)/../../node_modules/.pnpm/next@15.2.2_@babel+core@7.26.10_react-dom@18.3.1_react@18.3.1/node_modules/next/dist/api/navigation.js\");\n/* harmony import */ var _constants_onboarding__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/constants/onboarding */ \"(app-pages-browser)/./src/constants/onboarding.js\");\n/* harmony import */ var _aws_amplify_auth__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @aws-amplify/auth */ \"(app-pages-browser)/../../node_modules/.pnpm/@aws-amplify+core@6.11.1/node_modules/@aws-amplify/core/dist/esm/singleton/apis/fetchAuthSession.mjs\");\n/* harmony import */ var _aws_amplify_auth__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @aws-amplify/auth */ \"(app-pages-browser)/../../node_modules/.pnpm/@aws-amplify+auth@6.12.1_@aws-amplify+core@6.11.1/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/fetchUserAttributes.mjs\");\n/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dynamic */ \"(app-pages-browser)/../../node_modules/.pnpm/next@15.2.2_@babel+core@7.26.10_react-dom@18.3.1_react@18.3.1/node_modules/next/dist/api/app-dynamic.js\");\n/* harmony import */ var _components_DashboardLoader__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/components/DashboardLoader */ \"(app-pages-browser)/./src/components/DashboardLoader.js\");\n/* harmony import */ var _context_NotificationContext__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @/context/NotificationContext */ \"(app-pages-browser)/./src/context/NotificationContext.js\");\n/* harmony import */ var next_auth_react__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next-auth/react */ \"(app-pages-browser)/../../node_modules/.pnpm/next-auth@4.24.11_next@15.2.2_react-dom@18.3.1_react@18.3.1/node_modules/next-auth/react/index.js\");\n/* harmony import */ var next_auth_react__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(next_auth_react__WEBPACK_IMPORTED_MODULE_9__);\n/* __next_internal_client_entry_do_not_use__ ClientDataSync,default auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n\n\n\n\n\n\n\n\n\n// Dynamically import DatabaseAdmin component to avoid loading it until needed\nconst DatabaseAdmin = (0,next_dynamic__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(()=>__webpack_require__.e(/*! import() */ \"_app-pages-browser_src_components_DatabaseAdmin_js\").then(__webpack_require__.bind(__webpack_require__, /*! @/components/DatabaseAdmin */ \"(app-pages-browser)/./src/components/DatabaseAdmin.js\")), {\n    loadableGenerated: {\n        modules: [\n            \"app/dashboard/DashboardClient.js -> \" + \"@/components/DatabaseAdmin\"\n        ]\n    },\n    loading: ()=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            children: \"Loading database tools...\"\n        }, void 0, false, {\n            fileName: \"/Users/kuoldeng/projectx/frontend/pyfactor_next/src/app/dashboard/DashboardClient.js\",\n            lineNumber: 18,\n            columnNumber: 18\n        }, undefined),\n    ssr: false\n});\n_c = DatabaseAdmin;\n// Helper function to check if user has entered onboarding data\nfunction checkForUserOnboardingData() {\n    try {\n        // Check localStorage for business info\n        const businessInfo = localStorage.getItem('businessInfo');\n        if (businessInfo) {\n            try {\n                const parsedInfo = JSON.parse(businessInfo);\n                if (parsedInfo.businessName || parsedInfo.businessType) {\n                    return true;\n                }\n            } catch (e) {\n            // Invalid JSON, ignore\n            }\n        }\n        // Check for business name in localStorage directly\n        const businessName = localStorage.getItem('businessName');\n        if (businessName) return true;\n        // Check cookies for business info\n        const cookies = document.cookie.split(';');\n        for (const cookie of cookies){\n            const [name, value] = cookie.trim().split('=');\n            if (name === 'businessName' && value) {\n                return true;\n            }\n        }\n        return false;\n    } catch (e) {\n        return false;\n    }\n}\n// Helper to get business name from user data\nfunction getUserBusinessName() {\n    try {\n        // Try cookies first\n        const getCookie = (name)=>{\n            const value = \"; \".concat(document.cookie);\n            const parts = value.split(\"; \".concat(name, \"=\"));\n            if (parts.length === 2) return parts.pop().split(';').shift();\n            return null;\n        };\n        const cookieName = getCookie('businessName') || getCookie('custom:businessname');\n        if (cookieName) return cookieName;\n        // Then try localStorage\n        if (typeof localStorage !== 'undefined') {\n            try {\n                // Try businessInfo object\n                const storedInfo = localStorage.getItem('businessInfo');\n                if (storedInfo) {\n                    const parsedInfo = JSON.parse(storedInfo);\n                    if (parsedInfo.businessName) return parsedInfo.businessName;\n                }\n                // Try direct key\n                const directName = localStorage.getItem('businessName');\n                if (directName) return directName;\n            } catch (e) {\n            // Ignore localStorage errors\n            }\n        }\n    } catch (e) {\n    // Ignore any errors in this helper\n    }\n    return null;\n}\n// Helper to get business type from user data\nfunction getUserBusinessType() {\n    try {\n        // Try to get from localStorage businessInfo\n        const businessInfo = localStorage.getItem('businessInfo');\n        if (businessInfo) {\n            try {\n                const parsedInfo = JSON.parse(businessInfo);\n                if (parsedInfo.businessType) return parsedInfo.businessType;\n            } catch (e) {\n            // Invalid JSON, continue to other methods\n            }\n        }\n        // Try localStorage direct key\n        return localStorage.getItem('businessType');\n    } catch (e) {\n        return null;\n    }\n}\n// Client data synchronization component\nfunction ClientDataSync() {\n    _s();\n    const [syncComplete, setSyncComplete] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ClientDataSync.useEffect\": ()=>{\n            // Function to sync tenant IDs and other client data\n            const syncClientData = {\n                \"ClientDataSync.useEffect.syncClientData\": async ()=>{\n                    try {\n                        var _document_cookie_split_find, _document_cookie_split_find1;\n                        // Get tenant ID from localStorage or cookies\n                        const tenantId = localStorage.getItem('tenantId') || ((_document_cookie_split_find = document.cookie.split(';').find({\n                            \"ClientDataSync.useEffect.syncClientData\": (c)=>c.trim().startsWith('tenantId=')\n                        }[\"ClientDataSync.useEffect.syncClientData\"])) === null || _document_cookie_split_find === void 0 ? void 0 : _document_cookie_split_find.split('=')[1]) || ((_document_cookie_split_find1 = document.cookie.split(';').find({\n                            \"ClientDataSync.useEffect.syncClientData\": (c)=>c.trim().startsWith('businessid=')\n                        }[\"ClientDataSync.useEffect.syncClientData\"])) === null || _document_cookie_split_find1 === void 0 ? void 0 : _document_cookie_split_find1.split('=')[1]);\n                        // Check if tenant ID is valid\n                        if (tenantId) {\n                            _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.info('[ClientDataSync] Synchronizing tenant ID:', tenantId);\n                            // Make sure tenant ID is consistent in all storage locations\n                            localStorage.setItem('tenantId', tenantId);\n                            document.cookie = \"tenantId=\".concat(tenantId, \"; path=/; max-age=\").concat(60 * 60 * 24 * 30, \"; samesite=lax\");\n                            document.cookie = \"businessid=\".concat(tenantId, \"; path=/; max-age=\").concat(60 * 60 * 24 * 30, \"; samesite=lax\");\n                        }\n                        // Sync tenant IDs to prevent corruption\n                        syncTenantIDs();\n                        // Mark sync as complete\n                        setSyncComplete(true);\n                    } catch (error) {\n                        _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error('[ClientDataSync] Error syncing client data:', error);\n                        // Continue despite errors\n                        setSyncComplete(true);\n                    }\n                }\n            }[\"ClientDataSync.useEffect.syncClientData\"];\n            // Run sync on component mount\n            syncClientData();\n        }\n    }[\"ClientDataSync.useEffect\"], []);\n    // This component doesn't render anything visible\n    return null;\n}\n_s(ClientDataSync, \"9d2rLY7Mk5hO34AeMfmIXUYzN/4=\");\n_c1 = ClientDataSync;\n// Sync tenant IDs in client to prevent corruption\nconst syncTenantIDs = ()=>{\n    try {\n        var _document_cookie_split_find, _document_cookie_split_find1;\n        // Get tenant IDs from different sources\n        const tenantIdCookie = (_document_cookie_split_find = document.cookie.split('; ').find((row)=>row.startsWith('tenantId='))) === null || _document_cookie_split_find === void 0 ? void 0 : _document_cookie_split_find.split('=')[1];\n        const businessIdCookie = (_document_cookie_split_find1 = document.cookie.split('; ').find((row)=>row.startsWith('businessid='))) === null || _document_cookie_split_find1 === void 0 ? void 0 : _document_cookie_split_find1.split('=')[1];\n        const localStorageTenantId = localStorage.getItem('tenantId');\n        console.log('[ClientDataSync] Checking tenant IDs:', {\n            tenantIdCookie,\n            businessIdCookie,\n            localStorageTenantId\n        });\n        // Check if any tenant ID is invalid (corrupted)\n        if (tenantIdCookie && !isValidUUID(tenantIdCookie)) {\n            console.warn('[ClientDataSync] Detected corrupted tenantId cookie:', tenantIdCookie);\n            // Try to use a valid ID from another source\n            const validId = isValidUUID(localStorageTenantId) ? localStorageTenantId : isValidUUID(businessIdCookie) ? businessIdCookie : null;\n            if (validId) {\n                console.log('[ClientDataSync] Using valid tenant ID to replace corrupted cookie:', validId);\n                document.cookie = \"tenantId=\".concat(validId, \"; path=/; max-age=\").concat(60 * 60 * 24 * 30, \"; samesite=lax\");\n                document.cookie = \"businessid=\".concat(validId, \"; path=/; max-age=\").concat(60 * 60 * 24 * 30, \"; samesite=lax\");\n            } else {\n                // If no valid ID found, delete the corrupted cookie\n                console.warn('[ClientDataSync] No valid tenant ID found, clearing corrupted cookie');\n                document.cookie = 'tenantId=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT';\n                document.cookie = 'businessid=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT';\n                // Try to fetch a tenant from server if authenticated\n                fetchTenantFromServer();\n            }\n        }\n        // Ensure consistency between localStorage and cookies if we have a valid ID\n        if (localStorageTenantId && isValidUUID(localStorageTenantId)) {\n            if (!tenantIdCookie || tenantIdCookie !== localStorageTenantId) {\n                console.log('[ClientDataSync] Using local storage tenant ID for cookies:', localStorageTenantId);\n                document.cookie = \"tenantId=\".concat(localStorageTenantId, \"; path=/; max-age=\").concat(60 * 60 * 24 * 30, \"; samesite=lax\");\n                document.cookie = \"businessid=\".concat(localStorageTenantId, \"; path=/; max-age=\").concat(60 * 60 * 24 * 30, \"; samesite=lax\");\n            }\n        } else if (tenantIdCookie && isValidUUID(tenantIdCookie) && (!localStorageTenantId || localStorageTenantId !== tenantIdCookie)) {\n            // If cookie has valid ID but localStorage doesn't, update localStorage\n            console.log('[ClientDataSync] Using cookie tenant ID for localStorage:', tenantIdCookie);\n            localStorage.setItem('tenantId', tenantIdCookie);\n        } else if (!localStorageTenantId && !tenantIdCookie && !businessIdCookie) {\n            // If no tenant ID is found, try to get one from the server\n            fetchTenantFromServer();\n        }\n    } catch (error) {\n        console.error('[ClientDataSync] Error syncing tenant IDs:', error);\n    }\n};\n// Function to fetch a tenant ID from the server\nconst fetchTenantFromServer = async ()=>{\n    try {\n        console.log('[ClientDataSync] Attempting to fetch tenant from server...');\n        // Call getOrCreate endpoint to get or create a tenant\n        const response = await fetch('/api/tenant/getOrCreate', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        });\n        if (!response.ok) {\n            throw new Error(\"Server responded with status: \".concat(response.status));\n        }\n        const data = await response.json();\n        if (data.success && data.tenantId) {\n            console.log('[ClientDataSync] Successfully obtained tenant ID from server:', data.tenantId);\n            // Store the tenant ID in localStorage and cookies\n            localStorage.setItem('tenantId', data.tenantId);\n            document.cookie = \"tenantId=\".concat(data.tenantId, \"; path=/; max-age=\").concat(60 * 60 * 24 * 30, \"; samesite=lax\");\n            document.cookie = \"businessid=\".concat(data.tenantId, \"; path=/; max-age=\").concat(60 * 60 * 24 * 30, \"; samesite=lax\");\n            // Refresh the page to apply the new tenant ID\n            window.location.reload();\n        } else {\n            console.error('[ClientDataSync] Failed to obtain tenant ID from server:', data.message);\n        }\n    } catch (error) {\n        console.error('[ClientDataSync] Error fetching tenant from server:', error);\n    }\n};\nfunction DashboardClient(param) {\n    let { newAccount, plan } = param;\n    _s1();\n    const [isClient, setIsClient] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isReady, setIsReady] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isAuthenticated, setIsAuthenticated] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [userData, setUserData] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const router = (0,next_navigation__WEBPACK_IMPORTED_MODULE_4__.useRouter)();\n    const [isVerifyingTenant, setIsVerifyingTenant] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [tenantVerified, setTenantVerified] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [setupStatus, setSetupStatus] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('pending');\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    // Replace constant logging with first-render-only logging\n    const isFirstRender = react__WEBPACK_IMPORTED_MODULE_1___default().useRef(true);\n    if (isFirstRender.current) {\n        console.log('DashboardClient initial render with props:', {\n            newAccount,\n            plan\n        });\n        isFirstRender.current = false;\n    }\n    // Add searchParams\n    const searchParams = (0,next_navigation__WEBPACK_IMPORTED_MODULE_4__.useSearchParams)();\n    // Add notification context\n    const { notifySuccess, notifyError, notifyWarning } = (0,_context_NotificationContext__WEBPACK_IMPORTED_MODULE_8__.useNotification)();\n    // Dashboard loading component\n    const DashboardLoadingState = ()=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"flex items-center justify-center min-h-screen\",\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"text-center\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500 mx-auto mb-4\"\n                    }, void 0, false, {\n                        fileName: \"/Users/kuoldeng/projectx/frontend/pyfactor_next/src/app/dashboard/DashboardClient.js\",\n                        lineNumber: 286,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                        className: \"text-xl font-semibold mb-2\",\n                        children: \"Loading your dashboard...\"\n                    }, void 0, false, {\n                        fileName: \"/Users/kuoldeng/projectx/frontend/pyfactor_next/src/app/dashboard/DashboardClient.js\",\n                        lineNumber: 287,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        className: \"text-gray-500\",\n                        children: \"Please wait while we retrieve your data.\"\n                    }, void 0, false, {\n                        fileName: \"/Users/kuoldeng/projectx/frontend/pyfactor_next/src/app/dashboard/DashboardClient.js\",\n                        lineNumber: 288,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/kuoldeng/projectx/frontend/pyfactor_next/src/app/dashboard/DashboardClient.js\",\n                lineNumber: 285,\n                columnNumber: 7\n            }, this)\n        }, void 0, false, {\n            fileName: \"/Users/kuoldeng/projectx/frontend/pyfactor_next/src/app/dashboard/DashboardClient.js\",\n            lineNumber: 284,\n            columnNumber: 5\n        }, this);\n    // Dashboard error component\n    const DashboardErrorState = ()=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"flex items-center justify-center min-h-screen\",\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"text-center p-6 bg-red-50 rounded-lg max-w-md\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                        xmlns: \"http://www.w3.org/2000/svg\",\n                        className: \"h-12 w-12 text-red-500 mx-auto mb-4\",\n                        fill: \"none\",\n                        viewBox: \"0 0 24 24\",\n                        stroke: \"currentColor\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                            strokeLinecap: \"round\",\n                            strokeLinejoin: \"round\",\n                            strokeWidth: 2,\n                            d: \"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"\n                        }, void 0, false, {\n                            fileName: \"/Users/kuoldeng/projectx/frontend/pyfactor_next/src/app/dashboard/DashboardClient.js\",\n                            lineNumber: 304,\n                            columnNumber: 11\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"/Users/kuoldeng/projectx/frontend/pyfactor_next/src/app/dashboard/DashboardClient.js\",\n                        lineNumber: 297,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                        className: \"text-xl font-semibold mb-2\",\n                        children: \"Unable to load dashboard\"\n                    }, void 0, false, {\n                        fileName: \"/Users/kuoldeng/projectx/frontend/pyfactor_next/src/app/dashboard/DashboardClient.js\",\n                        lineNumber: 306,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        className: \"text-gray-700 mb-4\",\n                        children: error || \"There was a problem loading your data. Please try again later.\"\n                    }, void 0, false, {\n                        fileName: \"/Users/kuoldeng/projectx/frontend/pyfactor_next/src/app/dashboard/DashboardClient.js\",\n                        lineNumber: 307,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        onClick: ()=>window.location.reload(),\n                        className: \"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors\",\n                        children: \"Retry\"\n                    }, void 0, false, {\n                        fileName: \"/Users/kuoldeng/projectx/frontend/pyfactor_next/src/app/dashboard/DashboardClient.js\",\n                        lineNumber: 308,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/kuoldeng/projectx/frontend/pyfactor_next/src/app/dashboard/DashboardClient.js\",\n                lineNumber: 296,\n                columnNumber: 7\n            }, this)\n        }, void 0, false, {\n            fileName: \"/Users/kuoldeng/projectx/frontend/pyfactor_next/src/app/dashboard/DashboardClient.js\",\n            lineNumber: 295,\n            columnNumber: 5\n        }, this);\n    // Function to fix missing attributes if needed\n    async function ensureUserAttributesComplete(session, userData) {\n        try {\n            // First, validate we have a valid session and tokens\n            if (!session || !session.tokens || !session.tokens.accessToken || !session.tokens.idToken) {\n                _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.warn('[DashboardClient] Missing session or tokens, cannot update attributes');\n                return {\n                    success: false,\n                    error: 'Missing authentication tokens'\n                };\n            }\n            // Validate we have user data\n            if (!userData) {\n                _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.warn('[DashboardClient] No user data provided, cannot check attributes');\n                return {\n                    success: false,\n                    error: 'No user data provided'\n                };\n            }\n            // Check for missing attributes\n            const missingAttributes = [];\n            const requiredAttributes = [\n                'custom:businessid',\n                'custom:businessname',\n                'custom:businesstype',\n                'custom:acctstatus',\n                'custom:onboarding',\n                'custom:setupdone',\n                'custom:created_at',\n                'custom:updated_at'\n            ];\n            // Check which attributes are missing\n            for (const attr of requiredAttributes){\n                if (!userData[attr]) {\n                    missingAttributes.push(attr);\n                }\n            }\n            // If no missing attributes, return\n            if (missingAttributes.length === 0) {\n                return {\n                    success: true,\n                    message: 'All attributes present'\n                };\n            }\n            _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.info('[DashboardClient] Detected missing attributes:', missingAttributes);\n            // Create attributes to update\n            const attributesToUpdate = {};\n            const timestamp = new Date().toISOString();\n            // For each missing attribute, set a default value\n            missingAttributes.forEach((attr)=>{\n                switch(attr){\n                    case 'custom:businessid':\n                        // Try to generate a deterministic ID based on user ID if available\n                        if (userData['custom:businessid']) {\n                            attributesToUpdate[attr] = userData['custom:businessid'];\n                        } else if (userData.sub) {\n                            try {\n                                const { v5: uuidv5 } = __webpack_require__(/*! uuid */ \"(app-pages-browser)/./node_modules/uuid/dist/commonjs-browser/index.js\");\n                                const TENANT_NAMESPACE = '9a551c44-4ade-4f89-b078-0af8be794c23';\n                                attributesToUpdate[attr] = uuidv5(userData.sub, TENANT_NAMESPACE);\n                            } catch (e) {\n                                // Fallback to random UUID only if absolutely necessary\n                                attributesToUpdate[attr] = crypto.randomUUID();\n                            }\n                        } else {\n                            // Last resort fallback\n                            attributesToUpdate[attr] = crypto.randomUUID();\n                        }\n                        break;\n                    case 'custom:businessname':\n                        // Try to get business name from cookies or localStorage\n                        const businessName = getBestBusinessName() || '';\n                        attributesToUpdate[attr] = userData['custom:businessname'] || businessName;\n                        break;\n                    case 'custom:businesstype':\n                        attributesToUpdate[attr] = userData['custom:businesstype'] || 'Other';\n                        break;\n                    case 'custom:acctstatus':\n                        attributesToUpdate[attr] = userData['custom:acctstatus'] || 'ACTIVE';\n                        break;\n                    case 'custom:onboarding':\n                        attributesToUpdate[attr] = userData['custom:onboarding'] || 'complete';\n                        break;\n                    case 'custom:setupdone':\n                        attributesToUpdate[attr] = userData['custom:setupdone'] || 'true';\n                        break;\n                    case 'custom:created_at':\n                        attributesToUpdate[attr] = userData['custom:created_at'] || timestamp;\n                        break;\n                    case 'custom:updated_at':\n                        attributesToUpdate[attr] = timestamp;\n                        break;\n                    default:\n                        break;\n                }\n            });\n            // Helper function to get business name from various sources\n            function getBestBusinessName() {\n                try {\n                    // Try cookies first\n                    const getCookie = (name)=>{\n                        const value = \"; \".concat(document.cookie);\n                        const parts = value.split(\"; \".concat(name, \"=\"));\n                        if (parts.length === 2) return parts.pop().split(';').shift();\n                        return null;\n                    };\n                    const cookieName = getCookie('businessName') || getCookie('custom:businessname');\n                    if (cookieName) return cookieName;\n                    // Then try localStorage\n                    if (typeof localStorage !== 'undefined') {\n                        try {\n                            // Try businessInfo object\n                            const storedInfo = localStorage.getItem('businessInfo');\n                            if (storedInfo) {\n                                const parsedInfo = JSON.parse(storedInfo);\n                                if (parsedInfo.businessName) return parsedInfo.businessName;\n                            }\n                            // Try direct key\n                            const directName = localStorage.getItem('businessName');\n                            if (directName) return directName;\n                        } catch (e) {\n                        // Ignore localStorage errors\n                        }\n                    }\n                } catch (e) {\n                // Ignore any errors in this helper\n                }\n                return null;\n            }\n            // Update the attributes using the API, with error handling for network issues\n            try {\n                const response = await fetch('/api/user/update-attributes', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Authorization': \"Bearer \".concat(session.tokens.accessToken.toString()),\n                        'X-Id-Token': session.tokens.idToken.toString()\n                    },\n                    body: JSON.stringify({\n                        attributes: attributesToUpdate,\n                        forceUpdate: true\n                    })\n                });\n                if (!response.ok) {\n                    const errorText = await response.text().catch(()=>'Unknown error');\n                    _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.warn('[DashboardClient] API returned error:', {\n                        status: response.status,\n                        text: errorText\n                    });\n                    return {\n                        success: false,\n                        error: \"API error: \".concat(response.status, \" \").concat(errorText)\n                    };\n                }\n                _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.info('[DashboardClient] Fixed missing attributes:', attributesToUpdate);\n                return {\n                    success: true,\n                    message: 'Missing attributes fixed',\n                    updatedAttributes: attributesToUpdate\n                };\n            } catch (fetchError) {\n                _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.warn('[DashboardClient] Network error updating attributes:', fetchError);\n                return {\n                    success: false,\n                    error: \"Network error: \".concat(fetchError.message)\n                };\n            }\n        } catch (error) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.warn('[DashboardClient] Error fixing missing attributes:', error);\n            return {\n                success: false,\n                error: error.message\n            };\n        }\n    }\n    // Generate a deterministic tenant ID from the user ID if needed\n    const generateDeterministicTenantId = (userId)=>{\n        try {\n            if (!userId) return null;\n            // Use UUID v5 algorithm for proper deterministic UUID generation\n            // This uses a SHA-1 hash (via subtle crypto) to ensure consistency\n            const encoder = new TextEncoder();\n            const data = encoder.encode(userId);\n            // UUID v5 namespace (using DNS namespace as base)\n            const NAMESPACE = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\n            // Convert namespace to bytes\n            const namespaceBytes = new Uint8Array(16);\n            NAMESPACE.replace(/-/g, '').match(/.{2}/g).map((hex, i)=>{\n                namespaceBytes[i] = parseInt(hex, 16);\n            });\n            // Combine namespace and name\n            const combinedBytes = new Uint8Array(16 + data.length);\n            combinedBytes.set(namespaceBytes);\n            combinedBytes.set(data, 16);\n            // Get hash of combined bytes\n            // In browsers supporting crypto.subtle:\n            if (typeof crypto !== 'undefined' && crypto.subtle) {\n                return crypto.subtle.digest('SHA-1', combinedBytes).then((buffer)=>{\n                    const hashArray = Array.from(new Uint8Array(buffer));\n                    // Format as UUID v5\n                    hashArray[6] = hashArray[6] & 0x0f | 0x50; // Set version to 5\n                    hashArray[8] = hashArray[8] & 0x3f | 0x80; // Set variant\n                    // Convert to hex and format as UUID\n                    const hex = hashArray.map((b)=>b.toString(16).padStart(2, '0')).join('');\n                    const uuid = \"\".concat(hex.slice(0, 8), \"-\").concat(hex.slice(8, 12), \"-\").concat(hex.slice(12, 16), \"-\").concat(hex.slice(16, 20), \"-\").concat(hex.slice(20, 32));\n                    _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.info('[DashboardClient] Generated deterministic UUID v5 tenant ID from user ID:', uuid);\n                    return uuid;\n                }).catch((e)=>{\n                    _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error('[DashboardClient] Error generating UUID v5 tenant ID:', e);\n                    // Fall back to simple hash method if subtle crypto fails\n                    return generateSimpleHashTenantId(userId);\n                });\n            } else {\n                // Fallback for environments without crypto.subtle\n                return generateSimpleHashTenantId(userId);\n            }\n        } catch (e) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error('[DashboardClient] Error generating tenant ID:', e);\n            return null;\n        }\n    };\n    // Fallback method using simple hash for environments without crypto.subtle\n    const generateSimpleHashTenantId = (userId)=>{\n        const hash = Array.from(userId).reduce((acc, char)=>{\n            return (acc << 5) - acc + char.charCodeAt(0) | 0;\n        }, 0).toString(16).padStart(32, '0');\n        // Format as UUID-like string\n        const uuid = \"\".concat(hash.slice(0, 8), \"-\").concat(hash.slice(8, 12), \"-5\").concat(hash.slice(13, 16), \"-\").concat(hash.slice(16, 20), \"-\").concat(hash.slice(20, 32));\n        _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.info('[DashboardClient] Generated fallback tenant ID from user ID:', uuid);\n        return uuid;\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"DashboardClient.useEffect\": ()=>{\n            const verifyCognitoState = {\n                \"DashboardClient.useEffect.verifyCognitoState\": async ()=>{\n                    setIsVerifyingTenant(true);\n                    try {\n                        // Always try to load from local storage first\n                        let userId = null;\n                        try {\n                            var _session_tokens_idToken, _session_tokens;\n                            // Check Cognito identity\n                            const session = await (0,_aws_amplify_auth__WEBPACK_IMPORTED_MODULE_10__.fetchAuthSession)();\n                            const identityToken = session === null || session === void 0 ? void 0 : (_session_tokens = session.tokens) === null || _session_tokens === void 0 ? void 0 : (_session_tokens_idToken = _session_tokens.idToken) === null || _session_tokens_idToken === void 0 ? void 0 : _session_tokens_idToken.toString();\n                            if (identityToken) {\n                                const idTokenPayload = session.tokens.idToken;\n                                userId = idTokenPayload.payload.sub;\n                                if (userId) {\n                                    // Store user ID in local storage\n                                    localStorage.setItem('userId', userId);\n                                    // Generate tenant ID if needed\n                                    const tenantId = localStorage.getItem('tenantId') || generateDeterministicTenantId(userId);\n                                    if (tenantId) {\n                                        localStorage.setItem('tenantId', tenantId);\n                                    }\n                                    setIsAuthenticated(true);\n                                    setTenantVerified(true);\n                                    setIsVerifyingTenant(false);\n                                    setSetupStatus('success');\n                                    return;\n                                }\n                            }\n                        } catch (e) {\n                            _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error('[DashboardClient] Error fetching Cognito session:', e);\n                        // Continue to fallback mechanisms\n                        }\n                        // If we couldn't get from Cognito, try localStorage\n                        userId = localStorage.getItem('userId');\n                        const tenantId = localStorage.getItem('tenantId');\n                        if (userId && tenantId) {\n                            setTenantVerified(true);\n                            setIsVerifyingTenant(false);\n                            setSetupStatus('success');\n                            return;\n                        }\n                        // If we get here, we failed to verify the tenant\n                        setTenantVerified(false);\n                        setIsVerifyingTenant(false);\n                        setSetupStatus('failed');\n                        setError('Unable to verify tenant ID. Please try refreshing the page or signing in again.');\n                    } catch (error) {\n                        _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error('[DashboardClient] Error verifying tenant:', error);\n                        setTenantVerified(false);\n                        setIsVerifyingTenant(false);\n                        setSetupStatus('failed');\n                        setError('An unexpected error occurred. Please try again later.');\n                    }\n                }\n            }[\"DashboardClient.useEffect.verifyCognitoState\"];\n            verifyCognitoState();\n        }\n    }[\"DashboardClient.useEffect\"], []);\n    // Function to fix tenant schema issues in AWS RDS\n    const setupAwsRdsTables = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"DashboardClient.useCallback[setupAwsRdsTables]\": async (tenantId)=>{\n            if (!tenantId) {\n                console.error('[DashboardClient] Cannot set up tables: No tenant ID provided');\n                return {\n                    success: false,\n                    error: 'No tenant ID provided'\n                };\n            }\n            try {\n                console.log(\"[DashboardClient] Setting up AWS RDS tables for tenant: \".concat(tenantId));\n                // Create the schema first\n                const schemaName = \"tenant_\".concat(tenantId.replace(/-/g, '_'));\n                // Call our AWS RDS table creation endpoint\n                const response = await fetch(\"/api/db/create-aws-tables\");\n                if (response.ok) {\n                    const data = await response.json();\n                    console.log('[DashboardClient] AWS RDS table setup complete:', data);\n                    return {\n                        success: true,\n                        data\n                    };\n                } else {\n                    const errorData = await response.json();\n                    console.error('[DashboardClient] Failed to set up AWS RDS tables:', errorData);\n                    return {\n                        success: false,\n                        error: errorData\n                    };\n                }\n            } catch (error) {\n                console.error('[DashboardClient] Error setting up AWS RDS tables:', error.message);\n                return {\n                    success: false,\n                    error: error.message\n                };\n            }\n        }\n    }[\"DashboardClient.useCallback[setupAwsRdsTables]\"], []);\n    // Initialize database and ensure tables exist\n    const initializeDatabase = async ()=>{\n        try {\n            console.log('[DashboardClient] Initializing database connection to AWS RDS');\n            // Get tenant ID from localStorage or cookies\n            const localStorageTenantId = localStorage.getItem('tenantId');\n            const cookieTenantId = (()=>{\n                const value = \"; \".concat(document.cookie);\n                const parts = value.split(\"; tenantId=\");\n                if (parts.length === 2) return parts.pop().split(';').shift();\n                return null;\n            })();\n            const tenantId = localStorageTenantId || cookieTenantId;\n            if (!tenantId) {\n                console.warn('[DashboardClient] No tenant ID found for database initialization, skipping table setup');\n                return;\n            }\n            // Set up AWS RDS tables with the tenant ID\n            const result = await setupAwsRdsTables(tenantId);\n            if (result.success) {\n                console.log('[DashboardClient] AWS RDS tables set up successfully');\n            } else {\n                console.warn('[DashboardClient] AWS RDS table setup issues:', result.error);\n            }\n        } catch (error) {\n            console.error('[DashboardClient] Error initializing AWS RDS:', error);\n        }\n    };\n    // This ensures we're only rendering on the client\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"DashboardClient.useEffect\": ()=>{\n            setIsClient(true);\n            // Run database initialization immediately with AWS RDS\n            initializeDatabase();\n            // Ensure consistent tenant ID on initialization\n            const ensureConsistentTenantId = {\n                \"DashboardClient.useEffect.ensureConsistentTenantId\": async ()=>{\n                    try {\n                        // Check various sources\n                        const localStorageTenantId = localStorage.getItem('tenantId');\n                        const cookieTenantId = ({\n                            \"DashboardClient.useEffect.ensureConsistentTenantId.cookieTenantId\": ()=>{\n                                const value = \"; \".concat(document.cookie);\n                                const parts = value.split(\"; tenantId=\");\n                                if (parts.length === 2) return parts.pop().split(';').shift();\n                                return null;\n                            }\n                        })[\"DashboardClient.useEffect.ensureConsistentTenantId.cookieTenantId\"]();\n                        // If we have inconsistent IDs or none at all, fetch from the server\n                        if (!localStorageTenantId || !cookieTenantId || localStorageTenantId !== cookieTenantId) {\n                            console.log('[DashboardClient] Tenant ID inconsistency detected, fetching from server');\n                            try {\n                                // Request the tenant ID from the server based on the authenticated user\n                                const response = await fetch('/api/user/tenant', {\n                                    method: 'GET',\n                                    headers: {\n                                        'Content-Type': 'application/json'\n                                    }\n                                });\n                                if (response.ok) {\n                                    const data = await response.json();\n                                    if (data.tenantId) {\n                                        console.log('[DashboardClient] Retrieved tenant ID from server:', data.tenantId);\n                                        localStorage.setItem('tenantId', data.tenantId);\n                                        document.cookie = \"tenantId=\".concat(data.tenantId, \"; path=/; max-age=\").concat(60 * 60 * 24 * 30, \"; samesite=lax\");\n                                        // Set up AWS RDS tables for this tenant\n                                        await setupAwsRdsTables(data.tenantId);\n                                        // Also store the source for debugging\n                                        if (data.source) {\n                                            console.log('[DashboardClient] Tenant ID source:', data.source);\n                                        }\n                                    } else {\n                                        // If server doesn't have a tenant ID for this user, get from Cognito\n                                        try {\n                                            const userAttributes = await (0,_aws_amplify_auth__WEBPACK_IMPORTED_MODULE_11__.fetchUserAttributes)();\n                                            const cognitoTenantId = userAttributes['custom:businessid'];\n                                            if (cognitoTenantId) {\n                                                console.log('[DashboardClient] Using tenant ID from Cognito:', cognitoTenantId);\n                                                localStorage.setItem('tenantId', cognitoTenantId);\n                                                document.cookie = \"tenantId=\".concat(cognitoTenantId, \"; path=/; max-age=\").concat(60 * 60 * 24 * 30, \"; samesite=lax\");\n                                                // Set up AWS RDS tables for this tenant\n                                                await setupAwsRdsTables(cognitoTenantId);\n                                                // Ensure tenant record exists in database and update server\n                                                try {\n                                                    // Also update the tenant API\n                                                    await fetch('/api/user/tenant', {\n                                                        method: 'POST',\n                                                        headers: {\n                                                            'Content-Type': 'application/json'\n                                                        },\n                                                        body: JSON.stringify({\n                                                            tenantId: cognitoTenantId\n                                                        })\n                                                    });\n                                                    console.log('[DashboardClient] Updated server with Cognito tenant ID');\n                                                } catch (updateError) {\n                                                    console.warn('[DashboardClient] Failed to update server with tenant ID:', updateError);\n                                                }\n                                            } else {\n                                                // ONLY CREATE NEW TENANT IF EXPLICITLY REQUESTED\n                                                // Check if we're in a new account flow that actually requires a new tenant\n                                                if (newAccount === true) {\n                                                    // Generate a deterministic UUID based on user ID if possible\n                                                    // This ensures the same user always gets the same tenant ID\n                                                    try {\n                                                        // Generate a deterministic UUID based on user sub\n                                                        const userId = userAttributes.sub;\n                                                        const { v5: uuidv5 } = __webpack_require__(/*! uuid */ \"(app-pages-browser)/./node_modules/uuid/dist/commonjs-browser/index.js\");\n                                                        const TENANT_NAMESPACE = '9a551c44-4ade-4f89-b078-0af8be794c23';\n                                                        const deterministicTenantId = uuidv5(userId, TENANT_NAMESPACE);\n                                                        console.log('[DashboardClient] Generated deterministic tenant ID from user ID:', deterministicTenantId);\n                                                        localStorage.setItem('tenantId', deterministicTenantId);\n                                                        document.cookie = \"tenantId=\".concat(deterministicTenantId, \"; path=/; max-age=\").concat(60 * 60 * 24 * 30, \"; samesite=lax\");\n                                                        // Use the schema manager to ensure tables and schema exist\n                                                        await ensureTenantSchema(deterministicTenantId, userAttributes);\n                                                    } catch (uuidError) {\n                                                        // If deterministic generation fails, fall back to random UUID as absolute last resort\n                                                        const newTenantId = crypto.randomUUID();\n                                                        console.warn('[DashboardClient] UUID error, generated random tenant ID as last resort:', newTenantId);\n                                                        localStorage.setItem('tenantId', newTenantId);\n                                                        document.cookie = \"tenantId=\".concat(newTenantId, \"; path=/; max-age=\").concat(60 * 60 * 24 * 30, \"; samesite=lax\");\n                                                        // Use the schema manager to ensure tables and schema exist\n                                                        await ensureTenantSchema(newTenantId, userAttributes);\n                                                    }\n                                                    // Ensure tenant exists in database and update server\n                                                    try {\n                                                        // Get the final tenant ID (from either deterministicTenantId or newTenantId)\n                                                        const finalTenantId = localStorage.getItem('tenantId');\n                                                        // Initialize the database environment first\n                                                        try {\n                                                            const initResponse = await fetch('/api/tenant/init-db-env');\n                                                            if (initResponse.ok) {\n                                                                try {\n                                                                    const initData = await initResponse.json();\n                                                                    console.log('[DashboardClient] Database environment initialization:', initData.success ? 'successful' : 'failed', 'Table exists:', initData.tableExists);\n                                                                } catch (jsonError) {\n                                                                    console.error('[DashboardClient] Failed to parse init-db-env response:', jsonError);\n                                                                // Continue with the process despite parsing error\n                                                                }\n                                                            }\n                                                        } catch (initError) {\n                                                            console.warn('[DashboardClient] Error initializing database environment:', initError.message);\n                                                        // Continue anyway since ensure-db-record has its own initialization\n                                                        }\n                                                        // Now ensure the tenant record exists in the database\n                                                        const tenantResponse = await fetch('/api/tenant/ensure-db-record', {\n                                                            method: 'POST',\n                                                            headers: {\n                                                                'Content-Type': 'application/json'\n                                                            },\n                                                            body: JSON.stringify({\n                                                                tenantId: finalTenantId,\n                                                                userId: userAttributes.sub,\n                                                                email: userAttributes.email,\n                                                                businessName: userAttributes['custom:businessname'],\n                                                                forceCreate: true\n                                                            })\n                                                        });\n                                                        if (tenantResponse.ok) {\n                                                            try {\n                                                                const tenantData = await tenantResponse.json();\n                                                                console.log('[DashboardClient] Generated tenant ID saved to database:', tenantData);\n                                                            } catch (jsonError) {\n                                                                console.error('[DashboardClient] Failed to parse tenant response:', jsonError);\n                                                            // Continue despite parsing error\n                                                            }\n                                                        } else {\n                                                            try {\n                                                                const errorText = await tenantResponse.text();\n                                                                console.warn('[DashboardClient] Failed to save generated tenant ID to database:', errorText);\n                                                            } catch (textError) {\n                                                                console.warn('[DashboardClient] Failed to save generated tenant ID to database. Status:', tenantResponse.status);\n                                                            }\n                                                        }\n                                                        // Also update the tenant API\n                                                        await fetch('/api/user/tenant', {\n                                                            method: 'POST',\n                                                            headers: {\n                                                                'Content-Type': 'application/json'\n                                                            },\n                                                            body: JSON.stringify({\n                                                                tenantId: finalTenantId\n                                                            })\n                                                        });\n                                                        console.log('[DashboardClient] Updated server with generated tenant ID');\n                                                    } catch (updateError) {\n                                                        console.warn('[DashboardClient] Failed to update server with tenant ID:', updateError);\n                                                    }\n                                                } else {\n                                                    console.log('[DashboardClient] No tenant ID found, but new account flow not detected. Not creating a new tenant.');\n                                                    notifyWarning('Unable to determine your organization information. Please log out and log back in.');\n                                                }\n                                            }\n                                        } catch (cognitoError) {\n                                            console.error('[DashboardClient] Error fetching Cognito attributes:', cognitoError);\n                                        }\n                                    }\n                                } else {\n                                    // If API request fails, fall back to Cognito\n                                    console.warn('[DashboardClient] Tenant API request failed, falling back to Cognito');\n                                    try {\n                                        const userAttributes = await (0,_aws_amplify_auth__WEBPACK_IMPORTED_MODULE_11__.fetchUserAttributes)();\n                                        const cognitoTenantId = userAttributes['custom:businessid'];\n                                        if (cognitoTenantId) {\n                                            console.log('[DashboardClient] Using tenant ID from Cognito after API failure:', cognitoTenantId);\n                                            localStorage.setItem('tenantId', cognitoTenantId);\n                                            document.cookie = \"tenantId=\".concat(cognitoTenantId, \"; path=/; max-age=\").concat(60 * 60 * 24 * 30, \"; samesite=lax\");\n                                        } else {\n                                            // Generate a deterministic UUID based on user ID if available\n                                            try {\n                                                const userId = userAttributes.sub;\n                                                if (userId) {\n                                                    const { v5: uuidv5 } = __webpack_require__(/*! uuid */ \"(app-pages-browser)/./node_modules/uuid/dist/commonjs-browser/index.js\");\n                                                    const TENANT_NAMESPACE = '9a551c44-4ade-4f89-b078-0af8be794c23';\n                                                    const generatedTenantId = uuidv5(userId, TENANT_NAMESPACE);\n                                                    console.log('[DashboardClient] Generated deterministic tenant ID from user ID:', generatedTenantId);\n                                                    localStorage.setItem('tenantId', generatedTenantId);\n                                                    document.cookie = \"tenantId=\".concat(generatedTenantId, \"; path=/; max-age=\").concat(60 * 60 * 24 * 30, \"; samesite=lax\");\n                                                } else {\n                                                    // Random UUID as absolute last resort\n                                                    const newTenantId = crypto.randomUUID();\n                                                    console.warn('[DashboardClient] No user ID available, using random UUID:', newTenantId);\n                                                    localStorage.setItem('tenantId', newTenantId);\n                                                    document.cookie = \"tenantId=\".concat(newTenantId, \"; path=/; max-age=\").concat(60 * 60 * 24 * 30, \"; samesite=lax\");\n                                                }\n                                            } catch (uuidError) {\n                                                // If UUID generation fails, use simple random UUID\n                                                const newTenantId = crypto.randomUUID();\n                                                console.error('[DashboardClient] UUID generation error, using random UUID:', newTenantId);\n                                                localStorage.setItem('tenantId', newTenantId);\n                                                document.cookie = \"tenantId=\".concat(newTenantId, \"; path=/; max-age=\").concat(60 * 60 * 24 * 30, \"; samesite=lax\");\n                                            }\n                                        }\n                                    } catch (cognitoError) {\n                                        console.error('[DashboardClient] Error fetching Cognito attributes after API failure:', cognitoError);\n                                        // Ultimate fallback - generate random UUID\n                                        const newTenantId = crypto.randomUUID();\n                                        console.warn('[DashboardClient] All tenant ID sources failed, using random UUID:', newTenantId);\n                                        localStorage.setItem('tenantId', newTenantId);\n                                        document.cookie = \"tenantId=\".concat(newTenantId, \"; path=/; max-age=\").concat(60 * 60 * 24 * 30, \"; samesite=lax\");\n                                    }\n                                }\n                            } catch (fetchError) {\n                                console.error('[DashboardClient] Error fetching tenant ID from server:', fetchError);\n                            }\n                        }\n                    } catch (e) {\n                        // Log but don't throw errors\n                        console.error('[DashboardClient] Error ensuring consistent tenant ID:', e);\n                    }\n                }\n            }[\"DashboardClient.useEffect.ensureConsistentTenantId\"];\n            // Run the consistency check\n            ensureConsistentTenantId();\n            // First check if user is authenticated by fetching Cognito attributes\n            const checkOnboardingStatus = {\n                \"DashboardClient.useEffect.checkOnboardingStatus\": async ()=>{\n                    try {\n                        var _session_tokens;\n                        console.log('[DashboardClient] Starting authentication and onboarding status check');\n                        // First check if we have a valid auth session\n                        const session = await (0,_aws_amplify_auth__WEBPACK_IMPORTED_MODULE_10__.fetchAuthSession)();\n                        if (!(session === null || session === void 0 ? void 0 : (_session_tokens = session.tokens) === null || _session_tokens === void 0 ? void 0 : _session_tokens.accessToken)) {\n                            console.warn('[DashboardClient] No valid auth session found, will redirect to sign-in');\n                            // Add delay to see logs before redirect\n                            await new Promise({\n                                \"DashboardClient.useEffect.checkOnboardingStatus\": (resolve)=>setTimeout(resolve, 1000)\n                            }[\"DashboardClient.useEffect.checkOnboardingStatus\"]);\n                            router.push('/auth/signin');\n                            return;\n                        }\n                        // User has valid session, set authenticated\n                        setIsAuthenticated(true);\n                        // Get user attributes to check onboarding status\n                        try {\n                            var _userAttributes_customonboarding, _userAttributes_customsetupdone;\n                            const userAttributes = await (0,_aws_amplify_auth__WEBPACK_IMPORTED_MODULE_11__.fetchUserAttributes)();\n                            // Store user attributes in state\n                            setUserData(userAttributes);\n                            console.log('[DashboardClient] User attributes fetched:', {\n                                hasBusinessId: !!userAttributes['custom:businessid'],\n                                hasBusinessName: !!userAttributes['custom:businessname'],\n                                onboardingStatus: userAttributes['custom:onboarding'],\n                                setupDone: userAttributes['custom:setupdone']\n                            });\n                            // ENHANCED CHECK: If user has completed onboarding according to Cognito, we're good\n                            if (((_userAttributes_customonboarding = userAttributes['custom:onboarding']) === null || _userAttributes_customonboarding === void 0 ? void 0 : _userAttributes_customonboarding.toLowerCase()) === 'complete' || ((_userAttributes_customsetupdone = userAttributes['custom:setupdone']) === null || _userAttributes_customsetupdone === void 0 ? void 0 : _userAttributes_customsetupdone.toLowerCase()) === 'true') {\n                                console.log('[DashboardClient] User has completed onboarding, showing dashboard');\n                                // Check for tenant ID to ensure RLS works properly\n                                if (!userAttributes['custom:businessid']) {\n                                    console.warn('[DashboardClient] Missing tenant ID in Cognito, will generate one for RLS');\n                                    // Generate a deterministic UUID from user ID to ensure consistency\n                                    try {\n                                        const { v5: uuidv5 } = __webpack_require__(/*! uuid */ \"(app-pages-browser)/./node_modules/uuid/dist/commonjs-browser/index.js\");\n                                        const TENANT_NAMESPACE = '9a551c44-4ade-4f89-b078-0af8be794c23';\n                                        const generatedTenantId = uuidv5(userAttributes.sub, TENANT_NAMESPACE);\n                                        // Add this to the attributes that need updating\n                                        userAttributes['custom:businessid'] = generatedTenantId;\n                                        localStorage.setItem('tenantId', generatedTenantId);\n                                        document.cookie = \"tenantId=\".concat(generatedTenantId, \"; path=/; max-age=\").concat(60 * 60 * 24 * 30, \"; samesite=lax\");\n                                        console.log('[DashboardClient] Generated tenant ID for RLS:', generatedTenantId);\n                                    } catch (e) {\n                                        console.error('[DashboardClient] Error generating tenant ID:', e);\n                                    }\n                                }\n                                // Fix any missing attributes in the background\n                                ensureUserAttributesComplete(session, userAttributes).then({\n                                    \"DashboardClient.useEffect.checkOnboardingStatus\": (result)=>console.debug('[DashboardClient] Attribute check result:', result)\n                                }[\"DashboardClient.useEffect.checkOnboardingStatus\"]).catch({\n                                    \"DashboardClient.useEffect.checkOnboardingStatus\": (err)=>console.error('[DashboardClient] Background attribute check error:', err)\n                                }[\"DashboardClient.useEffect.checkOnboardingStatus\"]);\n                                setIsReady(true);\n                                return;\n                            }\n                        } catch (attrError) {\n                            console.warn('[DashboardClient] Error fetching user attributes, using cookies as fallback:', attrError);\n                            // Even if we can't get attributes, we can use cookies\n                            const getCookie = {\n                                \"DashboardClient.useEffect.checkOnboardingStatus.getCookie\": (name)=>{\n                                    const value = \"; \".concat(document.cookie);\n                                    const parts = value.split(\"; \".concat(name, \"=\"));\n                                    if (parts.length === 2) return parts.pop().split(';').shift();\n                                    return null;\n                                }\n                            }[\"DashboardClient.useEffect.checkOnboardingStatus.getCookie\"];\n                            // Check cookies for onboarding status\n                            const onboardingStatus = getCookie('onboardedStatus') || getCookie('onboardingStatus');\n                            const setupCompleted = getCookie('setupCompleted') || getCookie('setupDone');\n                            if (onboardingStatus === 'complete' || setupCompleted === 'true') {\n                                console.log('[DashboardClient] Cookies indicate onboarding is complete, showing dashboard');\n                                setIsReady(true);\n                                return;\n                            }\n                        }\n                        // Set isReady true even if we don't have attributes or cookies\n                        // The DashboardWrapper will handle further verification\n                        console.log('[DashboardClient] Proceeding to dashboard, DashboardWrapper will handle verification');\n                        setIsReady(true);\n                    } catch (error) {\n                        // Log error and redirect\n                        console.error('[DashboardClient] Error checking auth status:', error);\n                        router.push('/auth/signin?returnUrl=' + encodeURIComponent('/dashboard'));\n                    }\n                }\n            }[\"DashboardClient.useEffect.checkOnboardingStatus\"];\n            // Run the check but set a timeout to prevent infinite loading\n            checkOnboardingStatus();\n            // Set a timeout to ensure we don't get stuck in a loading state\n            const timeout = setTimeout({\n                \"DashboardClient.useEffect.timeout\": ()=>{\n                    if (!isReady) {\n                        console.log('⚠️ Dashboard loading timeout - forcing ready state');\n                        setIsReady(true);\n                    }\n                }\n            }[\"DashboardClient.useEffect.timeout\"], 5000);\n            return ({\n                \"DashboardClient.useEffect\": ()=>clearTimeout(timeout)\n            })[\"DashboardClient.useEffect\"];\n        }\n    }[\"DashboardClient.useEffect\"], [\n        router\n    ]);\n    // Function to refresh user data\n    const refreshUserData = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"DashboardClient.useCallback[refreshUserData]\": async ()=>{\n            if (!isAuthenticated) return;\n            try {\n                console.log('[DashboardClient] Refreshing user data');\n                const userAttributes = await (0,_aws_amplify_auth__WEBPACK_IMPORTED_MODULE_11__.fetchUserAttributes)();\n                setUserData(userAttributes);\n                return userAttributes;\n            } catch (error) {\n                console.error('[DashboardClient] Error refreshing user data:', error);\n                return null;\n            }\n        }\n    }[\"DashboardClient.useCallback[refreshUserData]\"], [\n        isAuthenticated\n    ]);\n    // Helper function to handle subscription success\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"DashboardClient.useEffect\": ()=>{\n            const handleSubscriptionSuccess = {\n                \"DashboardClient.useEffect.handleSubscriptionSuccess\": async ()=>{\n                    const subscriptionSuccess = searchParams.get('subscription_success');\n                    const sessionId = searchParams.get('session_id');\n                    if (subscriptionSuccess === 'true' && sessionId) {\n                        console.log(\"[Subscription] Processing successful subscription with session ID: \".concat(sessionId));\n                        try {\n                            // Call our session-success API to verify and process the subscription\n                            const response = await fetch('/api/checkout/session-success', {\n                                method: 'POST',\n                                headers: {\n                                    'Content-Type': 'application/json'\n                                },\n                                body: JSON.stringify({\n                                    session_id: sessionId\n                                })\n                            });\n                            if (response.ok) {\n                                const data = await response.json();\n                                console.log('[Subscription] Successfully processed checkout session:', data);\n                                notifySuccess('Subscription successfully upgraded!');\n                                // Refresh user data to get the updated subscription status\n                                await refreshUserData();\n                                // Clean the URL by removing query parameters\n                                const url = new URL(window.location.href);\n                                url.searchParams.delete('subscription_success');\n                                url.searchParams.delete('session_id');\n                                window.history.replaceState({}, document.title, url.toString());\n                            } else {\n                                const errorData = await response.json();\n                                console.error('[Subscription] Failed to process checkout session:', errorData);\n                                notifyError('Failed to verify subscription. Please contact support.');\n                            }\n                        } catch (error) {\n                            console.error('[Subscription] Error processing subscription:', error);\n                            notifyError('An error occurred while processing your subscription.');\n                        }\n                    }\n                }\n            }[\"DashboardClient.useEffect.handleSubscriptionSuccess\"];\n            // Only run if authenticated\n            if (isAuthenticated) {\n                handleSubscriptionSuccess();\n            }\n        }\n    }[\"DashboardClient.useEffect\"], [\n        searchParams,\n        isAuthenticated,\n        notifySuccess,\n        notifyError\n    ]);\n    // Update loading state based on data availability\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"DashboardClient.useEffect\": ()=>{\n            // Set loading to false only when we have real data\n            if (userData && Object.keys(userData).length > 0 && tenantVerified) {\n                setIsLoading(false);\n            }\n        }\n    }[\"DashboardClient.useEffect\"], [\n        userData,\n        tenantVerified\n    ]);\n    // Show loading state if still loading tenant or user data\n    if (isLoading || isVerifyingTenant || !tenantVerified) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(DashboardLoadingState, {}, void 0, false, {\n            fileName: \"/Users/kuoldeng/projectx/frontend/pyfactor_next/src/app/dashboard/DashboardClient.js\",\n            lineNumber: 1134,\n            columnNumber: 12\n        }, this);\n    }\n    // Show error state if there's an error\n    if (error || setupStatus === 'failed') {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(DashboardErrorState, {}, void 0, false, {\n            fileName: \"/Users/kuoldeng/projectx/frontend/pyfactor_next/src/app/dashboard/DashboardClient.js\",\n            lineNumber: 1139,\n            columnNumber: 12\n        }, this);\n    }\n    // Don't show the dashboard until we have actual userData\n    if (!userData || Object.keys(userData).length === 0) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(DashboardLoadingState, {}, void 0, false, {\n            fileName: \"/Users/kuoldeng/projectx/frontend/pyfactor_next/src/app/dashboard/DashboardClient.js\",\n            lineNumber: 1144,\n            columnNumber: 12\n        }, this);\n    }\n    if (!isClient) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_DashboardWrapper__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n            newAccount: (userData === null || userData === void 0 ? void 0 : userData['custom:isNew']) === 'true' || newAccount === 'true',\n            plan: plan || (userData === null || userData === void 0 ? void 0 : userData['custom:plan'])\n        }, void 0, false, {\n            fileName: \"/Users/kuoldeng/projectx/frontend/pyfactor_next/src/app/dashboard/DashboardClient.js\",\n            lineNumber: 1148,\n            columnNumber: 12\n        }, this);\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            (userData === null || userData === void 0 ? void 0 : userData['custom:isadmin']) === 'true' && isAuthenticated && searchParams.get('admin') === 'true' && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"min-h-screen\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(DatabaseAdmin, {}, void 0, false, {\n                    fileName: \"/Users/kuoldeng/projectx/frontend/pyfactor_next/src/app/dashboard/DashboardClient.js\",\n                    lineNumber: 1159,\n                    columnNumber: 11\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/kuoldeng/projectx/frontend/pyfactor_next/src/app/dashboard/DashboardClient.js\",\n                lineNumber: 1158,\n                columnNumber: 9\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_DashboardWrapper__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                newAccount: (userData === null || userData === void 0 ? void 0 : userData['custom:isNew']) === 'true' || newAccount === 'true',\n                plan: plan || (userData === null || userData === void 0 ? void 0 : userData['custom:plan'])\n            }, void 0, false, {\n                fileName: \"/Users/kuoldeng/projectx/frontend/pyfactor_next/src/app/dashboard/DashboardClient.js\",\n                lineNumber: 1164,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true);\n}\n_s1(DashboardClient, \"4GYcS5eLiGC+EXuDUQWhbym/mQI=\", false, function() {\n    return [\n        next_navigation__WEBPACK_IMPORTED_MODULE_4__.useRouter,\n        next_navigation__WEBPACK_IMPORTED_MODULE_4__.useSearchParams,\n        _context_NotificationContext__WEBPACK_IMPORTED_MODULE_8__.useNotification\n    ];\n});\n_c2 = DashboardClient;\n/**\n * Ensure the tenant schema exists\n */ const ensureTenantSchema = async (tenantId, userAttributes)=>{\n    try {\n        // Call the schema manager API\n        const schemaManagerResponse = await fetch('/api/tenant/schema-manager', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                tenantId: tenantId,\n                userId: userAttributes.sub,\n                businessName: userAttributes['custom:businessname'],\n                forceCreate: true // Explicitly request tenant creation\n            })\n        });\n        if (schemaManagerResponse.ok) {\n            const schemaResult = await schemaManagerResponse.json();\n            console.log('[DashboardClient] Schema manager result:', schemaResult);\n            // Also update the user API\n            await fetch('/api/user/tenant', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    tenantId: tenantId\n                })\n            });\n            console.log('[DashboardClient] Updated server with tenant ID');\n            return schemaResult;\n        } else {\n            console.error('[DashboardClient] Schema manager API failed:', await schemaManagerResponse.text());\n            return null;\n        }\n    } catch (error) {\n        console.error('[DashboardClient] Error ensuring tenant schema:', error);\n        return null;\n    }\n};\n// Function to validate tenant ID\nconst isValidUUID = (id)=>{\n    if (!id) return false;\n    // Check if it's a valid UUID format\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    return uuidRegex.test(id);\n};\nvar _c, _c1, _c2;\n$RefreshReg$(_c, \"DatabaseAdmin\");\n$RefreshReg$(_c1, \"ClientDataSync\");\n$RefreshReg$(_c2, \"DashboardClient\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/dashboard/DashboardClient.js\n"));

/***/ })

});