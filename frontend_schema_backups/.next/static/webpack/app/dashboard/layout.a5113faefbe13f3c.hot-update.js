"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/layout",{

/***/ "(app-pages-browser)/./src/app/dashboard/DashboardClient.js":
/*!**********************************************!*\
  !*** ./src/app/dashboard/DashboardClient.js ***!
  \**********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClientDataSync: () => (/* binding */ ClientDataSync),\n/* harmony export */   \"default\": () => (/* binding */ DashboardClient)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/../../node_modules/.pnpm/next@15.2.2_@babel+core@7.26.10_react-dom@18.3.1_react@18.3.1/node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../../node_modules/.pnpm/next@15.2.2_@babel+core@7.26.10_react-dom@18.3.1_react@18.3.1/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/utils/logger */ \"(app-pages-browser)/./src/utils/logger.js\");\n/* harmony import */ var _DashboardWrapper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./DashboardWrapper */ \"(app-pages-browser)/./src/app/dashboard/DashboardWrapper.js\");\n/* harmony import */ var next_navigation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/navigation */ \"(app-pages-browser)/../../node_modules/.pnpm/next@15.2.2_@babel+core@7.26.10_react-dom@18.3.1_react@18.3.1/node_modules/next/dist/api/navigation.js\");\n/* harmony import */ var _constants_onboarding__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/constants/onboarding */ \"(app-pages-browser)/./src/constants/onboarding.js\");\n/* harmony import */ var _aws_amplify_auth__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @aws-amplify/auth */ \"(app-pages-browser)/../../node_modules/.pnpm/@aws-amplify+core@6.11.1/node_modules/@aws-amplify/core/dist/esm/singleton/apis/fetchAuthSession.mjs\");\n/* harmony import */ var _aws_amplify_auth__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @aws-amplify/auth */ \"(app-pages-browser)/../../node_modules/.pnpm/@aws-amplify+auth@6.12.1_@aws-amplify+core@6.11.1/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/fetchUserAttributes.mjs\");\n/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dynamic */ \"(app-pages-browser)/../../node_modules/.pnpm/next@15.2.2_@babel+core@7.26.10_react-dom@18.3.1_react@18.3.1/node_modules/next/dist/api/app-dynamic.js\");\n/* harmony import */ var _components_DashboardLoader__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/components/DashboardLoader */ \"(app-pages-browser)/./src/components/DashboardLoader.js\");\n/* harmony import */ var _context_NotificationContext__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @/context/NotificationContext */ \"(app-pages-browser)/./src/context/NotificationContext.js\");\n/* harmony import */ var next_auth_react__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next-auth/react */ \"(app-pages-browser)/../../node_modules/.pnpm/next-auth@4.24.11_next@15.2.2_react-dom@18.3.1_react@18.3.1/node_modules/next-auth/react/index.js\");\n/* harmony import */ var next_auth_react__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(next_auth_react__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! uuid */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/v4.js\");\n/* __next_internal_client_entry_do_not_use__ ClientDataSync,default auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n\n\n\n\n\n\n\n\n\n// Dynamically import DatabaseAdmin component to avoid loading it until needed\nconst DatabaseAdmin = (0,next_dynamic__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(()=>__webpack_require__.e(/*! import() */ \"_app-pages-browser_src_components_DatabaseAdmin_js\").then(__webpack_require__.bind(__webpack_require__, /*! @/components/DatabaseAdmin */ \"(app-pages-browser)/./src/components/DatabaseAdmin.js\")), {\n    loadableGenerated: {\n        modules: [\n            \"app/dashboard/DashboardClient.js -> \" + \"@/components/DatabaseAdmin\"\n        ]\n    },\n    loading: ()=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            children: \"Loading database tools...\"\n        }, void 0, false, {\n            fileName: \"/Users/kuoldeng/projectx/frontend/pyfactor_next/src/app/dashboard/DashboardClient.js\",\n            lineNumber: 18,\n            columnNumber: 18\n        }, undefined),\n    ssr: false\n});\n_c = DatabaseAdmin;\n// Helper function to check if user has entered onboarding data\nfunction checkForUserOnboardingData() {\n    try {\n        // Check localStorage for business info\n        const businessInfo = localStorage.getItem('businessInfo');\n        if (businessInfo) {\n            try {\n                const parsedInfo = JSON.parse(businessInfo);\n                if (parsedInfo.businessName || parsedInfo.businessType) {\n                    return true;\n                }\n            } catch (e) {\n            // Invalid JSON, ignore\n            }\n        }\n        // Check for business name in localStorage directly\n        const businessName = localStorage.getItem('businessName');\n        if (businessName) return true;\n        // Check cookies for business info\n        const cookies = document.cookie.split(';');\n        for (const cookie of cookies){\n            const [name, value] = cookie.trim().split('=');\n            if (name === 'businessName' && value) {\n                return true;\n            }\n        }\n        return false;\n    } catch (e) {\n        return false;\n    }\n}\n// Helper to get business name from user data\nfunction getUserBusinessName() {\n    try {\n        // Try cookies first\n        const getCookie = (name)=>{\n            const value = \"; \".concat(document.cookie);\n            const parts = value.split(\"; \".concat(name, \"=\"));\n            if (parts.length === 2) return parts.pop().split(';').shift();\n            return null;\n        };\n        const cookieName = getCookie('businessName') || getCookie('custom:businessname');\n        if (cookieName) return cookieName;\n        // Then try localStorage\n        if (typeof localStorage !== 'undefined') {\n            try {\n                // Try businessInfo object\n                const storedInfo = localStorage.getItem('businessInfo');\n                if (storedInfo) {\n                    const parsedInfo = JSON.parse(storedInfo);\n                    if (parsedInfo.businessName) return parsedInfo.businessName;\n                }\n                // Try direct key\n                const directName = localStorage.getItem('businessName');\n                if (directName) return directName;\n            } catch (e) {\n            // Ignore localStorage errors\n            }\n        }\n    } catch (e) {\n    // Ignore any errors in this helper\n    }\n    return null;\n}\n// Helper to get business type from user data\nfunction getUserBusinessType() {\n    try {\n        // Try to get from localStorage businessInfo\n        const businessInfo = localStorage.getItem('businessInfo');\n        if (businessInfo) {\n            try {\n                const parsedInfo = JSON.parse(businessInfo);\n                if (parsedInfo.businessType) return parsedInfo.businessType;\n            } catch (e) {\n            // Invalid JSON, continue to other methods\n            }\n        }\n        // Try localStorage direct key\n        return localStorage.getItem('businessType');\n    } catch (e) {\n        return null;\n    }\n}\n// Client data synchronization component\nfunction ClientDataSync() {\n    _s();\n    const [syncComplete, setSyncComplete] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ClientDataSync.useEffect\": ()=>{\n            // Function to sync tenant IDs and other client data\n            const syncClientData = {\n                \"ClientDataSync.useEffect.syncClientData\": async ()=>{\n                    try {\n                        var _document_cookie_split_find, _document_cookie_split_find1;\n                        // Get tenant ID from localStorage or cookies\n                        const tenantId = localStorage.getItem('tenantId') || ((_document_cookie_split_find = document.cookie.split(';').find({\n                            \"ClientDataSync.useEffect.syncClientData\": (c)=>c.trim().startsWith('tenantId=')\n                        }[\"ClientDataSync.useEffect.syncClientData\"])) === null || _document_cookie_split_find === void 0 ? void 0 : _document_cookie_split_find.split('=')[1]) || ((_document_cookie_split_find1 = document.cookie.split(';').find({\n                            \"ClientDataSync.useEffect.syncClientData\": (c)=>c.trim().startsWith('businessid=')\n                        }[\"ClientDataSync.useEffect.syncClientData\"])) === null || _document_cookie_split_find1 === void 0 ? void 0 : _document_cookie_split_find1.split('=')[1]);\n                        // Check if tenant ID is valid\n                        if (tenantId) {\n                            _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.info('[ClientDataSync] Synchronizing tenant ID:', tenantId);\n                            // Make sure tenant ID is consistent in all storage locations\n                            localStorage.setItem('tenantId', tenantId);\n                            document.cookie = \"tenantId=\".concat(tenantId, \"; path=/; max-age=\").concat(60 * 60 * 24 * 30, \"; samesite=lax\");\n                            document.cookie = \"businessid=\".concat(tenantId, \"; path=/; max-age=\").concat(60 * 60 * 24 * 30, \"; samesite=lax\");\n                        }\n                        // Sync tenant IDs to prevent corruption\n                        syncTenantIDs();\n                        // Mark sync as complete\n                        setSyncComplete(true);\n                    } catch (error) {\n                        _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error('[ClientDataSync] Error syncing client data:', error);\n                        // Continue despite errors\n                        setSyncComplete(true);\n                    }\n                }\n            }[\"ClientDataSync.useEffect.syncClientData\"];\n            // Run sync on component mount\n            syncClientData();\n        }\n    }[\"ClientDataSync.useEffect\"], []);\n    // This component doesn't render anything visible\n    return null;\n}\n_s(ClientDataSync, \"9d2rLY7Mk5hO34AeMfmIXUYzN/4=\");\n_c1 = ClientDataSync;\n// Sync tenant IDs in client to prevent corruption\nconst syncTenantIDs = ()=>{\n    try {\n        var _document_cookie_split_find, _document_cookie_split_find1;\n        // Get tenant IDs from different sources\n        const tenantIdCookie = (_document_cookie_split_find = document.cookie.split('; ').find((row)=>row.startsWith('tenantId='))) === null || _document_cookie_split_find === void 0 ? void 0 : _document_cookie_split_find.split('=')[1];\n        const businessIdCookie = (_document_cookie_split_find1 = document.cookie.split('; ').find((row)=>row.startsWith('businessid='))) === null || _document_cookie_split_find1 === void 0 ? void 0 : _document_cookie_split_find1.split('=')[1];\n        const localStorageTenantId = localStorage.getItem('tenantId');\n        console.log('[ClientDataSync] Checking tenant IDs:', {\n            tenantIdCookie,\n            businessIdCookie,\n            localStorageTenantId\n        });\n        // Check if any tenant ID is invalid (corrupted)\n        if (tenantIdCookie && !isValidUUID(tenantIdCookie)) {\n            console.warn('[ClientDataSync] Detected corrupted tenantId cookie:', tenantIdCookie);\n            // Try to use a valid ID from another source\n            const validId = isValidUUID(localStorageTenantId) ? localStorageTenantId : isValidUUID(businessIdCookie) ? businessIdCookie : null;\n            if (validId) {\n                console.log('[ClientDataSync] Using valid tenant ID to replace corrupted cookie:', validId);\n                document.cookie = \"tenantId=\".concat(validId, \"; path=/; max-age=\").concat(60 * 60 * 24 * 30, \"; samesite=lax\");\n                document.cookie = \"businessid=\".concat(validId, \"; path=/; max-age=\").concat(60 * 60 * 24 * 30, \"; samesite=lax\");\n            } else {\n                // If no valid ID found, delete the corrupted cookie\n                console.warn('[ClientDataSync] No valid tenant ID found, clearing corrupted cookie');\n                document.cookie = 'tenantId=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT';\n                document.cookie = 'businessid=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT';\n                // Try to fetch a tenant from server if authenticated\n                fetchTenantFromServer();\n            }\n        }\n        // Ensure consistency between localStorage and cookies if we have a valid ID\n        if (localStorageTenantId && isValidUUID(localStorageTenantId)) {\n            if (!tenantIdCookie || tenantIdCookie !== localStorageTenantId) {\n                console.log('[ClientDataSync] Using local storage tenant ID for cookies:', localStorageTenantId);\n                document.cookie = \"tenantId=\".concat(localStorageTenantId, \"; path=/; max-age=\").concat(60 * 60 * 24 * 30, \"; samesite=lax\");\n                document.cookie = \"businessid=\".concat(localStorageTenantId, \"; path=/; max-age=\").concat(60 * 60 * 24 * 30, \"; samesite=lax\");\n            }\n        } else if (tenantIdCookie && isValidUUID(tenantIdCookie) && (!localStorageTenantId || localStorageTenantId !== tenantIdCookie)) {\n            // If cookie has valid ID but localStorage doesn't, update localStorage\n            console.log('[ClientDataSync] Using cookie tenant ID for localStorage:', tenantIdCookie);\n            localStorage.setItem('tenantId', tenantIdCookie);\n        } else if (!localStorageTenantId && !tenantIdCookie && !businessIdCookie) {\n            // If no tenant ID is found, try to get one from the server\n            fetchTenantFromServer();\n        }\n    } catch (error) {\n        console.error('[ClientDataSync] Error syncing tenant IDs:', error);\n    }\n};\n// Function to fetch a tenant ID from the server\nconst fetchTenantFromServer = async ()=>{\n    try {\n        console.log('[ClientDataSync] Attempting to fetch tenant from server...');\n        // Call getOrCreate endpoint to get or create a tenant\n        const response = await fetch('/api/tenant/getOrCreate', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        });\n        if (!response.ok) {\n            throw new Error(\"Server responded with status: \".concat(response.status));\n        }\n        const data = await response.json();\n        if (data.success && data.tenantId) {\n            console.log('[ClientDataSync] Successfully obtained tenant ID from server:', data.tenantId);\n            // Store the tenant ID in localStorage and cookies\n            localStorage.setItem('tenantId', data.tenantId);\n            document.cookie = \"tenantId=\".concat(data.tenantId, \"; path=/; max-age=\").concat(60 * 60 * 24 * 30, \"; samesite=lax\");\n            document.cookie = \"businessid=\".concat(data.tenantId, \"; path=/; max-age=\").concat(60 * 60 * 24 * 30, \"; samesite=lax\");\n            // Refresh the page to apply the new tenant ID\n            window.location.reload();\n        } else {\n            console.error('[ClientDataSync] Failed to obtain tenant ID from server:', data.message);\n        }\n    } catch (error) {\n        console.error('[ClientDataSync] Error fetching tenant from server:', error);\n    }\n};\nfunction DashboardClient(param) {\n    let { newAccount, plan } = param;\n    _s1();\n    const [isClient, setIsClient] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isReady, setIsReady] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isAuthenticated, setIsAuthenticated] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [userData, setUserData] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const router = (0,next_navigation__WEBPACK_IMPORTED_MODULE_4__.useRouter)();\n    const [isVerifyingTenant, setIsVerifyingTenant] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [tenantVerified, setTenantVerified] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [setupStatus, setSetupStatus] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('pending');\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    // Replace constant logging with first-render-only logging\n    const isFirstRender = react__WEBPACK_IMPORTED_MODULE_1___default().useRef(true);\n    if (isFirstRender.current) {\n        console.log('DashboardClient initial render with props:', {\n            newAccount,\n            plan\n        });\n        isFirstRender.current = false;\n    }\n    // Add searchParams\n    const searchParams = (0,next_navigation__WEBPACK_IMPORTED_MODULE_4__.useSearchParams)();\n    // Add notification context\n    const { notifySuccess, notifyError, notifyWarning } = (0,_context_NotificationContext__WEBPACK_IMPORTED_MODULE_8__.useNotification)();\n    // Dashboard loading component\n    const DashboardLoadingState = ()=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"flex items-center justify-center min-h-screen\",\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"text-center\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500 mx-auto mb-4\"\n                    }, void 0, false, {\n                        fileName: \"/Users/kuoldeng/projectx/frontend/pyfactor_next/src/app/dashboard/DashboardClient.js\",\n                        lineNumber: 286,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                        className: \"text-xl font-semibold mb-2\",\n                        children: \"Loading your dashboard...\"\n                    }, void 0, false, {\n                        fileName: \"/Users/kuoldeng/projectx/frontend/pyfactor_next/src/app/dashboard/DashboardClient.js\",\n                        lineNumber: 287,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        className: \"text-gray-500\",\n                        children: \"Please wait while we retrieve your data.\"\n                    }, void 0, false, {\n                        fileName: \"/Users/kuoldeng/projectx/frontend/pyfactor_next/src/app/dashboard/DashboardClient.js\",\n                        lineNumber: 288,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/kuoldeng/projectx/frontend/pyfactor_next/src/app/dashboard/DashboardClient.js\",\n                lineNumber: 285,\n                columnNumber: 7\n            }, this)\n        }, void 0, false, {\n            fileName: \"/Users/kuoldeng/projectx/frontend/pyfactor_next/src/app/dashboard/DashboardClient.js\",\n            lineNumber: 284,\n            columnNumber: 5\n        }, this);\n    // Dashboard error component\n    const DashboardErrorState = ()=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"flex items-center justify-center min-h-screen\",\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"text-center p-6 bg-red-50 rounded-lg max-w-md\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                        xmlns: \"http://www.w3.org/2000/svg\",\n                        className: \"h-12 w-12 text-red-500 mx-auto mb-4\",\n                        fill: \"none\",\n                        viewBox: \"0 0 24 24\",\n                        stroke: \"currentColor\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                            strokeLinecap: \"round\",\n                            strokeLinejoin: \"round\",\n                            strokeWidth: 2,\n                            d: \"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"\n                        }, void 0, false, {\n                            fileName: \"/Users/kuoldeng/projectx/frontend/pyfactor_next/src/app/dashboard/DashboardClient.js\",\n                            lineNumber: 304,\n                            columnNumber: 11\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"/Users/kuoldeng/projectx/frontend/pyfactor_next/src/app/dashboard/DashboardClient.js\",\n                        lineNumber: 297,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                        className: \"text-xl font-semibold mb-2\",\n                        children: \"Unable to load dashboard\"\n                    }, void 0, false, {\n                        fileName: \"/Users/kuoldeng/projectx/frontend/pyfactor_next/src/app/dashboard/DashboardClient.js\",\n                        lineNumber: 306,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        className: \"text-gray-700 mb-4\",\n                        children: error || \"There was a problem loading your data. Please try again later.\"\n                    }, void 0, false, {\n                        fileName: \"/Users/kuoldeng/projectx/frontend/pyfactor_next/src/app/dashboard/DashboardClient.js\",\n                        lineNumber: 307,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        onClick: ()=>window.location.reload(),\n                        className: \"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors\",\n                        children: \"Retry\"\n                    }, void 0, false, {\n                        fileName: \"/Users/kuoldeng/projectx/frontend/pyfactor_next/src/app/dashboard/DashboardClient.js\",\n                        lineNumber: 308,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/kuoldeng/projectx/frontend/pyfactor_next/src/app/dashboard/DashboardClient.js\",\n                lineNumber: 296,\n                columnNumber: 7\n            }, this)\n        }, void 0, false, {\n            fileName: \"/Users/kuoldeng/projectx/frontend/pyfactor_next/src/app/dashboard/DashboardClient.js\",\n            lineNumber: 295,\n            columnNumber: 5\n        }, this);\n    // Function to fix missing attributes if needed\n    async function ensureUserAttributesComplete(session, userData) {\n        try {\n            // First, validate we have a valid session and tokens\n            if (!session || !session.tokens || !session.tokens.accessToken || !session.tokens.idToken) {\n                _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.warn('[DashboardClient] Missing session or tokens, cannot update attributes');\n                return {\n                    success: false,\n                    error: 'Missing authentication tokens'\n                };\n            }\n            // Validate we have user data\n            if (!userData) {\n                _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.warn('[DashboardClient] No user data provided, cannot check attributes');\n                return {\n                    success: false,\n                    error: 'No user data provided'\n                };\n            }\n            // Check for missing attributes\n            const missingAttributes = [];\n            const requiredAttributes = [\n                'custom:businessid',\n                'custom:businessname',\n                'custom:businesstype',\n                'custom:acctstatus',\n                'custom:onboarding',\n                'custom:setupdone',\n                'custom:created_at',\n                'custom:updated_at'\n            ];\n            // Check which attributes are missing\n            for (const attr of requiredAttributes){\n                if (!userData[attr]) {\n                    missingAttributes.push(attr);\n                }\n            }\n            // If no missing attributes, return\n            if (missingAttributes.length === 0) {\n                return {\n                    success: true,\n                    message: 'All attributes present'\n                };\n            }\n            _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.info('[DashboardClient] Detected missing attributes:', missingAttributes);\n            // Create attributes to update\n            const attributesToUpdate = {};\n            const timestamp = new Date().toISOString();\n            // For each missing attribute, set a default value\n            missingAttributes.forEach((attr)=>{\n                switch(attr){\n                    case 'custom:businessid':\n                        // Try to generate a deterministic ID based on user ID if available\n                        if (userData['custom:businessid']) {\n                            attributesToUpdate[attr] = userData['custom:businessid'];\n                        } else if (userData.sub) {\n                            try {\n                                const { v5: uuidv5 } = __webpack_require__(/*! uuid */ \"(app-pages-browser)/./node_modules/uuid/dist/commonjs-browser/index.js\");\n                                const TENANT_NAMESPACE = '9a551c44-4ade-4f89-b078-0af8be794c23';\n                                attributesToUpdate[attr] = uuidv5(userData.sub, TENANT_NAMESPACE);\n                            } catch (e) {\n                                // Fallback to random UUID only if absolutely necessary\n                                attributesToUpdate[attr] = crypto.randomUUID();\n                            }\n                        } else {\n                            // Last resort fallback\n                            attributesToUpdate[attr] = crypto.randomUUID();\n                        }\n                        break;\n                    case 'custom:businessname':\n                        // Try to get business name from cookies or localStorage\n                        const businessName = getBestBusinessName() || '';\n                        attributesToUpdate[attr] = userData['custom:businessname'] || businessName;\n                        break;\n                    case 'custom:businesstype':\n                        attributesToUpdate[attr] = userData['custom:businesstype'] || 'Other';\n                        break;\n                    case 'custom:acctstatus':\n                        attributesToUpdate[attr] = userData['custom:acctstatus'] || 'ACTIVE';\n                        break;\n                    case 'custom:onboarding':\n                        attributesToUpdate[attr] = userData['custom:onboarding'] || 'complete';\n                        break;\n                    case 'custom:setupdone':\n                        attributesToUpdate[attr] = userData['custom:setupdone'] || 'true';\n                        break;\n                    case 'custom:created_at':\n                        attributesToUpdate[attr] = userData['custom:created_at'] || timestamp;\n                        break;\n                    case 'custom:updated_at':\n                        attributesToUpdate[attr] = timestamp;\n                        break;\n                    default:\n                        break;\n                }\n            });\n            // Helper function to get business name from various sources\n            function getBestBusinessName() {\n                try {\n                    // Try cookies first\n                    const getCookie = (name)=>{\n                        const value = \"; \".concat(document.cookie);\n                        const parts = value.split(\"; \".concat(name, \"=\"));\n                        if (parts.length === 2) return parts.pop().split(';').shift();\n                        return null;\n                    };\n                    const cookieName = getCookie('businessName') || getCookie('custom:businessname');\n                    if (cookieName) return cookieName;\n                    // Then try localStorage\n                    if (typeof localStorage !== 'undefined') {\n                        try {\n                            // Try businessInfo object\n                            const storedInfo = localStorage.getItem('businessInfo');\n                            if (storedInfo) {\n                                const parsedInfo = JSON.parse(storedInfo);\n                                if (parsedInfo.businessName) return parsedInfo.businessName;\n                            }\n                            // Try direct key\n                            const directName = localStorage.getItem('businessName');\n                            if (directName) return directName;\n                        } catch (e) {\n                        // Ignore localStorage errors\n                        }\n                    }\n                } catch (e) {\n                // Ignore any errors in this helper\n                }\n                return null;\n            }\n            // Update the attributes using the API, with error handling for network issues\n            try {\n                const response = await fetch('/api/user/update-attributes', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Authorization': \"Bearer \".concat(session.tokens.accessToken.toString()),\n                        'X-Id-Token': session.tokens.idToken.toString()\n                    },\n                    body: JSON.stringify({\n                        attributes: attributesToUpdate,\n                        forceUpdate: true\n                    })\n                });\n                if (!response.ok) {\n                    const errorText = await response.text().catch(()=>'Unknown error');\n                    _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.warn('[DashboardClient] API returned error:', {\n                        status: response.status,\n                        text: errorText\n                    });\n                    return {\n                        success: false,\n                        error: \"API error: \".concat(response.status, \" \").concat(errorText)\n                    };\n                }\n                _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.info('[DashboardClient] Fixed missing attributes:', attributesToUpdate);\n                return {\n                    success: true,\n                    message: 'Missing attributes fixed',\n                    updatedAttributes: attributesToUpdate\n                };\n            } catch (fetchError) {\n                _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.warn('[DashboardClient] Network error updating attributes:', fetchError);\n                return {\n                    success: false,\n                    error: \"Network error: \".concat(fetchError.message)\n                };\n            }\n        } catch (error) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.warn('[DashboardClient] Error fixing missing attributes:', error);\n            return {\n                success: false,\n                error: error.message\n            };\n        }\n    }\n    // Generate a deterministic tenant ID from the user ID if needed\n    const generateDeterministicTenantId = (userId)=>{\n        try {\n            if (!userId) return null;\n            // Use UUID v5 algorithm for proper deterministic UUID generation\n            // This uses a SHA-1 hash (via subtle crypto) to ensure consistency\n            const encoder = new TextEncoder();\n            const data = encoder.encode(userId);\n            // UUID v5 namespace (using DNS namespace as base)\n            const NAMESPACE = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\n            // Convert namespace to bytes\n            const namespaceBytes = new Uint8Array(16);\n            NAMESPACE.replace(/-/g, '').match(/.{2}/g).map((hex, i)=>{\n                namespaceBytes[i] = parseInt(hex, 16);\n            });\n            // Combine namespace and name\n            const combinedBytes = new Uint8Array(16 + data.length);\n            combinedBytes.set(namespaceBytes);\n            combinedBytes.set(data, 16);\n            // Get hash of combined bytes\n            // In browsers supporting crypto.subtle:\n            if (typeof crypto !== 'undefined' && crypto.subtle) {\n                return crypto.subtle.digest('SHA-1', combinedBytes).then((buffer)=>{\n                    const hashArray = Array.from(new Uint8Array(buffer));\n                    // Format as UUID v5\n                    hashArray[6] = hashArray[6] & 0x0f | 0x50; // Set version to 5\n                    hashArray[8] = hashArray[8] & 0x3f | 0x80; // Set variant\n                    // Convert to hex and format as UUID\n                    const hex = hashArray.map((b)=>b.toString(16).padStart(2, '0')).join('');\n                    const uuid = \"\".concat(hex.slice(0, 8), \"-\").concat(hex.slice(8, 12), \"-\").concat(hex.slice(12, 16), \"-\").concat(hex.slice(16, 20), \"-\").concat(hex.slice(20, 32));\n                    _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.info('[DashboardClient] Generated deterministic UUID v5 tenant ID from user ID:', uuid);\n                    return uuid;\n                }).catch((e)=>{\n                    _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error('[DashboardClient] Error generating UUID v5 tenant ID:', e);\n                    // Fall back to simple hash method if subtle crypto fails\n                    return generateSimpleHashTenantId(userId);\n                });\n            } else {\n                // Fallback for environments without crypto.subtle\n                return generateSimpleHashTenantId(userId);\n            }\n        } catch (e) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error('[DashboardClient] Error generating tenant ID:', e);\n            return null;\n        }\n    };\n    // Fallback method using simple hash for environments without crypto.subtle\n    const generateSimpleHashTenantId = (userId)=>{\n        const hash = Array.from(userId).reduce((acc, char)=>{\n            return (acc << 5) - acc + char.charCodeAt(0) | 0;\n        }, 0).toString(16).padStart(32, '0');\n        // Format as UUID-like string\n        const uuid = \"\".concat(hash.slice(0, 8), \"-\").concat(hash.slice(8, 12), \"-5\").concat(hash.slice(13, 16), \"-\").concat(hash.slice(16, 20), \"-\").concat(hash.slice(20, 32));\n        _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.info('[DashboardClient] Generated fallback tenant ID from user ID:', uuid);\n        return uuid;\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"DashboardClient.useEffect\": ()=>{\n            const verifyCognitoState = {\n                \"DashboardClient.useEffect.verifyCognitoState\": async ()=>{\n                    setIsVerifyingTenant(true);\n                    try {\n                        // Always try to load from local storage first\n                        let userId = null;\n                        try {\n                            var _session_tokens_idToken, _session_tokens;\n                            // Check Cognito identity\n                            const session = await (0,_aws_amplify_auth__WEBPACK_IMPORTED_MODULE_10__.fetchAuthSession)();\n                            const identityToken = session === null || session === void 0 ? void 0 : (_session_tokens = session.tokens) === null || _session_tokens === void 0 ? void 0 : (_session_tokens_idToken = _session_tokens.idToken) === null || _session_tokens_idToken === void 0 ? void 0 : _session_tokens_idToken.toString();\n                            if (identityToken) {\n                                const idTokenPayload = session.tokens.idToken;\n                                userId = idTokenPayload.payload.sub;\n                                if (userId) {\n                                    // Store user ID in local storage\n                                    localStorage.setItem('userId', userId);\n                                    // Generate tenant ID if needed\n                                    const tenantId = localStorage.getItem('tenantId') || generateDeterministicTenantId(userId);\n                                    if (tenantId) {\n                                        localStorage.setItem('tenantId', tenantId);\n                                    }\n                                    setIsAuthenticated(true);\n                                    setTenantVerified(true);\n                                    setIsVerifyingTenant(false);\n                                    setSetupStatus('success');\n                                    return;\n                                }\n                            }\n                        } catch (e) {\n                            _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error('[DashboardClient] Error fetching Cognito session:', e);\n                        // Continue to fallback mechanisms\n                        }\n                        // If we couldn't get from Cognito, try localStorage\n                        userId = localStorage.getItem('userId');\n                        const tenantId = localStorage.getItem('tenantId');\n                        if (userId && tenantId) {\n                            setTenantVerified(true);\n                            setIsVerifyingTenant(false);\n                            setSetupStatus('success');\n                            return;\n                        }\n                        // If we get here, we failed to verify the tenant\n                        setTenantVerified(false);\n                        setIsVerifyingTenant(false);\n                        setSetupStatus('failed');\n                        setError('Unable to verify tenant ID. Please try refreshing the page or signing in again.');\n                    } catch (error) {\n                        _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error('[DashboardClient] Error verifying tenant:', error);\n                        setTenantVerified(false);\n                        setIsVerifyingTenant(false);\n                        setSetupStatus('failed');\n                        setError('An unexpected error occurred. Please try again later.');\n                    }\n                }\n            }[\"DashboardClient.useEffect.verifyCognitoState\"];\n            verifyCognitoState();\n        }\n    }[\"DashboardClient.useEffect\"], []);\n    // Function to fix tenant schema issues in AWS RDS\n    const setupAwsRdsTables = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"DashboardClient.useCallback[setupAwsRdsTables]\": async (tenantId)=>{\n            if (!tenantId) {\n                console.error('[DashboardClient] Cannot set up tables: No tenant ID provided');\n                return {\n                    success: false,\n                    error: 'No tenant ID provided'\n                };\n            }\n            try {\n                console.log(\"[DashboardClient] Setting up AWS RDS tables for tenant: \".concat(tenantId));\n                // Create the schema first\n                const schemaName = \"tenant_\".concat(tenantId.replace(/-/g, '_'));\n                // Call our AWS RDS table creation endpoint\n                const response = await fetch(\"/api/db/create-aws-tables\");\n                if (response.ok) {\n                    const data = await response.json();\n                    console.log('[DashboardClient] AWS RDS table setup complete:', data);\n                    return {\n                        success: true,\n                        data\n                    };\n                } else {\n                    const errorData = await response.json();\n                    console.error('[DashboardClient] Failed to set up AWS RDS tables:', errorData);\n                    return {\n                        success: false,\n                        error: errorData\n                    };\n                }\n            } catch (error) {\n                console.error('[DashboardClient] Error setting up AWS RDS tables:', error.message);\n                return {\n                    success: false,\n                    error: error.message\n                };\n            }\n        }\n    }[\"DashboardClient.useCallback[setupAwsRdsTables]\"], []);\n    // Initialize database and ensure tables exist\n    const initializeDatabase = async ()=>{\n        try {\n            console.log('[DashboardClient] Initializing database connection to AWS RDS');\n            // Get tenant ID from localStorage or cookies\n            const localStorageTenantId = localStorage.getItem('tenantId');\n            const cookieTenantId = (()=>{\n                const value = \"; \".concat(document.cookie);\n                const parts = value.split(\"; tenantId=\");\n                if (parts.length === 2) return parts.pop().split(';').shift();\n                return null;\n            })();\n            const tenantId = localStorageTenantId || cookieTenantId;\n            if (!tenantId) {\n                console.warn('[DashboardClient] No tenant ID found for database initialization, skipping table setup');\n                return;\n            }\n            // Set up AWS RDS tables with the tenant ID\n            const result = await setupAwsRdsTables(tenantId);\n            if (result.success) {\n                console.log('[DashboardClient] AWS RDS tables set up successfully');\n            } else {\n                console.warn('[DashboardClient] AWS RDS table setup issues:', result.error);\n            }\n        } catch (error) {\n            console.error('[DashboardClient] Error initializing AWS RDS:', error);\n        }\n    };\n    // This ensures we're only rendering on the client\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"DashboardClient.useEffect\": ()=>{\n            setIsClient(true);\n            // Run database initialization immediately with AWS RDS\n            initializeDatabase();\n            // Ensure consistent tenant ID on initialization\n            const ensureConsistentTenantId = {\n                \"DashboardClient.useEffect.ensureConsistentTenantId\": async ()=>{\n                    try {\n                        // Check various sources\n                        const localStorageTenantId = localStorage.getItem('tenantId');\n                        const cookieTenantId = ({\n                            \"DashboardClient.useEffect.ensureConsistentTenantId.cookieTenantId\": ()=>{\n                                const value = \"; \".concat(document.cookie);\n                                const parts = value.split(\"; tenantId=\");\n                                if (parts.length === 2) return parts.pop().split(';').shift();\n                                return null;\n                            }\n                        })[\"DashboardClient.useEffect.ensureConsistentTenantId.cookieTenantId\"]();\n                        // If we have inconsistent IDs or none at all, fetch from the server\n                        if (!localStorageTenantId || !cookieTenantId || localStorageTenantId !== cookieTenantId) {\n                            console.log('[DashboardClient] Tenant ID inconsistency detected, fetching from server');\n                            try {\n                                // Request the tenant ID from the server based on the authenticated user\n                                const response = await fetch('/api/user/tenant', {\n                                    method: 'GET',\n                                    headers: {\n                                        'Content-Type': 'application/json'\n                                    }\n                                });\n                                if (response.ok) {\n                                    const data = await response.json();\n                                    if (data.tenantId) {\n                                        console.log('[DashboardClient] Retrieved tenant ID from server:', data.tenantId);\n                                        localStorage.setItem('tenantId', data.tenantId);\n                                        document.cookie = \"tenantId=\".concat(data.tenantId, \"; path=/; max-age=\").concat(60 * 60 * 24 * 30, \"; samesite=lax\");\n                                        // Set up AWS RDS tables for this tenant\n                                        await setupAwsRdsTables(data.tenantId);\n                                        // Also store the source for debugging\n                                        if (data.source) {\n                                            console.log('[DashboardClient] Tenant ID source:', data.source);\n                                        }\n                                    } else {\n                                        // If server doesn't have a tenant ID for this user, get from Cognito\n                                        try {\n                                            const userAttributes = await (0,_aws_amplify_auth__WEBPACK_IMPORTED_MODULE_11__.fetchUserAttributes)();\n                                            const cognitoTenantId = userAttributes['custom:businessid'];\n                                            if (cognitoTenantId) {\n                                                console.log('[DashboardClient] Using tenant ID from Cognito:', cognitoTenantId);\n                                                localStorage.setItem('tenantId', cognitoTenantId);\n                                                document.cookie = \"tenantId=\".concat(cognitoTenantId, \"; path=/; max-age=\").concat(60 * 60 * 24 * 30, \"; samesite=lax\");\n                                                // Set up AWS RDS tables for this tenant\n                                                await setupAwsRdsTables(cognitoTenantId);\n                                                // Ensure tenant record exists in database and update server\n                                                try {\n                                                    // Also update the tenant API\n                                                    await fetch('/api/user/tenant', {\n                                                        method: 'POST',\n                                                        headers: {\n                                                            'Content-Type': 'application/json'\n                                                        },\n                                                        body: JSON.stringify({\n                                                            tenantId: cognitoTenantId\n                                                        })\n                                                    });\n                                                    console.log('[DashboardClient] Updated server with Cognito tenant ID');\n                                                } catch (updateError) {\n                                                    console.warn('[DashboardClient] Failed to update server with tenant ID:', updateError);\n                                                }\n                                            } else {\n                                                // ONLY CREATE NEW TENANT IF EXPLICITLY REQUESTED\n                                                // Check if we're in a new account flow that actually requires a new tenant\n                                                if (newAccount === true) {\n                                                    // Generate a deterministic UUID based on user ID if possible\n                                                    // This ensures the same user always gets the same tenant ID\n                                                    try {\n                                                        // Generate a deterministic UUID based on user sub\n                                                        const userId = userAttributes.sub;\n                                                        const { v5: uuidv5 } = __webpack_require__(/*! uuid */ \"(app-pages-browser)/./node_modules/uuid/dist/commonjs-browser/index.js\");\n                                                        const TENANT_NAMESPACE = '9a551c44-4ade-4f89-b078-0af8be794c23';\n                                                        const deterministicTenantId = uuidv5(userId, TENANT_NAMESPACE);\n                                                        console.log('[DashboardClient] Generated deterministic tenant ID from user ID:', deterministicTenantId);\n                                                        localStorage.setItem('tenantId', deterministicTenantId);\n                                                        document.cookie = \"tenantId=\".concat(deterministicTenantId, \"; path=/; max-age=\").concat(60 * 60 * 24 * 30, \"; samesite=lax\");\n                                                        // Use the schema manager to ensure tables and schema exist\n                                                        await ensureTenantSchema(deterministicTenantId, userAttributes);\n                                                    } catch (uuidError) {\n                                                        // If deterministic generation fails, fall back to random UUID as absolute last resort\n                                                        const newTenantId = crypto.randomUUID();\n                                                        console.warn('[DashboardClient] UUID error, generated random tenant ID as last resort:', newTenantId);\n                                                        localStorage.setItem('tenantId', newTenantId);\n                                                        document.cookie = \"tenantId=\".concat(newTenantId, \"; path=/; max-age=\").concat(60 * 60 * 24 * 30, \"; samesite=lax\");\n                                                        // Use the schema manager to ensure tables and schema exist\n                                                        await ensureTenantSchema(newTenantId, userAttributes);\n                                                    }\n                                                    // Ensure tenant exists in database and update server\n                                                    try {\n                                                        // Get the final tenant ID (from either deterministicTenantId or newTenantId)\n                                                        const finalTenantId = localStorage.getItem('tenantId');\n                                                        // Initialize the database environment first\n                                                        try {\n                                                            const initResponse = await fetch('/api/tenant/init-db-env');\n                                                            if (initResponse.ok) {\n                                                                try {\n                                                                    const initData = await initResponse.json();\n                                                                    console.log('[DashboardClient] Database environment initialization:', initData.success ? 'successful' : 'failed', 'Table exists:', initData.tableExists);\n                                                                } catch (jsonError) {\n                                                                    console.error('[DashboardClient] Failed to parse init-db-env response:', jsonError);\n                                                                // Continue with the process despite parsing error\n                                                                }\n                                                            }\n                                                        } catch (initError) {\n                                                            console.warn('[DashboardClient] Error initializing database environment:', initError.message);\n                                                        // Continue anyway since ensure-db-record has its own initialization\n                                                        }\n                                                        // Now ensure the tenant record exists in the database\n                                                        const tenantResponse = await fetch('/api/tenant/ensure-db-record', {\n                                                            method: 'POST',\n                                                            headers: {\n                                                                'Content-Type': 'application/json'\n                                                            },\n                                                            body: JSON.stringify({\n                                                                tenantId: finalTenantId,\n                                                                userId: userAttributes.sub,\n                                                                email: userAttributes.email,\n                                                                businessName: userAttributes['custom:businessname'],\n                                                                forceCreate: true\n                                                            })\n                                                        });\n                                                        if (tenantResponse.ok) {\n                                                            try {\n                                                                const tenantData = await tenantResponse.json();\n                                                                console.log('[DashboardClient] Generated tenant ID saved to database:', tenantData);\n                                                            } catch (jsonError) {\n                                                                console.error('[DashboardClient] Failed to parse tenant response:', jsonError);\n                                                            // Continue despite parsing error\n                                                            }\n                                                        } else {\n                                                            try {\n                                                                const errorText = await tenantResponse.text();\n                                                                console.warn('[DashboardClient] Failed to save generated tenant ID to database:', errorText);\n                                                            } catch (textError) {\n                                                                console.warn('[DashboardClient] Failed to save generated tenant ID to database. Status:', tenantResponse.status);\n                                                            }\n                                                        }\n                                                        // Also update the tenant API\n                                                        await fetch('/api/user/tenant', {\n                                                            method: 'POST',\n                                                            headers: {\n                                                                'Content-Type': 'application/json'\n                                                            },\n                                                            body: JSON.stringify({\n                                                                tenantId: finalTenantId\n                                                            })\n                                                        });\n                                                        console.log('[DashboardClient] Updated server with generated tenant ID');\n                                                    } catch (updateError) {\n                                                        console.warn('[DashboardClient] Failed to update server with tenant ID:', updateError);\n                                                    }\n                                                } else {\n                                                    console.log('[DashboardClient] No tenant ID found, but new account flow not detected. Not creating a new tenant.');\n                                                    notifyWarning('Unable to determine your organization information. Please log out and log back in.');\n                                                }\n                                            }\n                                        } catch (cognitoError) {\n                                            console.error('[DashboardClient] Error fetching Cognito attributes:', cognitoError);\n                                        }\n                                    }\n                                } else {\n                                    // If API request fails, fall back to Cognito\n                                    console.warn('[DashboardClient] Tenant API request failed, falling back to Cognito');\n                                    try {\n                                        const userAttributes = await (0,_aws_amplify_auth__WEBPACK_IMPORTED_MODULE_11__.fetchUserAttributes)();\n                                        const cognitoTenantId = userAttributes['custom:businessid'];\n                                        if (cognitoTenantId) {\n                                            console.log('[DashboardClient] Using tenant ID from Cognito after API failure:', cognitoTenantId);\n                                            localStorage.setItem('tenantId', cognitoTenantId);\n                                            document.cookie = \"tenantId=\".concat(cognitoTenantId, \"; path=/; max-age=\").concat(60 * 60 * 24 * 30, \"; samesite=lax\");\n                                        } else {\n                                            // Generate a deterministic UUID based on user ID if available\n                                            try {\n                                                const userId = userAttributes.sub;\n                                                if (userId) {\n                                                    const { v5: uuidv5 } = __webpack_require__(/*! uuid */ \"(app-pages-browser)/./node_modules/uuid/dist/commonjs-browser/index.js\");\n                                                    const TENANT_NAMESPACE = '9a551c44-4ade-4f89-b078-0af8be794c23';\n                                                    const generatedTenantId = uuidv5(userId, TENANT_NAMESPACE);\n                                                    console.log('[DashboardClient] Generated deterministic tenant ID from user ID:', generatedTenantId);\n                                                    localStorage.setItem('tenantId', generatedTenantId);\n                                                    document.cookie = \"tenantId=\".concat(generatedTenantId, \"; path=/; max-age=\").concat(60 * 60 * 24 * 30, \"; samesite=lax\");\n                                                } else {\n                                                    // Random UUID as absolute last resort\n                                                    const newTenantId = crypto.randomUUID();\n                                                    console.warn('[DashboardClient] No user ID available, using random UUID:', newTenantId);\n                                                    localStorage.setItem('tenantId', newTenantId);\n                                                    document.cookie = \"tenantId=\".concat(newTenantId, \"; path=/; max-age=\").concat(60 * 60 * 24 * 30, \"; samesite=lax\");\n                                                }\n                                            } catch (uuidError) {\n                                                // If UUID generation fails, use simple random UUID\n                                                const newTenantId = crypto.randomUUID();\n                                                console.error('[DashboardClient] UUID generation error, using random UUID:', newTenantId);\n                                                localStorage.setItem('tenantId', newTenantId);\n                                                document.cookie = \"tenantId=\".concat(newTenantId, \"; path=/; max-age=\").concat(60 * 60 * 24 * 30, \"; samesite=lax\");\n                                            }\n                                        }\n                                    } catch (cognitoError) {\n                                        console.error('[DashboardClient] Error fetching Cognito attributes after API failure:', cognitoError);\n                                        // Ultimate fallback - generate random UUID\n                                        const newTenantId = crypto.randomUUID();\n                                        console.warn('[DashboardClient] All tenant ID sources failed, using random UUID:', newTenantId);\n                                        localStorage.setItem('tenantId', newTenantId);\n                                        document.cookie = \"tenantId=\".concat(newTenantId, \"; path=/; max-age=\").concat(60 * 60 * 24 * 30, \"; samesite=lax\");\n                                    }\n                                }\n                            } catch (fetchError) {\n                                console.error('[DashboardClient] Error fetching tenant ID from server:', fetchError);\n                            }\n                        }\n                    } catch (e) {\n                        // Log but don't throw errors\n                        console.error('[DashboardClient] Error ensuring consistent tenant ID:', e);\n                    }\n                }\n            }[\"DashboardClient.useEffect.ensureConsistentTenantId\"];\n            // Run the consistency check\n            ensureConsistentTenantId();\n            // First check if user is authenticated by fetching Cognito attributes\n            const checkOnboardingStatus = {\n                \"DashboardClient.useEffect.checkOnboardingStatus\": async ()=>{\n                    try {\n                        var _session_tokens;\n                        console.log('[DashboardClient] Starting authentication and onboarding status check');\n                        // First check if we have a valid auth session\n                        const session = await (0,_aws_amplify_auth__WEBPACK_IMPORTED_MODULE_10__.fetchAuthSession)();\n                        if (!(session === null || session === void 0 ? void 0 : (_session_tokens = session.tokens) === null || _session_tokens === void 0 ? void 0 : _session_tokens.accessToken)) {\n                            console.warn('[DashboardClient] No valid auth session found, will redirect to sign-in');\n                            // Add delay to see logs before redirect\n                            await new Promise({\n                                \"DashboardClient.useEffect.checkOnboardingStatus\": (resolve)=>setTimeout(resolve, 1000)\n                            }[\"DashboardClient.useEffect.checkOnboardingStatus\"]);\n                            router.push('/auth/signin');\n                            return;\n                        }\n                        // User has valid session, set authenticated\n                        setIsAuthenticated(true);\n                        // Get user attributes to check onboarding status\n                        try {\n                            var _userAttributes_customonboarding, _userAttributes_customsetupdone;\n                            const userAttributes = await (0,_aws_amplify_auth__WEBPACK_IMPORTED_MODULE_11__.fetchUserAttributes)();\n                            // Store user attributes in state\n                            setUserData(userAttributes);\n                            console.log('[DashboardClient] User attributes fetched:', {\n                                hasBusinessId: !!userAttributes['custom:businessid'],\n                                hasBusinessName: !!userAttributes['custom:businessname'],\n                                onboardingStatus: userAttributes['custom:onboarding'],\n                                setupDone: userAttributes['custom:setupdone']\n                            });\n                            // ENHANCED CHECK: If user has completed onboarding according to Cognito, we're good\n                            if (((_userAttributes_customonboarding = userAttributes['custom:onboarding']) === null || _userAttributes_customonboarding === void 0 ? void 0 : _userAttributes_customonboarding.toLowerCase()) === 'complete' || ((_userAttributes_customsetupdone = userAttributes['custom:setupdone']) === null || _userAttributes_customsetupdone === void 0 ? void 0 : _userAttributes_customsetupdone.toLowerCase()) === 'true') {\n                                console.log('[DashboardClient] User has completed onboarding, showing dashboard');\n                                // Check for tenant ID to ensure RLS works properly\n                                if (!userAttributes['custom:businessid']) {\n                                    console.warn('[DashboardClient] Missing tenant ID in Cognito, will generate one for RLS');\n                                    // Generate a deterministic UUID from user ID to ensure consistency\n                                    try {\n                                        const { v5: uuidv5 } = __webpack_require__(/*! uuid */ \"(app-pages-browser)/./node_modules/uuid/dist/commonjs-browser/index.js\");\n                                        const TENANT_NAMESPACE = '9a551c44-4ade-4f89-b078-0af8be794c23';\n                                        const generatedTenantId = uuidv5(userAttributes.sub, TENANT_NAMESPACE);\n                                        // Add this to the attributes that need updating\n                                        userAttributes['custom:businessid'] = generatedTenantId;\n                                        localStorage.setItem('tenantId', generatedTenantId);\n                                        document.cookie = \"tenantId=\".concat(generatedTenantId, \"; path=/; max-age=\").concat(60 * 60 * 24 * 30, \"; samesite=lax\");\n                                        console.log('[DashboardClient] Generated tenant ID for RLS:', generatedTenantId);\n                                    } catch (e) {\n                                        console.error('[DashboardClient] Error generating tenant ID:', e);\n                                    }\n                                }\n                                // Fix any missing attributes in the background\n                                ensureUserAttributesComplete(session, userAttributes).then({\n                                    \"DashboardClient.useEffect.checkOnboardingStatus\": (result)=>console.debug('[DashboardClient] Attribute check result:', result)\n                                }[\"DashboardClient.useEffect.checkOnboardingStatus\"]).catch({\n                                    \"DashboardClient.useEffect.checkOnboardingStatus\": (err)=>console.error('[DashboardClient] Background attribute check error:', err)\n                                }[\"DashboardClient.useEffect.checkOnboardingStatus\"]);\n                                setIsReady(true);\n                                return;\n                            }\n                        } catch (attrError) {\n                            console.warn('[DashboardClient] Error fetching user attributes, using cookies as fallback:', attrError);\n                            // Even if we can't get attributes, we can use cookies\n                            const getCookie = {\n                                \"DashboardClient.useEffect.checkOnboardingStatus.getCookie\": (name)=>{\n                                    const value = \"; \".concat(document.cookie);\n                                    const parts = value.split(\"; \".concat(name, \"=\"));\n                                    if (parts.length === 2) return parts.pop().split(';').shift();\n                                    return null;\n                                }\n                            }[\"DashboardClient.useEffect.checkOnboardingStatus.getCookie\"];\n                            // Check cookies for onboarding status\n                            const onboardingStatus = getCookie('onboardedStatus') || getCookie('onboardingStatus');\n                            const setupCompleted = getCookie('setupCompleted') || getCookie('setupDone');\n                            if (onboardingStatus === 'complete' || setupCompleted === 'true') {\n                                console.log('[DashboardClient] Cookies indicate onboarding is complete, showing dashboard');\n                                setIsReady(true);\n                                return;\n                            }\n                        }\n                        // Set isReady true even if we don't have attributes or cookies\n                        // The DashboardWrapper will handle further verification\n                        console.log('[DashboardClient] Proceeding to dashboard, DashboardWrapper will handle verification');\n                        setIsReady(true);\n                    } catch (error) {\n                        // Log error and redirect\n                        console.error('[DashboardClient] Error checking auth status:', error);\n                        router.push('/auth/signin?returnUrl=' + encodeURIComponent('/dashboard'));\n                    }\n                }\n            }[\"DashboardClient.useEffect.checkOnboardingStatus\"];\n            // Run the check but set a timeout to prevent infinite loading\n            checkOnboardingStatus();\n            // Set a timeout to ensure we don't get stuck in a loading state\n            const timeout = setTimeout({\n                \"DashboardClient.useEffect.timeout\": ()=>{\n                    if (!isReady) {\n                        console.log('⚠️ Dashboard loading timeout - forcing ready state');\n                        setIsReady(true);\n                    }\n                }\n            }[\"DashboardClient.useEffect.timeout\"], 5000);\n            return ({\n                \"DashboardClient.useEffect\": ()=>clearTimeout(timeout)\n            })[\"DashboardClient.useEffect\"];\n        }\n    }[\"DashboardClient.useEffect\"], [\n        router\n    ]);\n    // Function to refresh user data\n    const refreshUserData = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"DashboardClient.useCallback[refreshUserData]\": async ()=>{\n            if (!isAuthenticated) return;\n            try {\n                console.log('[DashboardClient] Refreshing user data');\n                const userAttributes = await (0,_aws_amplify_auth__WEBPACK_IMPORTED_MODULE_11__.fetchUserAttributes)();\n                setUserData(userAttributes);\n                return userAttributes;\n            } catch (error) {\n                console.error('[DashboardClient] Error refreshing user data:', error);\n                return null;\n            }\n        }\n    }[\"DashboardClient.useCallback[refreshUserData]\"], [\n        isAuthenticated\n    ]);\n    // Helper function to handle subscription success\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"DashboardClient.useEffect\": ()=>{\n            const handleSubscriptionSuccess = {\n                \"DashboardClient.useEffect.handleSubscriptionSuccess\": async ()=>{\n                    const subscriptionSuccess = searchParams.get('subscription_success');\n                    const sessionId = searchParams.get('session_id');\n                    if (subscriptionSuccess === 'true' && sessionId) {\n                        console.log(\"[Subscription] Processing successful subscription with session ID: \".concat(sessionId));\n                        try {\n                            // Call our session-success API to verify and process the subscription\n                            const response = await fetch('/api/checkout/session-success', {\n                                method: 'POST',\n                                headers: {\n                                    'Content-Type': 'application/json'\n                                },\n                                body: JSON.stringify({\n                                    session_id: sessionId\n                                })\n                            });\n                            if (response.ok) {\n                                const data = await response.json();\n                                console.log('[Subscription] Successfully processed checkout session:', data);\n                                notifySuccess('Subscription successfully upgraded!');\n                                // Refresh user data to get the updated subscription status\n                                await refreshUserData();\n                                // Clean the URL by removing query parameters\n                                const url = new URL(window.location.href);\n                                url.searchParams.delete('subscription_success');\n                                url.searchParams.delete('session_id');\n                                window.history.replaceState({}, document.title, url.toString());\n                            } else {\n                                const errorData = await response.json();\n                                console.error('[Subscription] Failed to process checkout session:', errorData);\n                                notifyError('Failed to verify subscription. Please contact support.');\n                            }\n                        } catch (error) {\n                            console.error('[Subscription] Error processing subscription:', error);\n                            notifyError('An error occurred while processing your subscription.');\n                        }\n                    }\n                }\n            }[\"DashboardClient.useEffect.handleSubscriptionSuccess\"];\n            // Only run if authenticated\n            if (isAuthenticated) {\n                handleSubscriptionSuccess();\n            }\n        }\n    }[\"DashboardClient.useEffect\"], [\n        searchParams,\n        isAuthenticated,\n        notifySuccess,\n        notifyError\n    ]);\n    // Update loading state based on data availability\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"DashboardClient.useEffect\": ()=>{\n            // Set loading to false only when we have real data\n            if (userData && Object.keys(userData).length > 0 && tenantVerified) {\n                setIsLoading(false);\n            }\n        }\n    }[\"DashboardClient.useEffect\"], [\n        userData,\n        tenantVerified\n    ]);\n    // Show loading state if still loading tenant or user data\n    if (isLoading || isVerifyingTenant || !tenantVerified) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(DashboardLoadingState, {}, void 0, false, {\n            fileName: \"/Users/kuoldeng/projectx/frontend/pyfactor_next/src/app/dashboard/DashboardClient.js\",\n            lineNumber: 1134,\n            columnNumber: 12\n        }, this);\n    }\n    // Show error state if there's an error\n    if (error || setupStatus === 'failed') {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(DashboardErrorState, {}, void 0, false, {\n            fileName: \"/Users/kuoldeng/projectx/frontend/pyfactor_next/src/app/dashboard/DashboardClient.js\",\n            lineNumber: 1139,\n            columnNumber: 12\n        }, this);\n    }\n    // Don't show the dashboard until we have actual userData\n    if (!userData || Object.keys(userData).length === 0) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(DashboardLoadingState, {}, void 0, false, {\n            fileName: \"/Users/kuoldeng/projectx/frontend/pyfactor_next/src/app/dashboard/DashboardClient.js\",\n            lineNumber: 1144,\n            columnNumber: 12\n        }, this);\n    }\n    if (!isClient) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_DashboardWrapper__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n            newAccount: (userData === null || userData === void 0 ? void 0 : userData['custom:isNew']) === 'true' || newAccount === 'true',\n            plan: plan || (userData === null || userData === void 0 ? void 0 : userData['custom:plan'])\n        }, void 0, false, {\n            fileName: \"/Users/kuoldeng/projectx/frontend/pyfactor_next/src/app/dashboard/DashboardClient.js\",\n            lineNumber: 1148,\n            columnNumber: 12\n        }, this);\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            (userData === null || userData === void 0 ? void 0 : userData['custom:isadmin']) === 'true' && isAuthenticated && searchParams.get('admin') === 'true' && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"min-h-screen\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(DatabaseAdmin, {}, void 0, false, {\n                    fileName: \"/Users/kuoldeng/projectx/frontend/pyfactor_next/src/app/dashboard/DashboardClient.js\",\n                    lineNumber: 1159,\n                    columnNumber: 11\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/kuoldeng/projectx/frontend/pyfactor_next/src/app/dashboard/DashboardClient.js\",\n                lineNumber: 1158,\n                columnNumber: 9\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_DashboardWrapper__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                newAccount: (userData === null || userData === void 0 ? void 0 : userData['custom:isNew']) === 'true' || newAccount === 'true',\n                plan: plan || (userData === null || userData === void 0 ? void 0 : userData['custom:plan'])\n            }, void 0, false, {\n                fileName: \"/Users/kuoldeng/projectx/frontend/pyfactor_next/src/app/dashboard/DashboardClient.js\",\n                lineNumber: 1164,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true);\n}\n_s1(DashboardClient, \"4GYcS5eLiGC+EXuDUQWhbym/mQI=\", false, function() {\n    return [\n        next_navigation__WEBPACK_IMPORTED_MODULE_4__.useRouter,\n        next_navigation__WEBPACK_IMPORTED_MODULE_4__.useSearchParams,\n        _context_NotificationContext__WEBPACK_IMPORTED_MODULE_8__.useNotification\n    ];\n});\n_c2 = DashboardClient;\n/**\n * Ensure the tenant schema exists\n */ const ensureTenantSchema = async (tenantId, userAttributes)=>{\n    try {\n        console.log('Checking tenant connection...');\n        const tenantId = formState.tenantId || (0,uuid__WEBPACK_IMPORTED_MODULE_12__[\"default\"])();\n        // Call the tenant manager endpoint\n        const tenantManagerResponse = await fetch('/api/tenant/tenant-manager', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                tenant_id: tenantId,\n                business_name: formState.businessName,\n                forceCreate: true\n            })\n        });\n        if (tenantManagerResponse.ok) {\n            const schemaResult = await tenantManagerResponse.json();\n            console.log('[DashboardClient] Schema manager result:', schemaResult);\n            // Also update the user API\n            await fetch('/api/user/tenant', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    tenantId: tenantId\n                })\n            });\n            console.log('[DashboardClient] Updated server with tenant ID');\n            return schemaResult;\n        } else {\n            console.error('[DashboardClient] Schema manager API failed:', await tenantManagerResponse.text());\n            return null;\n        }\n    } catch (error) {\n        console.error('[DashboardClient] Error ensuring tenant schema:', error);\n        return null;\n    }\n};\n// Function to validate tenant ID\nconst isValidUUID = (id)=>{\n    if (!id) return false;\n    // Check if it's a valid UUID format\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    return uuidRegex.test(id);\n};\nvar _c, _c1, _c2;\n$RefreshReg$(_c, \"DatabaseAdmin\");\n$RefreshReg$(_c1, \"ClientDataSync\");\n$RefreshReg$(_c2, \"DashboardClient\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvZGFzaGJvYXJkL0Rhc2hib2FyZENsaWVudC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRXlEO0FBQ2pCO0FBQ1U7QUFDVztBQUNZO0FBQ0M7QUFDdkM7QUFDVDtBQUNpQztBQUNLO0FBQ25CO0FBQ1Q7QUFFcEMsOEVBQThFO0FBQzlFLE1BQU1rQixnQkFBZ0JQLHdEQUFPQSxDQUFDLElBQU0sME9BQW9DOzs7Ozs7SUFDdEVRLFNBQVMsa0JBQU0sOERBQUNDO3NCQUFJOzs7Ozs7SUFDcEJDLEtBQUs7O0tBRkRIO0FBS04sK0RBQStEO0FBQy9ELFNBQVNJO0lBQ1AsSUFBSTtRQUNGLHVDQUF1QztRQUN2QyxNQUFNQyxlQUFlQyxhQUFhQyxPQUFPLENBQUM7UUFDMUMsSUFBSUYsY0FBYztZQUNoQixJQUFJO2dCQUNGLE1BQU1HLGFBQWFDLEtBQUtDLEtBQUssQ0FBQ0w7Z0JBQzlCLElBQUlHLFdBQVdHLFlBQVksSUFBSUgsV0FBV0ksWUFBWSxFQUFFO29CQUN0RCxPQUFPO2dCQUNUO1lBQ0YsRUFBRSxPQUFPQyxHQUFHO1lBQ1YsdUJBQXVCO1lBQ3pCO1FBQ0Y7UUFFQSxtREFBbUQ7UUFDbkQsTUFBTUYsZUFBZUwsYUFBYUMsT0FBTyxDQUFDO1FBQzFDLElBQUlJLGNBQWMsT0FBTztRQUV6QixrQ0FBa0M7UUFDbEMsTUFBTUcsVUFBVUMsU0FBU0MsTUFBTSxDQUFDQyxLQUFLLENBQUM7UUFDdEMsS0FBSyxNQUFNRCxVQUFVRixRQUFTO1lBQzVCLE1BQU0sQ0FBQ0ksTUFBTUMsTUFBTSxHQUFHSCxPQUFPSSxJQUFJLEdBQUdILEtBQUssQ0FBQztZQUMxQyxJQUFJQyxTQUFTLGtCQUFrQkMsT0FBTztnQkFDcEMsT0FBTztZQUNUO1FBQ0Y7UUFFQSxPQUFPO0lBQ1QsRUFBRSxPQUFPTixHQUFHO1FBQ1YsT0FBTztJQUNUO0FBQ0Y7QUFFQSw2Q0FBNkM7QUFDN0MsU0FBU1E7SUFDUCxJQUFJ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Q3hCIiwic291cmNlcyI6WyIvVXNlcnMva3VvbGRlbmcvcHJvamVjdHgvZnJvbnRlbmQvcHlmYWN0b3JfbmV4dC9zcmMvYXBwL2Rhc2hib2FyZC9EYXNoYm9hcmRDbGllbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJ0AvdXRpbHMvbG9nZ2VyJztcbmltcG9ydCBEYXNoYm9hcmRXcmFwcGVyIGZyb20gJy4vRGFzaGJvYXJkV3JhcHBlcic7XG5pbXBvcnQgeyB1c2VSb3V0ZXIsIHVzZVNlYXJjaFBhcmFtcyB9IGZyb20gJ25leHQvbmF2aWdhdGlvbic7XG5pbXBvcnQgeyBDT09LSUVfTkFNRVMsIE9OQk9BUkRJTkdfU1RBVFVTIH0gZnJvbSAnQC9jb25zdGFudHMvb25ib2FyZGluZyc7XG5pbXBvcnQgeyBmZXRjaEF1dGhTZXNzaW9uLCBmZXRjaFVzZXJBdHRyaWJ1dGVzIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2F1dGgnO1xuaW1wb3J0IGR5bmFtaWMgZnJvbSAnbmV4dC9keW5hbWljJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgRGFzaGJvYXJkTG9hZGVyIGZyb20gJ0AvY29tcG9uZW50cy9EYXNoYm9hcmRMb2FkZXInO1xuaW1wb3J0IHsgdXNlTm90aWZpY2F0aW9uIH0gZnJvbSAnQC9jb250ZXh0L05vdGlmaWNhdGlvbkNvbnRleHQnO1xuaW1wb3J0IHsgdXNlU2Vzc2lvbiB9IGZyb20gJ25leHQtYXV0aC9yZWFjdCc7XG5pbXBvcnQgeyB2NCBhcyB1dWlkdjQgfSBmcm9tICd1dWlkJztcblxuLy8gRHluYW1pY2FsbHkgaW1wb3J0IERhdGFiYXNlQWRtaW4gY29tcG9uZW50IHRvIGF2b2lkIGxvYWRpbmcgaXQgdW50aWwgbmVlZGVkXG5jb25zdCBEYXRhYmFzZUFkbWluID0gZHluYW1pYygoKSA9PiBpbXBvcnQoJ0AvY29tcG9uZW50cy9EYXRhYmFzZUFkbWluJyksIHtcbiAgbG9hZGluZzogKCkgPT4gPGRpdj5Mb2FkaW5nIGRhdGFiYXNlIHRvb2xzLi4uPC9kaXY+LFxuICBzc3I6IGZhbHNlXG59KTtcblxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGNoZWNrIGlmIHVzZXIgaGFzIGVudGVyZWQgb25ib2FyZGluZyBkYXRhXG5mdW5jdGlvbiBjaGVja0ZvclVzZXJPbmJvYXJkaW5nRGF0YSgpIHtcbiAgdHJ5IHtcbiAgICAvLyBDaGVjayBsb2NhbFN0b3JhZ2UgZm9yIGJ1c2luZXNzIGluZm9cbiAgICBjb25zdCBidXNpbmVzc0luZm8gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnYnVzaW5lc3NJbmZvJyk7XG4gICAgaWYgKGJ1c2luZXNzSW5mbykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcGFyc2VkSW5mbyA9IEpTT04ucGFyc2UoYnVzaW5lc3NJbmZvKTtcbiAgICAgICAgaWYgKHBhcnNlZEluZm8uYnVzaW5lc3NOYW1lIHx8IHBhcnNlZEluZm8uYnVzaW5lc3NUeXBlKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gSW52YWxpZCBKU09OLCBpZ25vcmVcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLy8gQ2hlY2sgZm9yIGJ1c2luZXNzIG5hbWUgaW4gbG9jYWxTdG9yYWdlIGRpcmVjdGx5XG4gICAgY29uc3QgYnVzaW5lc3NOYW1lID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2J1c2luZXNzTmFtZScpO1xuICAgIGlmIChidXNpbmVzc05hbWUpIHJldHVybiB0cnVlO1xuICAgIFxuICAgIC8vIENoZWNrIGNvb2tpZXMgZm9yIGJ1c2luZXNzIGluZm9cbiAgICBjb25zdCBjb29raWVzID0gZG9jdW1lbnQuY29va2llLnNwbGl0KCc7Jyk7XG4gICAgZm9yIChjb25zdCBjb29raWUgb2YgY29va2llcykge1xuICAgICAgY29uc3QgW25hbWUsIHZhbHVlXSA9IGNvb2tpZS50cmltKCkuc3BsaXQoJz0nKTtcbiAgICAgIGlmIChuYW1lID09PSAnYnVzaW5lc3NOYW1lJyAmJiB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8vIEhlbHBlciB0byBnZXQgYnVzaW5lc3MgbmFtZSBmcm9tIHVzZXIgZGF0YVxuZnVuY3Rpb24gZ2V0VXNlckJ1c2luZXNzTmFtZSgpIHtcbiAgdHJ5IHtcbiAgICAvLyBUcnkgY29va2llcyBmaXJzdFxuICAgIGNvbnN0IGdldENvb2tpZSA9IChuYW1lKSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IGA7ICR7ZG9jdW1lbnQuY29va2llfWA7XG4gICAgICBjb25zdCBwYXJ0cyA9IHZhbHVlLnNwbGl0KGA7ICR7bmFtZX09YCk7XG4gICAgICBpZiAocGFydHMubGVuZ3RoID09PSAyKSByZXR1cm4gcGFydHMucG9wKCkuc3BsaXQoJzsnKS5zaGlmdCgpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBcbiAgICBjb25zdCBjb29raWVOYW1lID0gZ2V0Q29va2llKCdidXNpbmVzc05hbWUnKSB8fCBnZXRDb29raWUoJ2N1c3RvbTpidXNpbmVzc25hbWUnKTtcbiAgICBpZiAoY29va2llTmFtZSkgcmV0dXJuIGNvb2tpZU5hbWU7XG4gICAgXG4gICAgLy8gVGhlbiB0cnkgbG9jYWxTdG9yYWdlXG4gICAgaWYgKHR5cGVvZiBsb2NhbFN0b3JhZ2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUcnkgYnVzaW5lc3NJbmZvIG9iamVjdFxuICAgICAgICBjb25zdCBzdG9yZWRJbmZvID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2J1c2luZXNzSW5mbycpO1xuICAgICAgICBpZiAoc3RvcmVkSW5mbykge1xuICAgICAgICAgIGNvbnN0IHBhcnNlZEluZm8gPSBKU09OLnBhcnNlKHN0b3JlZEluZm8pO1xuICAgICAgICAgIGlmIChwYXJzZWRJbmZvLmJ1c2luZXNzTmFtZSkgcmV0dXJuIHBhcnNlZEluZm8uYnVzaW5lc3NOYW1lO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBUcnkgZGlyZWN0IGtleVxuICAgICAgICBjb25zdCBkaXJlY3ROYW1lID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2J1c2luZXNzTmFtZScpO1xuICAgICAgICBpZiAoZGlyZWN0TmFtZSkgcmV0dXJuIGRpcmVjdE5hbWU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIElnbm9yZSBsb2NhbFN0b3JhZ2UgZXJyb3JzXG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gSWdub3JlIGFueSBlcnJvcnMgaW4gdGhpcyBoZWxwZXJcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLy8gSGVscGVyIHRvIGdldCBidXNpbmVzcyB0eXBlIGZyb20gdXNlciBkYXRhXG5mdW5jdGlvbiBnZXRVc2VyQnVzaW5lc3NUeXBlKCkge1xuICB0cnkge1xuICAgIC8vIFRyeSB0byBnZXQgZnJvbSBsb2NhbFN0b3JhZ2UgYnVzaW5lc3NJbmZvXG4gICAgY29uc3QgYnVzaW5lc3NJbmZvID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2J1c2luZXNzSW5mbycpO1xuICAgIGlmIChidXNpbmVzc0luZm8pIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZEluZm8gPSBKU09OLnBhcnNlKGJ1c2luZXNzSW5mbyk7XG4gICAgICAgIGlmIChwYXJzZWRJbmZvLmJ1c2luZXNzVHlwZSkgcmV0dXJuIHBhcnNlZEluZm8uYnVzaW5lc3NUeXBlO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBJbnZhbGlkIEpTT04sIGNvbnRpbnVlIHRvIG90aGVyIG1ldGhvZHNcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLy8gVHJ5IGxvY2FsU3RvcmFnZSBkaXJlY3Qga2V5XG4gICAgcmV0dXJuIGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdidXNpbmVzc1R5cGUnKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbi8vIENsaWVudCBkYXRhIHN5bmNocm9uaXphdGlvbiBjb21wb25lbnRcbmV4cG9ydCBmdW5jdGlvbiBDbGllbnREYXRhU3luYygpIHtcbiAgY29uc3QgW3N5bmNDb21wbGV0ZSwgc2V0U3luY0NvbXBsZXRlXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIEZ1bmN0aW9uIHRvIHN5bmMgdGVuYW50IElEcyBhbmQgb3RoZXIgY2xpZW50IGRhdGFcbiAgICBjb25zdCBzeW5jQ2xpZW50RGF0YSA9IGFzeW5jICgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIEdldCB0ZW5hbnQgSUQgZnJvbSBsb2NhbFN0b3JhZ2Ugb3IgY29va2llc1xuICAgICAgICBjb25zdCB0ZW5hbnRJZCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0ZW5hbnRJZCcpIHx8IFxuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuY29va2llLnNwbGl0KCc7JykuZmluZChjID0+IGMudHJpbSgpLnN0YXJ0c1dpdGgoJ3RlbmFudElkPScpKT8uc3BsaXQoJz0nKVsxXSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuY29va2llLnNwbGl0KCc7JykuZmluZChjID0+IGMudHJpbSgpLnN0YXJ0c1dpdGgoJ2J1c2luZXNzaWQ9JykpPy5zcGxpdCgnPScpWzFdO1xuICAgICAgICBcbiAgICAgICAgLy8gQ2hlY2sgaWYgdGVuYW50IElEIGlzIHZhbGlkXG4gICAgICAgIGlmICh0ZW5hbnRJZCkge1xuICAgICAgICAgIGxvZ2dlci5pbmZvKCdbQ2xpZW50RGF0YVN5bmNdIFN5bmNocm9uaXppbmcgdGVuYW50IElEOicsIHRlbmFudElkKTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBNYWtlIHN1cmUgdGVuYW50IElEIGlzIGNvbnNpc3RlbnQgaW4gYWxsIHN0b3JhZ2UgbG9jYXRpb25zXG4gICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3RlbmFudElkJywgdGVuYW50SWQpO1xuICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGB0ZW5hbnRJZD0ke3RlbmFudElkfTsgcGF0aD0vOyBtYXgtYWdlPSR7NjAqNjAqMjQqMzB9OyBzYW1lc2l0ZT1sYXhgO1xuICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGBidXNpbmVzc2lkPSR7dGVuYW50SWR9OyBwYXRoPS87IG1heC1hZ2U9JHs2MCo2MCoyNCozMH07IHNhbWVzaXRlPWxheGA7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIFN5bmMgdGVuYW50IElEcyB0byBwcmV2ZW50IGNvcnJ1cHRpb25cbiAgICAgICAgc3luY1RlbmFudElEcygpO1xuICAgICAgICBcbiAgICAgICAgLy8gTWFyayBzeW5jIGFzIGNvbXBsZXRlXG4gICAgICAgIHNldFN5bmNDb21wbGV0ZSh0cnVlKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGxvZ2dlci5lcnJvcignW0NsaWVudERhdGFTeW5jXSBFcnJvciBzeW5jaW5nIGNsaWVudCBkYXRhOicsIGVycm9yKTtcbiAgICAgICAgLy8gQ29udGludWUgZGVzcGl0ZSBlcnJvcnNcbiAgICAgICAgc2V0U3luY0NvbXBsZXRlKHRydWUpO1xuICAgICAgfVxuICAgIH07XG4gICAgXG4gICAgLy8gUnVuIHN5bmMgb24gY29tcG9uZW50IG1vdW50XG4gICAgc3luY0NsaWVudERhdGEoKTtcbiAgfSwgW10pO1xuICBcbiAgLy8gVGhpcyBjb21wb25lbnQgZG9lc24ndCByZW5kZXIgYW55dGhpbmcgdmlzaWJsZVxuICByZXR1cm4gbnVsbDtcbn1cblxuLy8gU3luYyB0ZW5hbnQgSURzIGluIGNsaWVudCB0byBwcmV2ZW50IGNvcnJ1cHRpb25cbmNvbnN0IHN5bmNUZW5hbnRJRHMgPSAoKSA9PiB7XG4gIHRyeSB7XG4gICAgLy8gR2V0IHRlbmFudCBJRHMgZnJvbSBkaWZmZXJlbnQgc291cmNlc1xuICAgIGNvbnN0IHRlbmFudElkQ29va2llID0gZG9jdW1lbnQuY29va2llLnNwbGl0KCc7ICcpXG4gICAgICAuZmluZChyb3cgPT4gcm93LnN0YXJ0c1dpdGgoJ3RlbmFudElkPScpKVxuICAgICAgPy5zcGxpdCgnPScpWzFdO1xuICAgIFxuICAgIGNvbnN0IGJ1c2luZXNzSWRDb29raWUgPSBkb2N1bWVudC5jb29raWUuc3BsaXQoJzsgJylcbiAgICAgIC5maW5kKHJvdyA9PiByb3cuc3RhcnRzV2l0aCgnYnVzaW5lc3NpZD0nKSlcbiAgICAgID8uc3BsaXQoJz0nKVsxXTtcbiAgICBcbiAgICBjb25zdCBsb2NhbFN0b3JhZ2VUZW5hbnRJZCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0ZW5hbnRJZCcpO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKCdbQ2xpZW50RGF0YVN5bmNdIENoZWNraW5nIHRlbmFudCBJRHM6Jywge1xuICAgICAgdGVuYW50SWRDb29raWUsXG4gICAgICBidXNpbmVzc0lkQ29va2llLFxuICAgICAgbG9jYWxTdG9yYWdlVGVuYW50SWRcbiAgICB9KTtcbiAgICBcbiAgICAvLyBDaGVjayBpZiBhbnkgdGVuYW50IElEIGlzIGludmFsaWQgKGNvcnJ1cHRlZClcbiAgICBpZiAodGVuYW50SWRDb29raWUgJiYgIWlzVmFsaWRVVUlEKHRlbmFudElkQ29va2llKSkge1xuICAgICAgY29uc29sZS53YXJuKCdbQ2xpZW50RGF0YVN5bmNdIERldGVjdGVkIGNvcnJ1cHRlZCB0ZW5hbnRJZCBjb29raWU6JywgdGVuYW50SWRDb29raWUpO1xuICAgICAgXG4gICAgICAvLyBUcnkgdG8gdXNlIGEgdmFsaWQgSUQgZnJvbSBhbm90aGVyIHNvdXJjZVxuICAgICAgY29uc3QgdmFsaWRJZCA9IGlzVmFsaWRVVUlEKGxvY2FsU3RvcmFnZVRlbmFudElkKSBcbiAgICAgICAgPyBsb2NhbFN0b3JhZ2VUZW5hbnRJZCBcbiAgICAgICAgOiAoaXNWYWxpZFVVSUQoYnVzaW5lc3NJZENvb2tpZSkgPyBidXNpbmVzc0lkQ29va2llIDogbnVsbCk7XG4gICAgICBcbiAgICAgIGlmICh2YWxpZElkKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdbQ2xpZW50RGF0YVN5bmNdIFVzaW5nIHZhbGlkIHRlbmFudCBJRCB0byByZXBsYWNlIGNvcnJ1cHRlZCBjb29raWU6JywgdmFsaWRJZCk7XG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGB0ZW5hbnRJZD0ke3ZhbGlkSWR9OyBwYXRoPS87IG1heC1hZ2U9JHs2MCo2MCoyNCozMH07IHNhbWVzaXRlPWxheGA7XG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGBidXNpbmVzc2lkPSR7dmFsaWRJZH07IHBhdGg9LzsgbWF4LWFnZT0kezYwKjYwKjI0KjMwfTsgc2FtZXNpdGU9bGF4YDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIElmIG5vIHZhbGlkIElEIGZvdW5kLCBkZWxldGUgdGhlIGNvcnJ1cHRlZCBjb29raWVcbiAgICAgICAgY29uc29sZS53YXJuKCdbQ2xpZW50RGF0YVN5bmNdIE5vIHZhbGlkIHRlbmFudCBJRCBmb3VuZCwgY2xlYXJpbmcgY29ycnVwdGVkIGNvb2tpZScpO1xuICAgICAgICBkb2N1bWVudC5jb29raWUgPSAndGVuYW50SWQ9OyBwYXRoPS87IGV4cGlyZXM9VGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBHTVQnO1xuICAgICAgICBkb2N1bWVudC5jb29raWUgPSAnYnVzaW5lc3NpZD07IHBhdGg9LzsgZXhwaXJlcz1UaHUsIDAxIEphbiAxOTcwIDAwOjAwOjAwIEdNVCc7XG4gICAgICAgIFxuICAgICAgICAvLyBUcnkgdG8gZmV0Y2ggYSB0ZW5hbnQgZnJvbSBzZXJ2ZXIgaWYgYXV0aGVudGljYXRlZFxuICAgICAgICBmZXRjaFRlbmFudEZyb21TZXJ2ZXIoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLy8gRW5zdXJlIGNvbnNpc3RlbmN5IGJldHdlZW4gbG9jYWxTdG9yYWdlIGFuZCBjb29raWVzIGlmIHdlIGhhdmUgYSB2YWxpZCBJRFxuICAgIGlmIChsb2NhbFN0b3JhZ2VUZW5hbnRJZCAmJiBpc1ZhbGlkVVVJRChsb2NhbFN0b3JhZ2VUZW5hbnRJZCkpIHtcbiAgICAgIGlmICghdGVuYW50SWRDb29raWUgfHwgdGVuYW50SWRDb29raWUgIT09IGxvY2FsU3RvcmFnZVRlbmFudElkKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdbQ2xpZW50RGF0YVN5bmNdIFVzaW5nIGxvY2FsIHN0b3JhZ2UgdGVuYW50IElEIGZvciBjb29raWVzOicsIGxvY2FsU3RvcmFnZVRlbmFudElkKTtcbiAgICAgICAgZG9jdW1lbnQuY29va2llID0gYHRlbmFudElkPSR7bG9jYWxTdG9yYWdlVGVuYW50SWR9OyBwYXRoPS87IG1heC1hZ2U9JHs2MCo2MCoyNCozMH07IHNhbWVzaXRlPWxheGA7XG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGBidXNpbmVzc2lkPSR7bG9jYWxTdG9yYWdlVGVuYW50SWR9OyBwYXRoPS87IG1heC1hZ2U9JHs2MCo2MCoyNCozMH07IHNhbWVzaXRlPWxheGA7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0ZW5hbnRJZENvb2tpZSAmJiBpc1ZhbGlkVVVJRCh0ZW5hbnRJZENvb2tpZSkgJiYgKCFsb2NhbFN0b3JhZ2VUZW5hbnRJZCB8fCBsb2NhbFN0b3JhZ2VUZW5hbnRJZCAhPT0gdGVuYW50SWRDb29raWUpKSB7XG4gICAgICAvLyBJZiBjb29raWUgaGFzIHZhbGlkIElEIGJ1dCBsb2NhbFN0b3JhZ2UgZG9lc24ndCwgdXBkYXRlIGxvY2FsU3RvcmFnZVxuICAgICAgY29uc29sZS5sb2coJ1tDbGllbnREYXRhU3luY10gVXNpbmcgY29va2llIHRlbmFudCBJRCBmb3IgbG9jYWxTdG9yYWdlOicsIHRlbmFudElkQ29va2llKTtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0ZW5hbnRJZCcsIHRlbmFudElkQ29va2llKTtcbiAgICB9IGVsc2UgaWYgKCFsb2NhbFN0b3JhZ2VUZW5hbnRJZCAmJiAhdGVuYW50SWRDb29raWUgJiYgIWJ1c2luZXNzSWRDb29raWUpIHtcbiAgICAgIC8vIElmIG5vIHRlbmFudCBJRCBpcyBmb3VuZCwgdHJ5IHRvIGdldCBvbmUgZnJvbSB0aGUgc2VydmVyXG4gICAgICBmZXRjaFRlbmFudEZyb21TZXJ2ZXIoKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignW0NsaWVudERhdGFTeW5jXSBFcnJvciBzeW5jaW5nIHRlbmFudCBJRHM6JywgZXJyb3IpO1xuICB9XG59O1xuXG4vLyBGdW5jdGlvbiB0byBmZXRjaCBhIHRlbmFudCBJRCBmcm9tIHRoZSBzZXJ2ZXJcbmNvbnN0IGZldGNoVGVuYW50RnJvbVNlcnZlciA9IGFzeW5jICgpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zb2xlLmxvZygnW0NsaWVudERhdGFTeW5jXSBBdHRlbXB0aW5nIHRvIGZldGNoIHRlbmFudCBmcm9tIHNlcnZlci4uLicpO1xuICAgIFxuICAgIC8vIENhbGwgZ2V0T3JDcmVhdGUgZW5kcG9pbnQgdG8gZ2V0IG9yIGNyZWF0ZSBhIHRlbmFudFxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9hcGkvdGVuYW50L2dldE9yQ3JlYXRlJywge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfVxuICAgIH0pO1xuICAgIFxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgU2VydmVyIHJlc3BvbmRlZCB3aXRoIHN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgXG4gICAgaWYgKGRhdGEuc3VjY2VzcyAmJiBkYXRhLnRlbmFudElkKSB7XG4gICAgICBjb25zb2xlLmxvZygnW0NsaWVudERhdGFTeW5jXSBTdWNjZXNzZnVsbHkgb2J0YWluZWQgdGVuYW50IElEIGZyb20gc2VydmVyOicsIGRhdGEudGVuYW50SWQpO1xuICAgICAgXG4gICAgICAvLyBTdG9yZSB0aGUgdGVuYW50IElEIGluIGxvY2FsU3RvcmFnZSBhbmQgY29va2llc1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3RlbmFudElkJywgZGF0YS50ZW5hbnRJZCk7XG4gICAgICBkb2N1bWVudC5jb29raWUgPSBgdGVuYW50SWQ9JHtkYXRhLnRlbmFudElkfTsgcGF0aD0vOyBtYXgtYWdlPSR7NjAqNjAqMjQqMzB9OyBzYW1lc2l0ZT1sYXhgO1xuICAgICAgZG9jdW1lbnQuY29va2llID0gYGJ1c2luZXNzaWQ9JHtkYXRhLnRlbmFudElkfTsgcGF0aD0vOyBtYXgtYWdlPSR7NjAqNjAqMjQqMzB9OyBzYW1lc2l0ZT1sYXhgO1xuICAgICAgXG4gICAgICAvLyBSZWZyZXNoIHRoZSBwYWdlIHRvIGFwcGx5IHRoZSBuZXcgdGVuYW50IElEXG4gICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1tDbGllbnREYXRhU3luY10gRmFpbGVkIHRvIG9idGFpbiB0ZW5hbnQgSUQgZnJvbSBzZXJ2ZXI6JywgZGF0YS5tZXNzYWdlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignW0NsaWVudERhdGFTeW5jXSBFcnJvciBmZXRjaGluZyB0ZW5hbnQgZnJvbSBzZXJ2ZXI6JywgZXJyb3IpO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBEYXNoYm9hcmRDbGllbnQoeyBuZXdBY2NvdW50LCBwbGFuIH0pIHtcbiAgY29uc3QgW2lzQ2xpZW50LCBzZXRJc0NsaWVudF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtpc1JlYWR5LCBzZXRJc1JlYWR5XSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2lzQXV0aGVudGljYXRlZCwgc2V0SXNBdXRoZW50aWNhdGVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW3VzZXJEYXRhLCBzZXRVc2VyRGF0YV0gPSB1c2VTdGF0ZShudWxsKTtcbiAgY29uc3Qgcm91dGVyID0gdXNlUm91dGVyKCk7XG4gIGNvbnN0IFtpc1ZlcmlmeWluZ1RlbmFudCwgc2V0SXNWZXJpZnlpbmdUZW5hbnRdID0gdXNlU3RhdGUodHJ1ZSk7XG4gIGNvbnN0IFt0ZW5hbnRWZXJpZmllZCwgc2V0VGVuYW50VmVyaWZpZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbc2V0dXBTdGF0dXMsIHNldFNldHVwU3RhdHVzXSA9IHVzZVN0YXRlKCdwZW5kaW5nJyk7XG4gIGNvbnN0IFtlcnJvciwgc2V0RXJyb3JdID0gdXNlU3RhdGUobnVsbCk7XG4gIGNvbnN0IFtpc0xvYWRpbmcsIHNldElzTG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKTtcbiAgXG4gIC8vIFJlcGxhY2UgY29uc3RhbnQgbG9nZ2luZyB3aXRoIGZpcnN0LXJlbmRlci1vbmx5IGxvZ2dpbmdcbiAgY29uc3QgaXNGaXJzdFJlbmRlciA9IFJlYWN0LnVzZVJlZih0cnVlKTtcbiAgaWYgKGlzRmlyc3RSZW5kZXIuY3VycmVudCkge1xuICAgIGNvbnNvbGUubG9nKCdEYXNoYm9hcmRDbGllbnQgaW5pdGlhbCByZW5kZXIgd2l0aCBwcm9wczonLCB7IG5ld0FjY291bnQsIHBsYW4gfSk7XG4gICAgaXNGaXJzdFJlbmRlci5jdXJyZW50ID0gZmFsc2U7XG4gIH1cbiAgXG4gIC8vIEFkZCBzZWFyY2hQYXJhbXNcbiAgY29uc3Qgc2VhcmNoUGFyYW1zID0gdXNlU2VhcmNoUGFyYW1zKCk7XG4gIFxuICAvLyBBZGQgbm90aWZpY2F0aW9uIGNvbnRleHRcbiAgY29uc3QgeyBub3RpZnlTdWNjZXNzLCBub3RpZnlFcnJvciwgbm90aWZ5V2FybmluZyB9ID0gdXNlTm90aWZpY2F0aW9uKCk7XG4gIFxuICAvLyBEYXNoYm9hcmQgbG9hZGluZyBjb21wb25lbnRcbiAgY29uc3QgRGFzaGJvYXJkTG9hZGluZ1N0YXRlID0gKCkgPT4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgbWluLWgtc2NyZWVuXCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtY2VudGVyXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYW5pbWF0ZS1zcGluIHJvdW5kZWQtZnVsbCBoLTEyIHctMTIgYm9yZGVyLXQtMiBib3JkZXItYi0yIGJvcmRlci1ibHVlLTUwMCBteC1hdXRvIG1iLTRcIj48L2Rpdj5cbiAgICAgICAgPGgyIGNsYXNzTmFtZT1cInRleHQteGwgZm9udC1zZW1pYm9sZCBtYi0yXCI+TG9hZGluZyB5b3VyIGRhc2hib2FyZC4uLjwvaDI+XG4gICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtZ3JheS01MDBcIj5QbGVhc2Ugd2FpdCB3aGlsZSB3ZSByZXRyaWV2ZSB5b3VyIGRhdGEuPC9wPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG5cbiAgLy8gRGFzaGJvYXJkIGVycm9yIGNvbXBvbmVudFxuICBjb25zdCBEYXNoYm9hcmRFcnJvclN0YXRlID0gKCkgPT4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgbWluLWgtc2NyZWVuXCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtY2VudGVyIHAtNiBiZy1yZWQtNTAgcm91bmRlZC1sZyBtYXgtdy1tZFwiPlxuICAgICAgICA8c3ZnIFxuICAgICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBcbiAgICAgICAgICBjbGFzc05hbWU9XCJoLTEyIHctMTIgdGV4dC1yZWQtNTAwIG14LWF1dG8gbWItNFwiIFxuICAgICAgICAgIGZpbGw9XCJub25lXCIgXG4gICAgICAgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiIFxuICAgICAgICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gICAgICAgID5cbiAgICAgICAgICA8cGF0aCBzdHJva2VMaW5lY2FwPVwicm91bmRcIiBzdHJva2VMaW5lam9pbj1cInJvdW5kXCIgc3Ryb2tlV2lkdGg9ezJ9IGQ9XCJNMTIgOXYybTAgNGguMDFtLTYuOTM4IDRoMTMuODU2YzEuNTQgMCAyLjUwMi0xLjY2NyAxLjczMi0zTDEzLjczMiA0Yy0uNzctMS4zMzMtMi42OTQtMS4zMzMtMy40NjQgMEwzLjM0IDE2Yy0uNzcgMS4zMzMuMTkyIDMgMS43MzIgM3pcIiAvPlxuICAgICAgICA8L3N2Zz5cbiAgICAgICAgPGgyIGNsYXNzTmFtZT1cInRleHQteGwgZm9udC1zZW1pYm9sZCBtYi0yXCI+VW5hYmxlIHRvIGxvYWQgZGFzaGJvYXJkPC9oMj5cbiAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1ncmF5LTcwMCBtYi00XCI+e2Vycm9yIHx8IFwiVGhlcmUgd2FzIGEgcHJvYmxlbSBsb2FkaW5nIHlvdXIgZGF0YS4gUGxlYXNlIHRyeSBhZ2FpbiBsYXRlci5cIn08L3A+XG4gICAgICAgIDxidXR0b24gXG4gICAgICAgICAgb25DbGljaz17KCkgPT4gd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpfSBcbiAgICAgICAgICBjbGFzc05hbWU9XCJweC00IHB5LTIgYmctYmx1ZS02MDAgdGV4dC13aGl0ZSByb3VuZGVkLW1kIGhvdmVyOmJnLWJsdWUtNzAwIHRyYW5zaXRpb24tY29sb3JzXCJcbiAgICAgICAgPlxuICAgICAgICAgIFJldHJ5XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG4gIFxuICAvLyBGdW5jdGlvbiB0byBmaXggbWlzc2luZyBhdHRyaWJ1dGVzIGlmIG5lZWRlZFxuICBhc3luYyBmdW5jdGlvbiBlbnN1cmVVc2VyQXR0cmlidXRlc0NvbXBsZXRlKHNlc3Npb24sIHVzZXJEYXRhKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIEZpcnN0LCB2YWxpZGF0ZSB3ZSBoYXZlIGEgdmFsaWQgc2Vzc2lvbiBhbmQgdG9rZW5zXG4gICAgICBpZiAoIXNlc3Npb24gfHwgIXNlc3Npb24udG9rZW5zIHx8ICFzZXNzaW9uLnRva2Vucy5hY2Nlc3NUb2tlbiB8fCAhc2Vzc2lvbi50b2tlbnMuaWRUb2tlbikge1xuICAgICAgICBsb2dnZXIud2FybignW0Rhc2hib2FyZENsaWVudF0gTWlzc2luZyBzZXNzaW9uIG9yIHRva2VucywgY2Fubm90IHVwZGF0ZSBhdHRyaWJ1dGVzJyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgZXJyb3I6ICdNaXNzaW5nIGF1dGhlbnRpY2F0aW9uIHRva2VucydcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgLy8gVmFsaWRhdGUgd2UgaGF2ZSB1c2VyIGRhdGFcbiAgICAgIGlmICghdXNlckRhdGEpIHtcbiAgICAgICAgbG9nZ2VyLndhcm4oJ1tEYXNoYm9hcmRDbGllbnRdIE5vIHVzZXIgZGF0YSBwcm92aWRlZCwgY2Fubm90IGNoZWNrIGF0dHJpYnV0ZXMnKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICBlcnJvcjogJ05vIHVzZXIgZGF0YSBwcm92aWRlZCdcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgZm9yIG1pc3NpbmcgYXR0cmlidXRlc1xuICAgICAgY29uc3QgbWlzc2luZ0F0dHJpYnV0ZXMgPSBbXTtcbiAgICAgIGNvbnN0IHJlcXVpcmVkQXR0cmlidXRlcyA9IFtcbiAgICAgICAgJ2N1c3RvbTpidXNpbmVzc2lkJyxcbiAgICAgICAgJ2N1c3RvbTpidXNpbmVzc25hbWUnLFxuICAgICAgICAnY3VzdG9tOmJ1c2luZXNzdHlwZScsXG4gICAgICAgICdjdXN0b206YWNjdHN0YXR1cycsXG4gICAgICAgICdjdXN0b206b25ib2FyZGluZycsXG4gICAgICAgICdjdXN0b206c2V0dXBkb25lJyxcbiAgICAgICAgJ2N1c3RvbTpjcmVhdGVkX2F0JyxcbiAgICAgICAgJ2N1c3RvbTp1cGRhdGVkX2F0J1xuICAgICAgXTtcbiAgICAgIFxuICAgICAgLy8gQ2hlY2sgd2hpY2ggYXR0cmlidXRlcyBhcmUgbWlzc2luZ1xuICAgICAgZm9yIChjb25zdCBhdHRyIG9mIHJlcXVpcmVkQXR0cmlidXRlcykge1xuICAgICAgICBpZiAoIXVzZXJEYXRhW2F0dHJdKSB7XG4gICAgICAgICAgbWlzc2luZ0F0dHJpYnV0ZXMucHVzaChhdHRyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBJZiBubyBtaXNzaW5nIGF0dHJpYnV0ZXMsIHJldHVyblxuICAgICAgaWYgKG1pc3NpbmdBdHRyaWJ1dGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgbWVzc2FnZTogJ0FsbCBhdHRyaWJ1dGVzIHByZXNlbnQnXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBcbiAgICAgIGxvZ2dlci5pbmZvKCdbRGFzaGJvYXJkQ2xpZW50XSBEZXRlY3RlZCBtaXNzaW5nIGF0dHJpYnV0ZXM6JywgbWlzc2luZ0F0dHJpYnV0ZXMpO1xuICAgICAgXG4gICAgICAvLyBDcmVhdGUgYXR0cmlidXRlcyB0byB1cGRhdGVcbiAgICAgIGNvbnN0IGF0dHJpYnV0ZXNUb1VwZGF0ZSA9IHt9O1xuICAgICAgY29uc3QgdGltZXN0YW1wID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xuICAgICAgXG4gICAgICAvLyBGb3IgZWFjaCBtaXNzaW5nIGF0dHJpYnV0ZSwgc2V0IGEgZGVmYXVsdCB2YWx1ZVxuICAgICAgbWlzc2luZ0F0dHJpYnV0ZXMuZm9yRWFjaChhdHRyID0+IHtcbiAgICAgICAgc3dpdGNoIChhdHRyKSB7XG4gICAgICAgICAgY2FzZSAnY3VzdG9tOmJ1c2luZXNzaWQnOlxuICAgICAgICAgICAgLy8gVHJ5IHRvIGdlbmVyYXRlIGEgZGV0ZXJtaW5pc3RpYyBJRCBiYXNlZCBvbiB1c2VyIElEIGlmIGF2YWlsYWJsZVxuICAgICAgICAgICAgaWYgKHVzZXJEYXRhWydjdXN0b206YnVzaW5lc3NpZCddKSB7XG4gICAgICAgICAgICAgIGF0dHJpYnV0ZXNUb1VwZGF0ZVthdHRyXSA9IHVzZXJEYXRhWydjdXN0b206YnVzaW5lc3NpZCddO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh1c2VyRGF0YS5zdWIpIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHY1OiB1dWlkdjUgfSA9IHJlcXVpcmUoJ3V1aWQnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBURU5BTlRfTkFNRVNQQUNFID0gJzlhNTUxYzQ0LTRhZGUtNGY4OS1iMDc4LTBhZjhiZTc5NGMyMyc7XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlc1RvVXBkYXRlW2F0dHJdID0gdXVpZHY1KHVzZXJEYXRhLnN1YiwgVEVOQU5UX05BTUVTUEFDRSk7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAvLyBGYWxsYmFjayB0byByYW5kb20gVVVJRCBvbmx5IGlmIGFic29sdXRlbHkgbmVjZXNzYXJ5XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlc1RvVXBkYXRlW2F0dHJdID0gY3J5cHRvLnJhbmRvbVVVSUQoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gTGFzdCByZXNvcnQgZmFsbGJhY2tcbiAgICAgICAgICAgICAgYXR0cmlidXRlc1RvVXBkYXRlW2F0dHJdID0gY3J5cHRvLnJhbmRvbVVVSUQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2N1c3RvbTpidXNpbmVzc25hbWUnOlxuICAgICAgICAgICAgLy8gVHJ5IHRvIGdldCBidXNpbmVzcyBuYW1lIGZyb20gY29va2llcyBvciBsb2NhbFN0b3JhZ2VcbiAgICAgICAgICAgIGNvbnN0IGJ1c2luZXNzTmFtZSA9IGdldEJlc3RCdXNpbmVzc05hbWUoKSB8fCAnJztcbiAgICAgICAgICAgIGF0dHJpYnV0ZXNUb1VwZGF0ZVthdHRyXSA9IHVzZXJEYXRhWydjdXN0b206YnVzaW5lc3NuYW1lJ10gfHwgYnVzaW5lc3NOYW1lO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnY3VzdG9tOmJ1c2luZXNzdHlwZSc6XG4gICAgICAgICAgICBhdHRyaWJ1dGVzVG9VcGRhdGVbYXR0cl0gPSB1c2VyRGF0YVsnY3VzdG9tOmJ1c2luZXNzdHlwZSddIHx8ICdPdGhlcic7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdjdXN0b206YWNjdHN0YXR1cyc6XG4gICAgICAgICAgICBhdHRyaWJ1dGVzVG9VcGRhdGVbYXR0cl0gPSB1c2VyRGF0YVsnY3VzdG9tOmFjY3RzdGF0dXMnXSB8fCAnQUNUSVZFJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2N1c3RvbTpvbmJvYXJkaW5nJzpcbiAgICAgICAgICAgIGF0dHJpYnV0ZXNUb1VwZGF0ZVthdHRyXSA9IHVzZXJEYXRhWydjdXN0b206b25ib2FyZGluZyddIHx8ICdjb21wbGV0ZSc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdjdXN0b206c2V0dXBkb25lJzpcbiAgICAgICAgICAgIGF0dHJpYnV0ZXNUb1VwZGF0ZVthdHRyXSA9IHVzZXJEYXRhWydjdXN0b206c2V0dXBkb25lJ10gfHwgJ3RydWUnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnY3VzdG9tOmNyZWF0ZWRfYXQnOlxuICAgICAgICAgICAgYXR0cmlidXRlc1RvVXBkYXRlW2F0dHJdID0gdXNlckRhdGFbJ2N1c3RvbTpjcmVhdGVkX2F0J10gfHwgdGltZXN0YW1wO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnY3VzdG9tOnVwZGF0ZWRfYXQnOlxuICAgICAgICAgICAgYXR0cmlidXRlc1RvVXBkYXRlW2F0dHJdID0gdGltZXN0YW1wO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGdldCBidXNpbmVzcyBuYW1lIGZyb20gdmFyaW91cyBzb3VyY2VzXG4gICAgICBmdW5jdGlvbiBnZXRCZXN0QnVzaW5lc3NOYW1lKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRyeSBjb29raWVzIGZpcnN0XG4gICAgICAgICAgY29uc3QgZ2V0Q29va2llID0gKG5hbWUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gYDsgJHtkb2N1bWVudC5jb29raWV9YDtcbiAgICAgICAgICAgIGNvbnN0IHBhcnRzID0gdmFsdWUuc3BsaXQoYDsgJHtuYW1lfT1gKTtcbiAgICAgICAgICAgIGlmIChwYXJ0cy5sZW5ndGggPT09IDIpIHJldHVybiBwYXJ0cy5wb3AoKS5zcGxpdCgnOycpLnNoaWZ0KCk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9O1xuICAgICAgICAgIFxuICAgICAgICAgIGNvbnN0IGNvb2tpZU5hbWUgPSBnZXRDb29raWUoJ2J1c2luZXNzTmFtZScpIHx8IGdldENvb2tpZSgnY3VzdG9tOmJ1c2luZXNzbmFtZScpO1xuICAgICAgICAgIGlmIChjb29raWVOYW1lKSByZXR1cm4gY29va2llTmFtZTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBUaGVuIHRyeSBsb2NhbFN0b3JhZ2VcbiAgICAgICAgICBpZiAodHlwZW9mIGxvY2FsU3RvcmFnZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIC8vIFRyeSBidXNpbmVzc0luZm8gb2JqZWN0XG4gICAgICAgICAgICAgIGNvbnN0IHN0b3JlZEluZm8gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnYnVzaW5lc3NJbmZvJyk7XG4gICAgICAgICAgICAgIGlmIChzdG9yZWRJbmZvKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkSW5mbyA9IEpTT04ucGFyc2Uoc3RvcmVkSW5mbyk7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlZEluZm8uYnVzaW5lc3NOYW1lKSByZXR1cm4gcGFyc2VkSW5mby5idXNpbmVzc05hbWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIC8vIFRyeSBkaXJlY3Qga2V5XG4gICAgICAgICAgICAgIGNvbnN0IGRpcmVjdE5hbWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnYnVzaW5lc3NOYW1lJyk7XG4gICAgICAgICAgICAgIGlmIChkaXJlY3ROYW1lKSByZXR1cm4gZGlyZWN0TmFtZTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgLy8gSWdub3JlIGxvY2FsU3RvcmFnZSBlcnJvcnNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBJZ25vcmUgYW55IGVycm9ycyBpbiB0aGlzIGhlbHBlclxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBVcGRhdGUgdGhlIGF0dHJpYnV0ZXMgdXNpbmcgdGhlIEFQSSwgd2l0aCBlcnJvciBoYW5kbGluZyBmb3IgbmV0d29yayBpc3N1ZXNcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9hcGkvdXNlci91cGRhdGUtYXR0cmlidXRlcycsIHtcbiAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7c2Vzc2lvbi50b2tlbnMuYWNjZXNzVG9rZW4udG9TdHJpbmcoKX1gLFxuICAgICAgICAgICAgJ1gtSWQtVG9rZW4nOiBzZXNzaW9uLnRva2Vucy5pZFRva2VuLnRvU3RyaW5nKClcbiAgICAgICAgICB9LFxuICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IGF0dHJpYnV0ZXNUb1VwZGF0ZSxcbiAgICAgICAgICAgIGZvcmNlVXBkYXRlOiB0cnVlXG4gICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgY29uc3QgZXJyb3JUZXh0ID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpLmNhdGNoKCgpID0+ICdVbmtub3duIGVycm9yJyk7XG4gICAgICAgICAgbG9nZ2VyLndhcm4oJ1tEYXNoYm9hcmRDbGllbnRdIEFQSSByZXR1cm5lZCBlcnJvcjonLCB7IHN0YXR1czogcmVzcG9uc2Uuc3RhdHVzLCB0ZXh0OiBlcnJvclRleHQgfSk7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgZXJyb3I6IGBBUEkgZXJyb3I6ICR7cmVzcG9uc2Uuc3RhdHVzfSAke2Vycm9yVGV4dH1gXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgbG9nZ2VyLmluZm8oJ1tEYXNoYm9hcmRDbGllbnRdIEZpeGVkIG1pc3NpbmcgYXR0cmlidXRlczonLCBhdHRyaWJ1dGVzVG9VcGRhdGUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgbWVzc2FnZTogJ01pc3NpbmcgYXR0cmlidXRlcyBmaXhlZCcsXG4gICAgICAgICAgdXBkYXRlZEF0dHJpYnV0ZXM6IGF0dHJpYnV0ZXNUb1VwZGF0ZVxuICAgICAgICB9O1xuICAgICAgfSBjYXRjaCAoZmV0Y2hFcnJvcikge1xuICAgICAgICBsb2dnZXIud2FybignW0Rhc2hib2FyZENsaWVudF0gTmV0d29yayBlcnJvciB1cGRhdGluZyBhdHRyaWJ1dGVzOicsIGZldGNoRXJyb3IpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLCBcbiAgICAgICAgICBlcnJvcjogYE5ldHdvcmsgZXJyb3I6ICR7ZmV0Y2hFcnJvci5tZXNzYWdlfWBcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nZ2VyLndhcm4oJ1tEYXNoYm9hcmRDbGllbnRdIEVycm9yIGZpeGluZyBtaXNzaW5nIGF0dHJpYnV0ZXM6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGVycm9yOiBlcnJvci5tZXNzYWdlXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIC8vIEdlbmVyYXRlIGEgZGV0ZXJtaW5pc3RpYyB0ZW5hbnQgSUQgZnJvbSB0aGUgdXNlciBJRCBpZiBuZWVkZWRcbiAgY29uc3QgZ2VuZXJhdGVEZXRlcm1pbmlzdGljVGVuYW50SWQgPSAodXNlcklkKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghdXNlcklkKSByZXR1cm4gbnVsbDtcbiAgICAgIFxuICAgICAgLy8gVXNlIFVVSUQgdjUgYWxnb3JpdGhtIGZvciBwcm9wZXIgZGV0ZXJtaW5pc3RpYyBVVUlEIGdlbmVyYXRpb25cbiAgICAgIC8vIFRoaXMgdXNlcyBhIFNIQS0xIGhhc2ggKHZpYSBzdWJ0bGUgY3J5cHRvKSB0byBlbnN1cmUgY29uc2lzdGVuY3lcbiAgICAgIGNvbnN0IGVuY29kZXIgPSBuZXcgVGV4dEVuY29kZXIoKTtcbiAgICAgIGNvbnN0IGRhdGEgPSBlbmNvZGVyLmVuY29kZSh1c2VySWQpO1xuICAgICAgXG4gICAgICAvLyBVVUlEIHY1IG5hbWVzcGFjZSAodXNpbmcgRE5TIG5hbWVzcGFjZSBhcyBiYXNlKVxuICAgICAgY29uc3QgTkFNRVNQQUNFID0gJzZiYTdiODEwLTlkYWQtMTFkMS04MGI0LTAwYzA0ZmQ0MzBjOCc7XG4gICAgICBcbiAgICAgIC8vIENvbnZlcnQgbmFtZXNwYWNlIHRvIGJ5dGVzXG4gICAgICBjb25zdCBuYW1lc3BhY2VCeXRlcyA9IG5ldyBVaW50OEFycmF5KDE2KTtcbiAgICAgIE5BTUVTUEFDRS5yZXBsYWNlKC8tL2csICcnKS5tYXRjaCgvLnsyfS9nKS5tYXAoKGhleCwgaSkgPT4ge1xuICAgICAgICBuYW1lc3BhY2VCeXRlc1tpXSA9IHBhcnNlSW50KGhleCwgMTYpO1xuICAgICAgfSk7XG4gICAgICBcbiAgICAgIC8vIENvbWJpbmUgbmFtZXNwYWNlIGFuZCBuYW1lXG4gICAgICBjb25zdCBjb21iaW5lZEJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoMTYgKyBkYXRhLmxlbmd0aCk7XG4gICAgICBjb21iaW5lZEJ5dGVzLnNldChuYW1lc3BhY2VCeXRlcyk7XG4gICAgICBjb21iaW5lZEJ5dGVzLnNldChkYXRhLCAxNik7XG4gICAgICBcbiAgICAgIC8vIEdldCBoYXNoIG9mIGNvbWJpbmVkIGJ5dGVzXG4gICAgICAvLyBJbiBicm93c2VycyBzdXBwb3J0aW5nIGNyeXB0by5zdWJ0bGU6XG4gICAgICBpZiAodHlwZW9mIGNyeXB0byAhPT0gJ3VuZGVmaW5lZCcgJiYgY3J5cHRvLnN1YnRsZSkge1xuICAgICAgICByZXR1cm4gY3J5cHRvLnN1YnRsZS5kaWdlc3QoJ1NIQS0xJywgY29tYmluZWRCeXRlcykudGhlbihidWZmZXIgPT4ge1xuICAgICAgICAgIGNvbnN0IGhhc2hBcnJheSA9IEFycmF5LmZyb20obmV3IFVpbnQ4QXJyYXkoYnVmZmVyKSk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gRm9ybWF0IGFzIFVVSUQgdjVcbiAgICAgICAgICBoYXNoQXJyYXlbNl0gPSAoaGFzaEFycmF5WzZdICYgMHgwZikgfCAweDUwOyAvLyBTZXQgdmVyc2lvbiB0byA1XG4gICAgICAgICAgaGFzaEFycmF5WzhdID0gKGhhc2hBcnJheVs4XSAmIDB4M2YpIHwgMHg4MDsgLy8gU2V0IHZhcmlhbnRcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBDb252ZXJ0IHRvIGhleCBhbmQgZm9ybWF0IGFzIFVVSURcbiAgICAgICAgICBjb25zdCBoZXggPSBoYXNoQXJyYXkubWFwKGIgPT4gYi50b1N0cmluZygxNikucGFkU3RhcnQoMiwgJzAnKSkuam9pbignJyk7XG4gICAgICAgICAgY29uc3QgdXVpZCA9IGAke2hleC5zbGljZSgwLCA4KX0tJHtoZXguc2xpY2UoOCwgMTIpfS0ke2hleC5zbGljZSgxMiwgMTYpfS0ke2hleC5zbGljZSgxNiwgMjApfS0ke2hleC5zbGljZSgyMCwgMzIpfWA7XG4gICAgICAgICAgXG4gICAgICAgICAgbG9nZ2VyLmluZm8oJ1tEYXNoYm9hcmRDbGllbnRdIEdlbmVyYXRlZCBkZXRlcm1pbmlzdGljIFVVSUQgdjUgdGVuYW50IElEIGZyb20gdXNlciBJRDonLCB1dWlkKTtcbiAgICAgICAgICByZXR1cm4gdXVpZDtcbiAgICAgICAgfSkuY2F0Y2goZSA9PiB7XG4gICAgICAgICAgbG9nZ2VyLmVycm9yKCdbRGFzaGJvYXJkQ2xpZW50XSBFcnJvciBnZW5lcmF0aW5nIFVVSUQgdjUgdGVuYW50IElEOicsIGUpO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIEZhbGwgYmFjayB0byBzaW1wbGUgaGFzaCBtZXRob2QgaWYgc3VidGxlIGNyeXB0byBmYWlsc1xuICAgICAgICAgIHJldHVybiBnZW5lcmF0ZVNpbXBsZUhhc2hUZW5hbnRJZCh1c2VySWQpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZhbGxiYWNrIGZvciBlbnZpcm9ubWVudHMgd2l0aG91dCBjcnlwdG8uc3VidGxlXG4gICAgICAgIHJldHVybiBnZW5lcmF0ZVNpbXBsZUhhc2hUZW5hbnRJZCh1c2VySWQpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGxvZ2dlci5lcnJvcignW0Rhc2hib2FyZENsaWVudF0gRXJyb3IgZ2VuZXJhdGluZyB0ZW5hbnQgSUQ6JywgZSk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH07XG4gIFxuICAvLyBGYWxsYmFjayBtZXRob2QgdXNpbmcgc2ltcGxlIGhhc2ggZm9yIGVudmlyb25tZW50cyB3aXRob3V0IGNyeXB0by5zdWJ0bGVcbiAgY29uc3QgZ2VuZXJhdGVTaW1wbGVIYXNoVGVuYW50SWQgPSAodXNlcklkKSA9PiB7XG4gICAgY29uc3QgaGFzaCA9IEFycmF5LmZyb20odXNlcklkKS5yZWR1Y2UoKGFjYywgY2hhcikgPT4ge1xuICAgICAgcmV0dXJuICgoYWNjIDw8IDUpIC0gYWNjKSArIGNoYXIuY2hhckNvZGVBdCgwKSB8IDA7XG4gICAgfSwgMCkudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDMyLCAnMCcpO1xuICAgIFxuICAgIC8vIEZvcm1hdCBhcyBVVUlELWxpa2Ugc3RyaW5nXG4gICAgY29uc3QgdXVpZCA9IGAke2hhc2guc2xpY2UoMCwgOCl9LSR7aGFzaC5zbGljZSg4LCAxMil9LTUke2hhc2guc2xpY2UoMTMsIDE2KX0tJHtoYXNoLnNsaWNlKDE2LCAyMCl9LSR7aGFzaC5zbGljZSgyMCwgMzIpfWA7XG4gICAgbG9nZ2VyLmluZm8oJ1tEYXNoYm9hcmRDbGllbnRdIEdlbmVyYXRlZCBmYWxsYmFjayB0ZW5hbnQgSUQgZnJvbSB1c2VyIElEOicsIHV1aWQpO1xuICAgIFxuICAgIHJldHVybiB1dWlkO1xuICB9O1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgdmVyaWZ5Q29nbml0b1N0YXRlID0gYXN5bmMgKCkgPT4ge1xuICAgICAgc2V0SXNWZXJpZnlpbmdUZW5hbnQodHJ1ZSk7XG4gICAgICBcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIEFsd2F5cyB0cnkgdG8gbG9hZCBmcm9tIGxvY2FsIHN0b3JhZ2UgZmlyc3RcbiAgICAgICAgbGV0IHVzZXJJZCA9IG51bGw7XG4gICAgICAgIFxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIENoZWNrIENvZ25pdG8gaWRlbnRpdHlcbiAgICAgICAgICBjb25zdCBzZXNzaW9uID0gYXdhaXQgZmV0Y2hBdXRoU2Vzc2lvbigpO1xuICAgICAgICAgIGNvbnN0IGlkZW50aXR5VG9rZW4gPSBzZXNzaW9uPy50b2tlbnM/LmlkVG9rZW4/LnRvU3RyaW5nKCk7XG4gICAgICAgICAgXG4gICAgICAgICAgaWYgKGlkZW50aXR5VG9rZW4pIHtcbiAgICAgICAgICAgIGNvbnN0IGlkVG9rZW5QYXlsb2FkID0gc2Vzc2lvbi50b2tlbnMuaWRUb2tlbjtcbiAgICAgICAgICAgIHVzZXJJZCA9IGlkVG9rZW5QYXlsb2FkLnBheWxvYWQuc3ViO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAodXNlcklkKSB7XG4gICAgICAgICAgICAgIC8vIFN0b3JlIHVzZXIgSUQgaW4gbG9jYWwgc3RvcmFnZVxuICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndXNlcklkJywgdXNlcklkKTtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIC8vIEdlbmVyYXRlIHRlbmFudCBJRCBpZiBuZWVkZWRcbiAgICAgICAgICAgICAgY29uc3QgdGVuYW50SWQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndGVuYW50SWQnKSB8fCBnZW5lcmF0ZURldGVybWluaXN0aWNUZW5hbnRJZCh1c2VySWQpO1xuICAgICAgICAgICAgICBpZiAodGVuYW50SWQpIHtcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndGVuYW50SWQnLCB0ZW5hbnRJZCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIHNldElzQXV0aGVudGljYXRlZCh0cnVlKTtcbiAgICAgICAgICAgICAgc2V0VGVuYW50VmVyaWZpZWQodHJ1ZSk7XG4gICAgICAgICAgICAgIHNldElzVmVyaWZ5aW5nVGVuYW50KGZhbHNlKTtcbiAgICAgICAgICAgICAgc2V0U2V0dXBTdGF0dXMoJ3N1Y2Nlc3MnKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGxvZ2dlci5lcnJvcignW0Rhc2hib2FyZENsaWVudF0gRXJyb3IgZmV0Y2hpbmcgQ29nbml0byBzZXNzaW9uOicsIGUpO1xuICAgICAgICAgIC8vIENvbnRpbnVlIHRvIGZhbGxiYWNrIG1lY2hhbmlzbXNcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gSWYgd2UgY291bGRuJ3QgZ2V0IGZyb20gQ29nbml0bywgdHJ5IGxvY2FsU3RvcmFnZVxuICAgICAgICB1c2VySWQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcklkJyk7XG4gICAgICAgIGNvbnN0IHRlbmFudElkID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3RlbmFudElkJyk7XG4gICAgICAgIFxuICAgICAgICBpZiAodXNlcklkICYmIHRlbmFudElkKSB7XG4gICAgICAgICAgc2V0VGVuYW50VmVyaWZpZWQodHJ1ZSk7XG4gICAgICAgICAgc2V0SXNWZXJpZnlpbmdUZW5hbnQoZmFsc2UpO1xuICAgICAgICAgIHNldFNldHVwU3RhdHVzKCdzdWNjZXNzJyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBJZiB3ZSBnZXQgaGVyZSwgd2UgZmFpbGVkIHRvIHZlcmlmeSB0aGUgdGVuYW50XG4gICAgICAgIHNldFRlbmFudFZlcmlmaWVkKGZhbHNlKTtcbiAgICAgICAgc2V0SXNWZXJpZnlpbmdUZW5hbnQoZmFsc2UpO1xuICAgICAgICBzZXRTZXR1cFN0YXR1cygnZmFpbGVkJyk7XG4gICAgICAgIHNldEVycm9yKCdVbmFibGUgdG8gdmVyaWZ5IHRlbmFudCBJRC4gUGxlYXNlIHRyeSByZWZyZXNoaW5nIHRoZSBwYWdlIG9yIHNpZ25pbmcgaW4gYWdhaW4uJyk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBsb2dnZXIuZXJyb3IoJ1tEYXNoYm9hcmRDbGllbnRdIEVycm9yIHZlcmlmeWluZyB0ZW5hbnQ6JywgZXJyb3IpO1xuICAgICAgICBzZXRUZW5hbnRWZXJpZmllZChmYWxzZSk7XG4gICAgICAgIHNldElzVmVyaWZ5aW5nVGVuYW50KGZhbHNlKTtcbiAgICAgICAgc2V0U2V0dXBTdGF0dXMoJ2ZhaWxlZCcpO1xuICAgICAgICBzZXRFcnJvcignQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZC4gUGxlYXNlIHRyeSBhZ2FpbiBsYXRlci4nKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIHZlcmlmeUNvZ25pdG9TdGF0ZSgpO1xuICB9LCBbXSk7XG4gIFxuICAvLyBGdW5jdGlvbiB0byBmaXggdGVuYW50IHNjaGVtYSBpc3N1ZXMgaW4gQVdTIFJEU1xuICBjb25zdCBzZXR1cEF3c1Jkc1RhYmxlcyA9IHVzZUNhbGxiYWNrKGFzeW5jICh0ZW5hbnRJZCkgPT4ge1xuICAgIGlmICghdGVuYW50SWQpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1tEYXNoYm9hcmRDbGllbnRdIENhbm5vdCBzZXQgdXAgdGFibGVzOiBObyB0ZW5hbnQgSUQgcHJvdmlkZWQnKTtcbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogJ05vIHRlbmFudCBJRCBwcm92aWRlZCcgfTtcbiAgICB9XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIGNvbnNvbGUubG9nKGBbRGFzaGJvYXJkQ2xpZW50XSBTZXR0aW5nIHVwIEFXUyBSRFMgdGFibGVzIGZvciB0ZW5hbnQ6ICR7dGVuYW50SWR9YCk7XG4gICAgICBcbiAgICAgIC8vIENyZWF0ZSB0aGUgc2NoZW1hIGZpcnN0XG4gICAgICBjb25zdCBzY2hlbWFOYW1lID0gYHRlbmFudF8ke3RlbmFudElkLnJlcGxhY2UoLy0vZywgJ18nKX1gO1xuICAgICAgXG4gICAgICAvLyBDYWxsIG91ciBBV1MgUkRTIHRhYmxlIGNyZWF0aW9uIGVuZHBvaW50XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAvYXBpL2RiL2NyZWF0ZS1hd3MtdGFibGVzYCk7XG4gICAgICBcbiAgICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICBjb25zb2xlLmxvZygnW0Rhc2hib2FyZENsaWVudF0gQVdTIFJEUyB0YWJsZSBzZXR1cCBjb21wbGV0ZTonLCBkYXRhKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgZGF0YSB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgZXJyb3JEYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICBjb25zb2xlLmVycm9yKCdbRGFzaGJvYXJkQ2xpZW50XSBGYWlsZWQgdG8gc2V0IHVwIEFXUyBSRFMgdGFibGVzOicsIGVycm9yRGF0YSk7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogZXJyb3JEYXRhIH07XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1tEYXNoYm9hcmRDbGllbnRdIEVycm9yIHNldHRpbmcgdXAgQVdTIFJEUyB0YWJsZXM6JywgZXJyb3IubWVzc2FnZSk7XG4gICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6IGVycm9yLm1lc3NhZ2UgfTtcbiAgICB9XG4gIH0sIFtdKTtcblxuICAvLyBJbml0aWFsaXplIGRhdGFiYXNlIGFuZCBlbnN1cmUgdGFibGVzIGV4aXN0XG4gIGNvbnN0IGluaXRpYWxpemVEYXRhYmFzZSA9IGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc29sZS5sb2coJ1tEYXNoYm9hcmRDbGllbnRdIEluaXRpYWxpemluZyBkYXRhYmFzZSBjb25uZWN0aW9uIHRvIEFXUyBSRFMnKTtcbiAgICAgIFxuICAgICAgLy8gR2V0IHRlbmFudCBJRCBmcm9tIGxvY2FsU3RvcmFnZSBvciBjb29raWVzXG4gICAgICBjb25zdCBsb2NhbFN0b3JhZ2VUZW5hbnRJZCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0ZW5hbnRJZCcpO1xuICAgICAgY29uc3QgY29va2llVGVuYW50SWQgPSAoKCkgPT4ge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGA7ICR7ZG9jdW1lbnQuY29va2llfWA7XG4gICAgICAgIGNvbnN0IHBhcnRzID0gdmFsdWUuc3BsaXQoYDsgdGVuYW50SWQ9YCk7XG4gICAgICAgIGlmIChwYXJ0cy5sZW5ndGggPT09IDIpIHJldHVybiBwYXJ0cy5wb3AoKS5zcGxpdCgnOycpLnNoaWZ0KCk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSkoKTtcbiAgICAgIFxuICAgICAgY29uc3QgdGVuYW50SWQgPSBsb2NhbFN0b3JhZ2VUZW5hbnRJZCB8fCBjb29raWVUZW5hbnRJZDtcbiAgICAgIFxuICAgICAgaWYgKCF0ZW5hbnRJZCkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ1tEYXNoYm9hcmRDbGllbnRdIE5vIHRlbmFudCBJRCBmb3VuZCBmb3IgZGF0YWJhc2UgaW5pdGlhbGl6YXRpb24sIHNraXBwaW5nIHRhYmxlIHNldHVwJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gU2V0IHVwIEFXUyBSRFMgdGFibGVzIHdpdGggdGhlIHRlbmFudCBJRFxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc2V0dXBBd3NSZHNUYWJsZXModGVuYW50SWQpO1xuICAgICAgXG4gICAgICBpZiAocmVzdWx0LnN1Y2Nlc3MpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ1tEYXNoYm9hcmRDbGllbnRdIEFXUyBSRFMgdGFibGVzIHNldCB1cCBzdWNjZXNzZnVsbHknKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUud2FybignW0Rhc2hib2FyZENsaWVudF0gQVdTIFJEUyB0YWJsZSBzZXR1cCBpc3N1ZXM6JywgcmVzdWx0LmVycm9yKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignW0Rhc2hib2FyZENsaWVudF0gRXJyb3IgaW5pdGlhbGl6aW5nIEFXUyBSRFM6JywgZXJyb3IpO1xuICAgIH1cbiAgfTtcbiAgXG4gIC8vIFRoaXMgZW5zdXJlcyB3ZSdyZSBvbmx5IHJlbmRlcmluZyBvbiB0aGUgY2xpZW50XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2V0SXNDbGllbnQodHJ1ZSk7XG4gICAgXG4gICAgLy8gUnVuIGRhdGFiYXNlIGluaXRpYWxpemF0aW9uIGltbWVkaWF0ZWx5IHdpdGggQVdTIFJEU1xuICAgIGluaXRpYWxpemVEYXRhYmFzZSgpO1xuICAgIFxuICAgIC8vIEVuc3VyZSBjb25zaXN0ZW50IHRlbmFudCBJRCBvbiBpbml0aWFsaXphdGlvblxuICAgIGNvbnN0IGVuc3VyZUNvbnNpc3RlbnRUZW5hbnRJZCA9IGFzeW5jICgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIENoZWNrIHZhcmlvdXMgc291cmNlc1xuICAgICAgICBjb25zdCBsb2NhbFN0b3JhZ2VUZW5hbnRJZCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0ZW5hbnRJZCcpO1xuICAgICAgICBjb25zdCBjb29raWVUZW5hbnRJZCA9ICgoKSA9PiB7XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSBgOyAke2RvY3VtZW50LmNvb2tpZX1gO1xuICAgICAgICAgIGNvbnN0IHBhcnRzID0gdmFsdWUuc3BsaXQoYDsgdGVuYW50SWQ9YCk7XG4gICAgICAgICAgaWYgKHBhcnRzLmxlbmd0aCA9PT0gMikgcmV0dXJuIHBhcnRzLnBvcCgpLnNwbGl0KCc7Jykuc2hpZnQoKTtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSkoKTtcbiAgICAgICAgXG4gICAgICAgIC8vIElmIHdlIGhhdmUgaW5jb25zaXN0ZW50IElEcyBvciBub25lIGF0IGFsbCwgZmV0Y2ggZnJvbSB0aGUgc2VydmVyXG4gICAgICAgIGlmICghbG9jYWxTdG9yYWdlVGVuYW50SWQgfHwgIWNvb2tpZVRlbmFudElkIHx8IGxvY2FsU3RvcmFnZVRlbmFudElkICE9PSBjb29raWVUZW5hbnRJZCkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdbRGFzaGJvYXJkQ2xpZW50XSBUZW5hbnQgSUQgaW5jb25zaXN0ZW5jeSBkZXRlY3RlZCwgZmV0Y2hpbmcgZnJvbSBzZXJ2ZXInKTtcbiAgICAgICAgICBcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gUmVxdWVzdCB0aGUgdGVuYW50IElEIGZyb20gdGhlIHNlcnZlciBiYXNlZCBvbiB0aGUgYXV0aGVudGljYXRlZCB1c2VyXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXBpL3VzZXIvdGVuYW50Jywge1xuICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgICAgIGlmIChkYXRhLnRlbmFudElkKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1tEYXNoYm9hcmRDbGllbnRdIFJldHJpZXZlZCB0ZW5hbnQgSUQgZnJvbSBzZXJ2ZXI6JywgZGF0YS50ZW5hbnRJZCk7XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3RlbmFudElkJywgZGF0YS50ZW5hbnRJZCk7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuY29va2llID0gYHRlbmFudElkPSR7ZGF0YS50ZW5hbnRJZH07IHBhdGg9LzsgbWF4LWFnZT0kezYwKjYwKjI0KjMwfTsgc2FtZXNpdGU9bGF4YDtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBTZXQgdXAgQVdTIFJEUyB0YWJsZXMgZm9yIHRoaXMgdGVuYW50XG4gICAgICAgICAgICAgICAgYXdhaXQgc2V0dXBBd3NSZHNUYWJsZXMoZGF0YS50ZW5hbnRJZCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gQWxzbyBzdG9yZSB0aGUgc291cmNlIGZvciBkZWJ1Z2dpbmdcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5zb3VyY2UpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbRGFzaGJvYXJkQ2xpZW50XSBUZW5hbnQgSUQgc291cmNlOicsIGRhdGEuc291cmNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgc2VydmVyIGRvZXNuJ3QgaGF2ZSBhIHRlbmFudCBJRCBmb3IgdGhpcyB1c2VyLCBnZXQgZnJvbSBDb2duaXRvXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHVzZXJBdHRyaWJ1dGVzID0gYXdhaXQgZmV0Y2hVc2VyQXR0cmlidXRlcygpO1xuICAgICAgICAgICAgICAgICAgY29uc3QgY29nbml0b1RlbmFudElkID0gdXNlckF0dHJpYnV0ZXNbJ2N1c3RvbTpidXNpbmVzc2lkJ107XG4gICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgIGlmIChjb2duaXRvVGVuYW50SWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1tEYXNoYm9hcmRDbGllbnRdIFVzaW5nIHRlbmFudCBJRCBmcm9tIENvZ25pdG86JywgY29nbml0b1RlbmFudElkKTtcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3RlbmFudElkJywgY29nbml0b1RlbmFudElkKTtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuY29va2llID0gYHRlbmFudElkPSR7Y29nbml0b1RlbmFudElkfTsgcGF0aD0vOyBtYXgtYWdlPSR7NjAqNjAqMjQqMzB9OyBzYW1lc2l0ZT1sYXhgO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHVwIEFXUyBSRFMgdGFibGVzIGZvciB0aGlzIHRlbmFudFxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBzZXR1cEF3c1Jkc1RhYmxlcyhjb2duaXRvVGVuYW50SWQpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gRW5zdXJlIHRlbmFudCByZWNvcmQgZXhpc3RzIGluIGRhdGFiYXNlIGFuZCB1cGRhdGUgc2VydmVyXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gQWxzbyB1cGRhdGUgdGhlIHRlbmFudCBBUElcbiAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBmZXRjaCgnL2FwaS91c2VyL3RlbmFudCcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyB0ZW5hbnRJZDogY29nbml0b1RlbmFudElkIH0pXG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1tEYXNoYm9hcmRDbGllbnRdIFVwZGF0ZWQgc2VydmVyIHdpdGggQ29nbml0byB0ZW5hbnQgSUQnKTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAodXBkYXRlRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1tEYXNoYm9hcmRDbGllbnRdIEZhaWxlZCB0byB1cGRhdGUgc2VydmVyIHdpdGggdGVuYW50IElEOicsIHVwZGF0ZUVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gT05MWSBDUkVBVEUgTkVXIFRFTkFOVCBJRiBFWFBMSUNJVExZIFJFUVVFU1RFRFxuICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB3ZSdyZSBpbiBhIG5ldyBhY2NvdW50IGZsb3cgdGhhdCBhY3R1YWxseSByZXF1aXJlcyBhIG5ldyB0ZW5hbnRcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld0FjY291bnQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBHZW5lcmF0ZSBhIGRldGVybWluaXN0aWMgVVVJRCBiYXNlZCBvbiB1c2VyIElEIGlmIHBvc3NpYmxlXG4gICAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBlbnN1cmVzIHRoZSBzYW1lIHVzZXIgYWx3YXlzIGdldHMgdGhlIHNhbWUgdGVuYW50IElEXG4gICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdlbmVyYXRlIGEgZGV0ZXJtaW5pc3RpYyBVVUlEIGJhc2VkIG9uIHVzZXIgc3ViXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB1c2VySWQgPSB1c2VyQXR0cmlidXRlcy5zdWI7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHY1OiB1dWlkdjUgfSA9IHJlcXVpcmUoJ3V1aWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IFRFTkFOVF9OQU1FU1BBQ0UgPSAnOWE1NTFjNDQtNGFkZS00Zjg5LWIwNzgtMGFmOGJlNzk0YzIzJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRldGVybWluaXN0aWNUZW5hbnRJZCA9IHV1aWR2NSh1c2VySWQsIFRFTkFOVF9OQU1FU1BBQ0UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW0Rhc2hib2FyZENsaWVudF0gR2VuZXJhdGVkIGRldGVybWluaXN0aWMgdGVuYW50IElEIGZyb20gdXNlciBJRDonLCBkZXRlcm1pbmlzdGljVGVuYW50SWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3RlbmFudElkJywgZGV0ZXJtaW5pc3RpY1RlbmFudElkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGB0ZW5hbnRJZD0ke2RldGVybWluaXN0aWNUZW5hbnRJZH07IHBhdGg9LzsgbWF4LWFnZT0kezYwKjYwKjI0KjMwfTsgc2FtZXNpdGU9bGF4YDtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXNlIHRoZSBzY2hlbWEgbWFuYWdlciB0byBlbnN1cmUgdGFibGVzIGFuZCBzY2hlbWEgZXhpc3RcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IGVuc3VyZVRlbmFudFNjaGVtYShkZXRlcm1pbmlzdGljVGVuYW50SWQsIHVzZXJBdHRyaWJ1dGVzKTtcbiAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoICh1dWlkRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIGRldGVybWluaXN0aWMgZ2VuZXJhdGlvbiBmYWlscywgZmFsbCBiYWNrIHRvIHJhbmRvbSBVVUlEIGFzIGFic29sdXRlIGxhc3QgcmVzb3J0XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdUZW5hbnRJZCA9IGNyeXB0by5yYW5kb21VVUlEKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1tEYXNoYm9hcmRDbGllbnRdIFVVSUQgZXJyb3IsIGdlbmVyYXRlZCByYW5kb20gdGVuYW50IElEIGFzIGxhc3QgcmVzb3J0OicsIG5ld1RlbmFudElkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0ZW5hbnRJZCcsIG5ld1RlbmFudElkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGB0ZW5hbnRJZD0ke25ld1RlbmFudElkfTsgcGF0aD0vOyBtYXgtYWdlPSR7NjAqNjAqMjQqMzB9OyBzYW1lc2l0ZT1sYXhgO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBVc2UgdGhlIHNjaGVtYSBtYW5hZ2VyIHRvIGVuc3VyZSB0YWJsZXMgYW5kIHNjaGVtYSBleGlzdFxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgZW5zdXJlVGVuYW50U2NoZW1hKG5ld1RlbmFudElkLCB1c2VyQXR0cmlidXRlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgIC8vIEVuc3VyZSB0ZW5hbnQgZXhpc3RzIGluIGRhdGFiYXNlIGFuZCB1cGRhdGUgc2VydmVyXG4gICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgZmluYWwgdGVuYW50IElEIChmcm9tIGVpdGhlciBkZXRlcm1pbmlzdGljVGVuYW50SWQgb3IgbmV3VGVuYW50SWQpXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmaW5hbFRlbmFudElkID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3RlbmFudElkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEluaXRpYWxpemUgdGhlIGRhdGFiYXNlIGVudmlyb25tZW50IGZpcnN0XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbml0UmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnL2FwaS90ZW5hbnQvaW5pdC1kYi1lbnYnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluaXRSZXNwb25zZS5vaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbml0RGF0YSA9IGF3YWl0IGluaXRSZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW0Rhc2hib2FyZENsaWVudF0gRGF0YWJhc2UgZW52aXJvbm1lbnQgaW5pdGlhbGl6YXRpb246JywgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXREYXRhLnN1Y2Nlc3MgPyAnc3VjY2Vzc2Z1bCcgOiAnZmFpbGVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1RhYmxlIGV4aXN0czonLCBpbml0RGF0YS50YWJsZUV4aXN0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoanNvbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbRGFzaGJvYXJkQ2xpZW50XSBGYWlsZWQgdG8gcGFyc2UgaW5pdC1kYi1lbnYgcmVzcG9uc2U6JywganNvbkVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvbnRpbnVlIHdpdGggdGhlIHByb2Nlc3MgZGVzcGl0ZSBwYXJzaW5nIGVycm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChpbml0RXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdbRGFzaGJvYXJkQ2xpZW50XSBFcnJvciBpbml0aWFsaXppbmcgZGF0YWJhc2UgZW52aXJvbm1lbnQ6JywgaW5pdEVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDb250aW51ZSBhbnl3YXkgc2luY2UgZW5zdXJlLWRiLXJlY29yZCBoYXMgaXRzIG93biBpbml0aWFsaXphdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3cgZW5zdXJlIHRoZSB0ZW5hbnQgcmVjb3JkIGV4aXN0cyBpbiB0aGUgZGF0YWJhc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRlbmFudFJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9hcGkvdGVuYW50L2Vuc3VyZS1kYi1yZWNvcmQnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW5hbnRJZDogZmluYWxUZW5hbnRJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VySWQ6IHVzZXJBdHRyaWJ1dGVzLnN1YixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbWFpbDogdXNlckF0dHJpYnV0ZXMuZW1haWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzaW5lc3NOYW1lOiB1c2VyQXR0cmlidXRlc1snY3VzdG9tOmJ1c2luZXNzbmFtZSddLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmNlQ3JlYXRlOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRlbmFudFJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVuYW50RGF0YSA9IGF3YWl0IHRlbmFudFJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW0Rhc2hib2FyZENsaWVudF0gR2VuZXJhdGVkIHRlbmFudCBJRCBzYXZlZCB0byBkYXRhYmFzZTonLCB0ZW5hbnREYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoanNvbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignW0Rhc2hib2FyZENsaWVudF0gRmFpbGVkIHRvIHBhcnNlIHRlbmFudCByZXNwb25zZTonLCBqc29uRXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvbnRpbnVlIGRlc3BpdGUgcGFyc2luZyBlcnJvclxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yVGV4dCA9IGF3YWl0IHRlbmFudFJlc3BvbnNlLnRleHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1tEYXNoYm9hcmRDbGllbnRdIEZhaWxlZCB0byBzYXZlIGdlbmVyYXRlZCB0ZW5hbnQgSUQgdG8gZGF0YWJhc2U6JywgZXJyb3JUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAodGV4dEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdbRGFzaGJvYXJkQ2xpZW50XSBGYWlsZWQgdG8gc2F2ZSBnZW5lcmF0ZWQgdGVuYW50IElEIHRvIGRhdGFiYXNlLiBTdGF0dXM6JywgdGVuYW50UmVzcG9uc2Uuc3RhdHVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBbHNvIHVwZGF0ZSB0aGUgdGVuYW50IEFQSVxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgZmV0Y2goJy9hcGkvdXNlci90ZW5hbnQnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IHRlbmFudElkOiBmaW5hbFRlbmFudElkIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbRGFzaGJvYXJkQ2xpZW50XSBVcGRhdGVkIHNlcnZlciB3aXRoIGdlbmVyYXRlZCB0ZW5hbnQgSUQnKTtcbiAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoICh1cGRhdGVFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdbRGFzaGJvYXJkQ2xpZW50XSBGYWlsZWQgdG8gdXBkYXRlIHNlcnZlciB3aXRoIHRlbmFudCBJRDonLCB1cGRhdGVFcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbRGFzaGJvYXJkQ2xpZW50XSBObyB0ZW5hbnQgSUQgZm91bmQsIGJ1dCBuZXcgYWNjb3VudCBmbG93IG5vdCBkZXRlY3RlZC4gTm90IGNyZWF0aW5nIGEgbmV3IHRlbmFudC4nKTtcbiAgICAgICAgICAgICAgICAgICAgICBub3RpZnlXYXJuaW5nKCdVbmFibGUgdG8gZGV0ZXJtaW5lIHlvdXIgb3JnYW5pemF0aW9uIGluZm9ybWF0aW9uLiBQbGVhc2UgbG9nIG91dCBhbmQgbG9nIGJhY2sgaW4uJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChjb2duaXRvRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tEYXNoYm9hcmRDbGllbnRdIEVycm9yIGZldGNoaW5nIENvZ25pdG8gYXR0cmlidXRlczonLCBjb2duaXRvRXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gSWYgQVBJIHJlcXVlc3QgZmFpbHMsIGZhbGwgYmFjayB0byBDb2duaXRvXG4gICAgICAgICAgICAgIGNvbnNvbGUud2FybignW0Rhc2hib2FyZENsaWVudF0gVGVuYW50IEFQSSByZXF1ZXN0IGZhaWxlZCwgZmFsbGluZyBiYWNrIHRvIENvZ25pdG8nKTtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCB1c2VyQXR0cmlidXRlcyA9IGF3YWl0IGZldGNoVXNlckF0dHJpYnV0ZXMoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjb2duaXRvVGVuYW50SWQgPSB1c2VyQXR0cmlidXRlc1snY3VzdG9tOmJ1c2luZXNzaWQnXTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoY29nbml0b1RlbmFudElkKSB7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW0Rhc2hib2FyZENsaWVudF0gVXNpbmcgdGVuYW50IElEIGZyb20gQ29nbml0byBhZnRlciBBUEkgZmFpbHVyZTonLCBjb2duaXRvVGVuYW50SWQpO1xuICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3RlbmFudElkJywgY29nbml0b1RlbmFudElkKTtcbiAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGB0ZW5hbnRJZD0ke2NvZ25pdG9UZW5hbnRJZH07IHBhdGg9LzsgbWF4LWFnZT0kezYwKjYwKjI0KjMwfTsgc2FtZXNpdGU9bGF4YDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgLy8gR2VuZXJhdGUgYSBkZXRlcm1pbmlzdGljIFVVSUQgYmFzZWQgb24gdXNlciBJRCBpZiBhdmFpbGFibGVcbiAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHVzZXJJZCA9IHVzZXJBdHRyaWJ1dGVzLnN1YjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVzZXJJZCkge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgdjU6IHV1aWR2NSB9ID0gcmVxdWlyZSgndXVpZCcpO1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IFRFTkFOVF9OQU1FU1BBQ0UgPSAnOWE1NTFjNDQtNGFkZS00Zjg5LWIwNzgtMGFmOGJlNzk0YzIzJztcbiAgICAgICAgICAgICAgICAgICAgICBjb25zdCBnZW5lcmF0ZWRUZW5hbnRJZCA9IHV1aWR2NSh1c2VySWQsIFRFTkFOVF9OQU1FU1BBQ0UpO1xuICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbRGFzaGJvYXJkQ2xpZW50XSBHZW5lcmF0ZWQgZGV0ZXJtaW5pc3RpYyB0ZW5hbnQgSUQgZnJvbSB1c2VyIElEOicsIGdlbmVyYXRlZFRlbmFudElkKTtcbiAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndGVuYW50SWQnLCBnZW5lcmF0ZWRUZW5hbnRJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuY29va2llID0gYHRlbmFudElkPSR7Z2VuZXJhdGVkVGVuYW50SWR9OyBwYXRoPS87IG1heC1hZ2U9JHs2MCo2MCoyNCozMH07IHNhbWVzaXRlPWxheGA7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gUmFuZG9tIFVVSUQgYXMgYWJzb2x1dGUgbGFzdCByZXNvcnRcbiAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdUZW5hbnRJZCA9IGNyeXB0by5yYW5kb21VVUlEKCk7XG4gICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdbRGFzaGJvYXJkQ2xpZW50XSBObyB1c2VyIElEIGF2YWlsYWJsZSwgdXNpbmcgcmFuZG9tIFVVSUQ6JywgbmV3VGVuYW50SWQpO1xuICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0ZW5hbnRJZCcsIG5ld1RlbmFudElkKTtcbiAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSBgdGVuYW50SWQ9JHtuZXdUZW5hbnRJZH07IHBhdGg9LzsgbWF4LWFnZT0kezYwKjYwKjI0KjMwfTsgc2FtZXNpdGU9bGF4YDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSBjYXRjaCAodXVpZEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIFVVSUQgZ2VuZXJhdGlvbiBmYWlscywgdXNlIHNpbXBsZSByYW5kb20gVVVJRFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdUZW5hbnRJZCA9IGNyeXB0by5yYW5kb21VVUlEKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tEYXNoYm9hcmRDbGllbnRdIFVVSUQgZ2VuZXJhdGlvbiBlcnJvciwgdXNpbmcgcmFuZG9tIFVVSUQ6JywgbmV3VGVuYW50SWQpO1xuICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndGVuYW50SWQnLCBuZXdUZW5hbnRJZCk7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGB0ZW5hbnRJZD0ke25ld1RlbmFudElkfTsgcGF0aD0vOyBtYXgtYWdlPSR7NjAqNjAqMjQqMzB9OyBzYW1lc2l0ZT1sYXhgO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBjYXRjaCAoY29nbml0b0Vycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignW0Rhc2hib2FyZENsaWVudF0gRXJyb3IgZmV0Y2hpbmcgQ29nbml0byBhdHRyaWJ1dGVzIGFmdGVyIEFQSSBmYWlsdXJlOicsIGNvZ25pdG9FcnJvcik7XG4gICAgICAgICAgICAgICAgLy8gVWx0aW1hdGUgZmFsbGJhY2sgLSBnZW5lcmF0ZSByYW5kb20gVVVJRFxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1RlbmFudElkID0gY3J5cHRvLnJhbmRvbVVVSUQoKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1tEYXNoYm9hcmRDbGllbnRdIEFsbCB0ZW5hbnQgSUQgc291cmNlcyBmYWlsZWQsIHVzaW5nIHJhbmRvbSBVVUlEOicsIG5ld1RlbmFudElkKTtcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndGVuYW50SWQnLCBuZXdUZW5hbnRJZCk7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuY29va2llID0gYHRlbmFudElkPSR7bmV3VGVuYW50SWR9OyBwYXRoPS87IG1heC1hZ2U9JHs2MCo2MCoyNCozMH07IHNhbWVzaXRlPWxheGA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChmZXRjaEVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbRGFzaGJvYXJkQ2xpZW50XSBFcnJvciBmZXRjaGluZyB0ZW5hbnQgSUQgZnJvbSBzZXJ2ZXI6JywgZmV0Y2hFcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIExvZyBidXQgZG9uJ3QgdGhyb3cgZXJyb3JzXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tEYXNoYm9hcmRDbGllbnRdIEVycm9yIGVuc3VyaW5nIGNvbnNpc3RlbnQgdGVuYW50IElEOicsIGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgXG4gICAgLy8gUnVuIHRoZSBjb25zaXN0ZW5jeSBjaGVja1xuICAgIGVuc3VyZUNvbnNpc3RlbnRUZW5hbnRJZCgpO1xuICAgIFxuICAgIC8vIEZpcnN0IGNoZWNrIGlmIHVzZXIgaXMgYXV0aGVudGljYXRlZCBieSBmZXRjaGluZyBDb2duaXRvIGF0dHJpYnV0ZXNcbiAgICBjb25zdCBjaGVja09uYm9hcmRpbmdTdGF0dXMgPSBhc3luYyAoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zb2xlLmxvZygnW0Rhc2hib2FyZENsaWVudF0gU3RhcnRpbmcgYXV0aGVudGljYXRpb24gYW5kIG9uYm9hcmRpbmcgc3RhdHVzIGNoZWNrJyk7XG4gICAgICAgIFxuICAgICAgICAvLyBGaXJzdCBjaGVjayBpZiB3ZSBoYXZlIGEgdmFsaWQgYXV0aCBzZXNzaW9uXG4gICAgICAgIGNvbnN0IHNlc3Npb24gPSBhd2FpdCBmZXRjaEF1dGhTZXNzaW9uKCk7XG4gICAgICAgIGlmICghc2Vzc2lvbj8udG9rZW5zPy5hY2Nlc3NUb2tlbikge1xuICAgICAgICAgIGNvbnNvbGUud2FybignW0Rhc2hib2FyZENsaWVudF0gTm8gdmFsaWQgYXV0aCBzZXNzaW9uIGZvdW5kLCB3aWxsIHJlZGlyZWN0IHRvIHNpZ24taW4nKTtcbiAgICAgICAgICAvLyBBZGQgZGVsYXkgdG8gc2VlIGxvZ3MgYmVmb3JlIHJlZGlyZWN0XG4gICAgICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwMDApKTtcbiAgICAgICAgICByb3V0ZXIucHVzaCgnL2F1dGgvc2lnbmluJyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBVc2VyIGhhcyB2YWxpZCBzZXNzaW9uLCBzZXQgYXV0aGVudGljYXRlZFxuICAgICAgICBzZXRJc0F1dGhlbnRpY2F0ZWQodHJ1ZSk7XG4gICAgICAgIFxuICAgICAgICAvLyBHZXQgdXNlciBhdHRyaWJ1dGVzIHRvIGNoZWNrIG9uYm9hcmRpbmcgc3RhdHVzXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgdXNlckF0dHJpYnV0ZXMgPSBhd2FpdCBmZXRjaFVzZXJBdHRyaWJ1dGVzKCk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gU3RvcmUgdXNlciBhdHRyaWJ1dGVzIGluIHN0YXRlXG4gICAgICAgICAgc2V0VXNlckRhdGEodXNlckF0dHJpYnV0ZXMpO1xuICAgICAgICAgIFxuICAgICAgICAgIGNvbnNvbGUubG9nKCdbRGFzaGJvYXJkQ2xpZW50XSBVc2VyIGF0dHJpYnV0ZXMgZmV0Y2hlZDonLCB7XG4gICAgICAgICAgICBoYXNCdXNpbmVzc0lkOiAhIXVzZXJBdHRyaWJ1dGVzWydjdXN0b206YnVzaW5lc3NpZCddLFxuICAgICAgICAgICAgaGFzQnVzaW5lc3NOYW1lOiAhIXVzZXJBdHRyaWJ1dGVzWydjdXN0b206YnVzaW5lc3NuYW1lJ10sXG4gICAgICAgICAgICBvbmJvYXJkaW5nU3RhdHVzOiB1c2VyQXR0cmlidXRlc1snY3VzdG9tOm9uYm9hcmRpbmcnXSxcbiAgICAgICAgICAgIHNldHVwRG9uZTogdXNlckF0dHJpYnV0ZXNbJ2N1c3RvbTpzZXR1cGRvbmUnXVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIEVOSEFOQ0VEIENIRUNLOiBJZiB1c2VyIGhhcyBjb21wbGV0ZWQgb25ib2FyZGluZyBhY2NvcmRpbmcgdG8gQ29nbml0bywgd2UncmUgZ29vZFxuICAgICAgICAgIGlmICh1c2VyQXR0cmlidXRlc1snY3VzdG9tOm9uYm9hcmRpbmcnXT8udG9Mb3dlckNhc2UoKSA9PT0gJ2NvbXBsZXRlJyB8fCBcbiAgICAgICAgICAgICAgdXNlckF0dHJpYnV0ZXNbJ2N1c3RvbTpzZXR1cGRvbmUnXT8udG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW0Rhc2hib2FyZENsaWVudF0gVXNlciBoYXMgY29tcGxldGVkIG9uYm9hcmRpbmcsIHNob3dpbmcgZGFzaGJvYXJkJyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIENoZWNrIGZvciB0ZW5hbnQgSUQgdG8gZW5zdXJlIFJMUyB3b3JrcyBwcm9wZXJseVxuICAgICAgICAgICAgaWYgKCF1c2VyQXR0cmlidXRlc1snY3VzdG9tOmJ1c2luZXNzaWQnXSkge1xuICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1tEYXNoYm9hcmRDbGllbnRdIE1pc3NpbmcgdGVuYW50IElEIGluIENvZ25pdG8sIHdpbGwgZ2VuZXJhdGUgb25lIGZvciBSTFMnKTtcbiAgICAgICAgICAgICAgLy8gR2VuZXJhdGUgYSBkZXRlcm1pbmlzdGljIFVVSUQgZnJvbSB1c2VyIElEIHRvIGVuc3VyZSBjb25zaXN0ZW5jeVxuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgdjU6IHV1aWR2NSB9ID0gcmVxdWlyZSgndXVpZCcpO1xuICAgICAgICAgICAgICAgIGNvbnN0IFRFTkFOVF9OQU1FU1BBQ0UgPSAnOWE1NTFjNDQtNGFkZS00Zjg5LWIwNzgtMGFmOGJlNzk0YzIzJztcbiAgICAgICAgICAgICAgICBjb25zdCBnZW5lcmF0ZWRUZW5hbnRJZCA9IHV1aWR2NSh1c2VyQXR0cmlidXRlcy5zdWIsIFRFTkFOVF9OQU1FU1BBQ0UpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIEFkZCB0aGlzIHRvIHRoZSBhdHRyaWJ1dGVzIHRoYXQgbmVlZCB1cGRhdGluZ1xuICAgICAgICAgICAgICAgIHVzZXJBdHRyaWJ1dGVzWydjdXN0b206YnVzaW5lc3NpZCddID0gZ2VuZXJhdGVkVGVuYW50SWQ7XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3RlbmFudElkJywgZ2VuZXJhdGVkVGVuYW50SWQpO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGB0ZW5hbnRJZD0ke2dlbmVyYXRlZFRlbmFudElkfTsgcGF0aD0vOyBtYXgtYWdlPSR7NjAqNjAqMjQqMzB9OyBzYW1lc2l0ZT1sYXhgO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbRGFzaGJvYXJkQ2xpZW50XSBHZW5lcmF0ZWQgdGVuYW50IElEIGZvciBSTFM6JywgZ2VuZXJhdGVkVGVuYW50SWQpO1xuICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignW0Rhc2hib2FyZENsaWVudF0gRXJyb3IgZ2VuZXJhdGluZyB0ZW5hbnQgSUQ6JywgZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gRml4IGFueSBtaXNzaW5nIGF0dHJpYnV0ZXMgaW4gdGhlIGJhY2tncm91bmRcbiAgICAgICAgICAgIGVuc3VyZVVzZXJBdHRyaWJ1dGVzQ29tcGxldGUoc2Vzc2lvbiwgdXNlckF0dHJpYnV0ZXMpXG4gICAgICAgICAgICAgIC50aGVuKHJlc3VsdCA9PiBjb25zb2xlLmRlYnVnKCdbRGFzaGJvYXJkQ2xpZW50XSBBdHRyaWJ1dGUgY2hlY2sgcmVzdWx0OicsIHJlc3VsdCkpXG4gICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4gY29uc29sZS5lcnJvcignW0Rhc2hib2FyZENsaWVudF0gQmFja2dyb3VuZCBhdHRyaWJ1dGUgY2hlY2sgZXJyb3I6JywgZXJyKSk7XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgc2V0SXNSZWFkeSh0cnVlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGF0dHJFcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUud2FybignW0Rhc2hib2FyZENsaWVudF0gRXJyb3IgZmV0Y2hpbmcgdXNlciBhdHRyaWJ1dGVzLCB1c2luZyBjb29raWVzIGFzIGZhbGxiYWNrOicsIGF0dHJFcnJvcik7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gRXZlbiBpZiB3ZSBjYW4ndCBnZXQgYXR0cmlidXRlcywgd2UgY2FuIHVzZSBjb29raWVzXG4gICAgICAgICAgY29uc3QgZ2V0Q29va2llID0gKG5hbWUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gYDsgJHtkb2N1bWVudC5jb29raWV9YDtcbiAgICAgICAgICAgIGNvbnN0IHBhcnRzID0gdmFsdWUuc3BsaXQoYDsgJHtuYW1lfT1gKTtcbiAgICAgICAgICAgIGlmIChwYXJ0cy5sZW5ndGggPT09IDIpIHJldHVybiBwYXJ0cy5wb3AoKS5zcGxpdCgnOycpLnNoaWZ0KCk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9O1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIENoZWNrIGNvb2tpZXMgZm9yIG9uYm9hcmRpbmcgc3RhdHVzXG4gICAgICAgICAgY29uc3Qgb25ib2FyZGluZ1N0YXR1cyA9IGdldENvb2tpZSgnb25ib2FyZGVkU3RhdHVzJykgfHwgZ2V0Q29va2llKCdvbmJvYXJkaW5nU3RhdHVzJyk7XG4gICAgICAgICAgY29uc3Qgc2V0dXBDb21wbGV0ZWQgPSBnZXRDb29raWUoJ3NldHVwQ29tcGxldGVkJykgfHwgZ2V0Q29va2llKCdzZXR1cERvbmUnKTtcbiAgICAgICAgICBcbiAgICAgICAgICBpZiAob25ib2FyZGluZ1N0YXR1cyA9PT0gJ2NvbXBsZXRlJyB8fCBzZXR1cENvbXBsZXRlZCA9PT0gJ3RydWUnKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW0Rhc2hib2FyZENsaWVudF0gQ29va2llcyBpbmRpY2F0ZSBvbmJvYXJkaW5nIGlzIGNvbXBsZXRlLCBzaG93aW5nIGRhc2hib2FyZCcpO1xuICAgICAgICAgICAgc2V0SXNSZWFkeSh0cnVlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIFNldCBpc1JlYWR5IHRydWUgZXZlbiBpZiB3ZSBkb24ndCBoYXZlIGF0dHJpYnV0ZXMgb3IgY29va2llc1xuICAgICAgICAvLyBUaGUgRGFzaGJvYXJkV3JhcHBlciB3aWxsIGhhbmRsZSBmdXJ0aGVyIHZlcmlmaWNhdGlvblxuICAgICAgICBjb25zb2xlLmxvZygnW0Rhc2hib2FyZENsaWVudF0gUHJvY2VlZGluZyB0byBkYXNoYm9hcmQsIERhc2hib2FyZFdyYXBwZXIgd2lsbCBoYW5kbGUgdmVyaWZpY2F0aW9uJyk7XG4gICAgICAgIHNldElzUmVhZHkodHJ1ZSk7XG4gICAgICAgIFxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgLy8gTG9nIGVycm9yIGFuZCByZWRpcmVjdFxuICAgICAgICBjb25zb2xlLmVycm9yKCdbRGFzaGJvYXJkQ2xpZW50XSBFcnJvciBjaGVja2luZyBhdXRoIHN0YXR1czonLCBlcnJvcik7XG4gICAgICAgIHJvdXRlci5wdXNoKCcvYXV0aC9zaWduaW4/cmV0dXJuVXJsPScgKyBlbmNvZGVVUklDb21wb25lbnQoJy9kYXNoYm9hcmQnKSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBcbiAgICAvLyBSdW4gdGhlIGNoZWNrIGJ1dCBzZXQgYSB0aW1lb3V0IHRvIHByZXZlbnQgaW5maW5pdGUgbG9hZGluZ1xuICAgIGNoZWNrT25ib2FyZGluZ1N0YXR1cygpO1xuICAgIFxuICAgIC8vIFNldCBhIHRpbWVvdXQgdG8gZW5zdXJlIHdlIGRvbid0IGdldCBzdHVjayBpbiBhIGxvYWRpbmcgc3RhdGVcbiAgICBjb25zdCB0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAoIWlzUmVhZHkpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ+KaoO+4jyBEYXNoYm9hcmQgbG9hZGluZyB0aW1lb3V0IC0gZm9yY2luZyByZWFkeSBzdGF0ZScpO1xuICAgICAgICBzZXRJc1JlYWR5KHRydWUpO1xuICAgICAgfVxuICAgIH0sIDUwMDApO1xuICAgIFxuICAgIHJldHVybiAoKSA9PiBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gIH0sIFtyb3V0ZXJdKTtcbiAgXG4gIC8vIEZ1bmN0aW9uIHRvIHJlZnJlc2ggdXNlciBkYXRhXG4gIGNvbnN0IHJlZnJlc2hVc2VyRGF0YSA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICBpZiAoIWlzQXV0aGVudGljYXRlZCkgcmV0dXJuO1xuICAgIFxuICAgIHRyeSB7XG4gICAgICBjb25zb2xlLmxvZygnW0Rhc2hib2FyZENsaWVudF0gUmVmcmVzaGluZyB1c2VyIGRhdGEnKTtcbiAgICAgIGNvbnN0IHVzZXJBdHRyaWJ1dGVzID0gYXdhaXQgZmV0Y2hVc2VyQXR0cmlidXRlcygpO1xuICAgICAgc2V0VXNlckRhdGEodXNlckF0dHJpYnV0ZXMpO1xuICAgICAgcmV0dXJuIHVzZXJBdHRyaWJ1dGVzO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdbRGFzaGJvYXJkQ2xpZW50XSBFcnJvciByZWZyZXNoaW5nIHVzZXIgZGF0YTonLCBlcnJvcik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH0sIFtpc0F1dGhlbnRpY2F0ZWRdKTtcbiAgXG4gIC8vIEhlbHBlciBmdW5jdGlvbiB0byBoYW5kbGUgc3Vic2NyaXB0aW9uIHN1Y2Nlc3NcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBoYW5kbGVTdWJzY3JpcHRpb25TdWNjZXNzID0gYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uU3VjY2VzcyA9IHNlYXJjaFBhcmFtcy5nZXQoJ3N1YnNjcmlwdGlvbl9zdWNjZXNzJyk7XG4gICAgICBjb25zdCBzZXNzaW9uSWQgPSBzZWFyY2hQYXJhbXMuZ2V0KCdzZXNzaW9uX2lkJyk7XG4gICAgICBcbiAgICAgIGlmIChzdWJzY3JpcHRpb25TdWNjZXNzID09PSAndHJ1ZScgJiYgc2Vzc2lvbklkKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBbU3Vic2NyaXB0aW9uXSBQcm9jZXNzaW5nIHN1Y2Nlc3NmdWwgc3Vic2NyaXB0aW9uIHdpdGggc2Vzc2lvbiBJRDogJHtzZXNzaW9uSWR9YCk7XG4gICAgICAgIFxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIENhbGwgb3VyIHNlc3Npb24tc3VjY2VzcyBBUEkgdG8gdmVyaWZ5IGFuZCBwcm9jZXNzIHRoZSBzdWJzY3JpcHRpb25cbiAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXBpL2NoZWNrb3V0L3Nlc3Npb24tc3VjY2VzcycsIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgc2Vzc2lvbl9pZDogc2Vzc2lvbklkXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIFxuICAgICAgICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbU3Vic2NyaXB0aW9uXSBTdWNjZXNzZnVsbHkgcHJvY2Vzc2VkIGNoZWNrb3V0IHNlc3Npb246JywgZGF0YSk7XG4gICAgICAgICAgICBub3RpZnlTdWNjZXNzKCdTdWJzY3JpcHRpb24gc3VjY2Vzc2Z1bGx5IHVwZ3JhZGVkIScpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBSZWZyZXNoIHVzZXIgZGF0YSB0byBnZXQgdGhlIHVwZGF0ZWQgc3Vic2NyaXB0aW9uIHN0YXR1c1xuICAgICAgICAgICAgYXdhaXQgcmVmcmVzaFVzZXJEYXRhKCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIENsZWFuIHRoZSBVUkwgYnkgcmVtb3ZpbmcgcXVlcnkgcGFyYW1ldGVyc1xuICAgICAgICAgICAgY29uc3QgdXJsID0gbmV3IFVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgICAgICAgICB1cmwuc2VhcmNoUGFyYW1zLmRlbGV0ZSgnc3Vic2NyaXB0aW9uX3N1Y2Nlc3MnKTtcbiAgICAgICAgICAgIHVybC5zZWFyY2hQYXJhbXMuZGVsZXRlKCdzZXNzaW9uX2lkJyk7XG4gICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoe30sIGRvY3VtZW50LnRpdGxlLCB1cmwudG9TdHJpbmcoKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yRGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tTdWJzY3JpcHRpb25dIEZhaWxlZCB0byBwcm9jZXNzIGNoZWNrb3V0IHNlc3Npb246JywgZXJyb3JEYXRhKTtcbiAgICAgICAgICAgIG5vdGlmeUVycm9yKCdGYWlsZWQgdG8gdmVyaWZ5IHN1YnNjcmlwdGlvbi4gUGxlYXNlIGNvbnRhY3Qgc3VwcG9ydC4nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignW1N1YnNjcmlwdGlvbl0gRXJyb3IgcHJvY2Vzc2luZyBzdWJzY3JpcHRpb246JywgZXJyb3IpO1xuICAgICAgICAgIG5vdGlmeUVycm9yKCdBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSBwcm9jZXNzaW5nIHlvdXIgc3Vic2NyaXB0aW9uLicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBcbiAgICAvLyBPbmx5IHJ1biBpZiBhdXRoZW50aWNhdGVkXG4gICAgaWYgKGlzQXV0aGVudGljYXRlZCkge1xuICAgICAgaGFuZGxlU3Vic2NyaXB0aW9uU3VjY2VzcygpO1xuICAgIH1cbiAgfSwgW3NlYXJjaFBhcmFtcywgaXNBdXRoZW50aWNhdGVkLCBub3RpZnlTdWNjZXNzLCBub3RpZnlFcnJvcl0pO1xuICBcbiAgLy8gVXBkYXRlIGxvYWRpbmcgc3RhdGUgYmFzZWQgb24gZGF0YSBhdmFpbGFiaWxpdHlcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBTZXQgbG9hZGluZyB0byBmYWxzZSBvbmx5IHdoZW4gd2UgaGF2ZSByZWFsIGRhdGFcbiAgICBpZiAodXNlckRhdGEgJiYgT2JqZWN0LmtleXModXNlckRhdGEpLmxlbmd0aCA+IDAgJiYgdGVuYW50VmVyaWZpZWQpIHtcbiAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XG4gICAgfVxuICB9LCBbdXNlckRhdGEsIHRlbmFudFZlcmlmaWVkXSk7XG4gIFxuICAvLyBTaG93IGxvYWRpbmcgc3RhdGUgaWYgc3RpbGwgbG9hZGluZyB0ZW5hbnQgb3IgdXNlciBkYXRhXG4gIGlmIChpc0xvYWRpbmcgfHwgaXNWZXJpZnlpbmdUZW5hbnQgfHwgIXRlbmFudFZlcmlmaWVkKSB7XG4gICAgcmV0dXJuIDxEYXNoYm9hcmRMb2FkaW5nU3RhdGUgLz47XG4gIH1cblxuICAvLyBTaG93IGVycm9yIHN0YXRlIGlmIHRoZXJlJ3MgYW4gZXJyb3JcbiAgaWYgKGVycm9yIHx8IHNldHVwU3RhdHVzID09PSAnZmFpbGVkJykge1xuICAgIHJldHVybiA8RGFzaGJvYXJkRXJyb3JTdGF0ZSAvPjtcbiAgfVxuXG4gIC8vIERvbid0IHNob3cgdGhlIGRhc2hib2FyZCB1bnRpbCB3ZSBoYXZlIGFjdHVhbCB1c2VyRGF0YVxuICBpZiAoIXVzZXJEYXRhIHx8IE9iamVjdC5rZXlzKHVzZXJEYXRhKS5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gPERhc2hib2FyZExvYWRpbmdTdGF0ZSAvPjtcbiAgfVxuXG4gIGlmICghaXNDbGllbnQpIHtcbiAgICByZXR1cm4gPERhc2hib2FyZFdyYXBwZXIgXG4gICAgICBuZXdBY2NvdW50PXt1c2VyRGF0YT8uWydjdXN0b206aXNOZXcnXSA9PT0gJ3RydWUnIHx8IG5ld0FjY291bnQgPT09ICd0cnVlJ31cbiAgICAgIHBsYW49e3BsYW4gfHwgdXNlckRhdGE/LlsnY3VzdG9tOnBsYW4nXX1cbiAgICAvPjtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIHsvKiBBZG1pbiBwYW5lbCBmb3IgYWRtaW4gdXNlcnMgKi99XG4gICAgICB7dXNlckRhdGE/LlsnY3VzdG9tOmlzYWRtaW4nXSA9PT0gJ3RydWUnICYmIGlzQXV0aGVudGljYXRlZCAmJiBzZWFyY2hQYXJhbXMuZ2V0KCdhZG1pbicpID09PSAndHJ1ZScgJiYgKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1pbi1oLXNjcmVlblwiPlxuICAgICAgICAgIDxEYXRhYmFzZUFkbWluIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cbiAgICAgIFxuICAgICAgey8qIEFsd2F5cyByZW5kZXIgRGFzaGJvYXJkV3JhcHBlciAqL31cbiAgICAgIDxEYXNoYm9hcmRXcmFwcGVyIFxuICAgICAgICBuZXdBY2NvdW50PXt1c2VyRGF0YT8uWydjdXN0b206aXNOZXcnXSA9PT0gJ3RydWUnIHx8IG5ld0FjY291bnQgPT09ICd0cnVlJ31cbiAgICAgICAgcGxhbj17cGxhbiB8fCB1c2VyRGF0YT8uWydjdXN0b206cGxhbiddfVxuICAgICAgLz5cbiAgICA8Lz5cbiAgKTtcbn1cblxuLyoqXG4gKiBFbnN1cmUgdGhlIHRlbmFudCBzY2hlbWEgZXhpc3RzXG4gKi9cbmNvbnN0IGVuc3VyZVRlbmFudFNjaGVtYSA9IGFzeW5jICh0ZW5hbnRJZCwgdXNlckF0dHJpYnV0ZXMpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zb2xlLmxvZygnQ2hlY2tpbmcgdGVuYW50IGNvbm5lY3Rpb24uLi4nKTtcbiAgICBjb25zdCB0ZW5hbnRJZCA9IGZvcm1TdGF0ZS50ZW5hbnRJZCB8fCB1dWlkdjQoKTtcbiAgICBcbiAgICAvLyBDYWxsIHRoZSB0ZW5hbnQgbWFuYWdlciBlbmRwb2ludFxuICAgIGNvbnN0IHRlbmFudE1hbmFnZXJSZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXBpL3RlbmFudC90ZW5hbnQtbWFuYWdlcicsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgfSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgdGVuYW50X2lkOiB0ZW5hbnRJZCxcbiAgICAgICAgYnVzaW5lc3NfbmFtZTogZm9ybVN0YXRlLmJ1c2luZXNzTmFtZSxcbiAgICAgICAgZm9yY2VDcmVhdGU6IHRydWUsXG4gICAgICB9KSxcbiAgICB9KTtcbiAgICBcbiAgICBpZiAodGVuYW50TWFuYWdlclJlc3BvbnNlLm9rKSB7XG4gICAgICBjb25zdCBzY2hlbWFSZXN1bHQgPSBhd2FpdCB0ZW5hbnRNYW5hZ2VyUmVzcG9uc2UuanNvbigpO1xuICAgICAgY29uc29sZS5sb2coJ1tEYXNoYm9hcmRDbGllbnRdIFNjaGVtYSBtYW5hZ2VyIHJlc3VsdDonLCBzY2hlbWFSZXN1bHQpO1xuICAgICAgXG4gICAgICAvLyBBbHNvIHVwZGF0ZSB0aGUgdXNlciBBUElcbiAgICAgIGF3YWl0IGZldGNoKCcvYXBpL3VzZXIvdGVuYW50Jywge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgfSxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyB0ZW5hbnRJZDogdGVuYW50SWQgfSlcbiAgICAgIH0pO1xuICAgICAgY29uc29sZS5sb2coJ1tEYXNoYm9hcmRDbGllbnRdIFVwZGF0ZWQgc2VydmVyIHdpdGggdGVuYW50IElEJyk7XG4gICAgICBcbiAgICAgIHJldHVybiBzY2hlbWFSZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1tEYXNoYm9hcmRDbGllbnRdIFNjaGVtYSBtYW5hZ2VyIEFQSSBmYWlsZWQ6JywgYXdhaXQgdGVuYW50TWFuYWdlclJlc3BvbnNlLnRleHQoKSk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignW0Rhc2hib2FyZENsaWVudF0gRXJyb3IgZW5zdXJpbmcgdGVuYW50IHNjaGVtYTonLCBlcnJvcik7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn07XG5cbi8vIEZ1bmN0aW9uIHRvIHZhbGlkYXRlIHRlbmFudCBJRFxuY29uc3QgaXNWYWxpZFVVSUQgPSAoaWQpID0+IHtcbiAgaWYgKCFpZCkgcmV0dXJuIGZhbHNlO1xuICAvLyBDaGVjayBpZiBpdCdzIGEgdmFsaWQgVVVJRCBmb3JtYXRcbiAgY29uc3QgdXVpZFJlZ2V4ID0gL15bMC05YS1mXXs4fS1bMC05YS1mXXs0fS1bMC05YS1mXXs0fS1bMC05YS1mXXs0fS1bMC05YS1mXXsxMn0kL2k7XG4gIHJldHVybiB1dWlkUmVnZXgudGVzdChpZCk7XG59OyAiXSwibmFtZXMiOlsidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJ1c2VDYWxsYmFjayIsImxvZ2dlciIsIkRhc2hib2FyZFdyYXBwZXIiLCJ1c2VSb3V0ZXIiLCJ1c2VTZWFyY2hQYXJhbXMiLCJDT09LSUVfTkFNRVMiLCJPTkJPQVJESU5HX1NUQVRVUyIsImZldGNoQXV0aFNlc3Npb24iLCJmZXRjaFVzZXJBdHRyaWJ1dGVzIiwiZHluYW1pYyIsIlJlYWN0IiwiRGFzaGJvYXJkTG9hZGVyIiwidXNlTm90aWZpY2F0aW9uIiwidXNlU2Vzc2lvbiIsInY0IiwidXVpZHY0IiwiRGF0YWJhc2VBZG1pbiIsImxvYWRpbmciLCJkaXYiLCJzc3IiLCJjaGVja0ZvclVzZXJPbmJvYXJkaW5nRGF0YSIsImJ1c2luZXNzSW5mbyIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJwYXJzZWRJbmZvIiwiSlNPTiIsInBhcnNlIiwiYnVzaW5lc3NOYW1lIiwiYnVzaW5lc3NUeXBlIiwiZSIsImNvb2tpZXMiLCJkb2N1bWVudCIsImNvb2tpZSIsInNwbGl0IiwibmFtZSIsInZhbHVlIiwidHJpbSIsImdldFVzZXJCdXNpbmVzc05hbWUiLCJnZXRDb29raWUiLCJwYXJ0cyIsImxlbmd0aCIsInBvcCIsInNoaWZ0IiwiY29va2llTmFtZSIsInN0b3JlZEluZm8iLCJkaXJlY3ROYW1lIiwiZ2V0VXNlckJ1c2luZXNzVHlwZSIsIkNsaWVudERhdGFTeW5jIiwic3luY0NvbXBsZXRlIiwic2V0U3luY0NvbXBsZXRlIiwic3luY0NsaWVudERhdGEiLCJ0ZW5hbnRJZCIsImZpbmQiLCJjIiwic3RhcnRzV2l0aCIsImluZm8iLCJzZXRJdGVtIiwic3luY1RlbmFudElEcyIsImVycm9yIiwidGVuYW50SWRDb29raWUiLCJyb3ciLCJidXNpbmVzc0lkQ29va2llIiwibG9jYWxTdG9yYWdlVGVuYW50SWQiLCJjb25zb2xlIiwibG9nIiwiaXNWYWxpZFVVSUQiLCJ3YXJuIiwidmFsaWRJZCIsImZldGNoVGVuYW50RnJvbVNlcnZlciIsInJlc3BvbnNlIiwiZmV0Y2giLCJtZXRob2QiLCJoZWFkZXJzIiwib2siLCJFcnJvciIsInN0YXR1cyIsImRhdGEiLCJqc29uIiwic3VjY2VzcyIsIndpbmRvdyIsImxvY2F0aW9uIiwicmVsb2FkIiwibWVzc2FnZSIsIkRhc2hib2FyZENsaWVudCIsIm5ld0FjY291bnQiLCJwbGFuIiwiaXNDbGllbnQiLCJzZXRJc0NsaWVudCIsImlzUmVhZHkiLCJzZXRJc1JlYWR5IiwiaXNBdXRoZW50aWNhdGVkIiwic2V0SXNBdXRoZW50aWNhdGVkIiwidXNlckRhdGEiLCJzZXRVc2VyRGF0YSIsInJvdXRlciIsImlzVmVyaWZ5aW5nVGVuYW50Iiwic2V0SXNWZXJpZnlpbmdUZW5hbnQiLCJ0ZW5hbnRWZXJpZmllZCIsInNldFRlbmFudFZlcmlmaWVkIiwic2V0dXBTdGF0dXMiLCJzZXRTZXR1cFN0YXR1cyIsInNldEVycm9yIiwiaXNMb2FkaW5nIiwic2V0SXNMb2FkaW5nIiwiaXNGaXJzdFJlbmRlciIsInVzZVJlZiIsImN1cnJlbnQiLCJzZWFyY2hQYXJhbXMiLCJub3RpZnlTdWNjZXNzIiwibm90aWZ5RXJyb3IiLCJub3RpZnlXYXJuaW5nIiwiRGFzaGJvYXJkTG9hZGluZ1N0YXRlIiwiY2xhc3NOYW1lIiwiaDIiLCJwIiwiRGFzaGJvYXJkRXJyb3JTdGF0ZSIsInN2ZyIsInhtbG5zIiwiZmlsbCIsInZpZXdCb3giLCJzdHJva2UiLCJwYXRoIiwic3Ryb2tlTGluZWNhcCIsInN0cm9rZUxpbmVqb2luIiwic3Ryb2tlV2lkdGgiLCJkIiwiYnV0dG9uIiwib25DbGljayIsImVuc3VyZVVzZXJBdHRyaWJ1dGVzQ29tcGxldGUiLCJzZXNzaW9uIiwidG9rZW5zIiwiYWNjZXNzVG9rZW4iLCJpZFRva2VuIiwibWlzc2luZ0F0dHJpYnV0ZXMiLCJyZXF1aXJlZEF0dHJpYnV0ZXMiLCJhdHRyIiwicHVzaCIsImF0dHJpYnV0ZXNUb1VwZGF0ZSIsInRpbWVzdGFtcCIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsImZvckVhY2giLCJzdWIiLCJ2NSIsInV1aWR2NSIsInJlcXVpcmUiLCJURU5BTlRfTkFNRVNQQUNFIiwiY3J5cHRvIiwicmFuZG9tVVVJRCIsImdldEJlc3RCdXNpbmVzc05hbWUiLCJ0b1N0cmluZyIsImJvZHkiLCJzdHJpbmdpZnkiLCJhdHRyaWJ1dGVzIiwiZm9yY2VVcGRhdGUiLCJlcnJvclRleHQiLCJ0ZXh0IiwiY2F0Y2giLCJ1cGRhdGVkQXR0cmlidXRlcyIsImZldGNoRXJyb3IiLCJnZW5lcmF0ZURldGVybWluaXN0aWNUZW5hbnRJZCIsInVzZXJJZCIsImVuY29kZXIiLCJUZXh0RW5jb2RlciIsImVuY29kZSIsIk5BTUVTUEFDRSIsIm5hbWVzcGFjZUJ5dGVzIiwiVWludDhBcnJheSIsInJlcGxhY2UiLCJtYXRjaCIsIm1hcCIsImhleCIsImkiLCJwYXJzZUludCIsImNvbWJpbmVkQnl0ZXMiLCJzZXQiLCJzdWJ0bGUiLCJkaWdlc3QiLCJ0aGVuIiwiYnVmZmVyIiwiaGFzaEFycmF5IiwiQXJyYXkiLCJmcm9tIiwiYiIsInBhZFN0YXJ0Iiwiam9pbiIsInV1aWQiLCJzbGljZSIsImdlbmVyYXRlU2ltcGxlSGFzaFRlbmFudElkIiwiaGFzaCIsInJlZHVjZSIsImFjYyIsImNoYXIiLCJjaGFyQ29kZUF0IiwidmVyaWZ5Q29nbml0b1N0YXRlIiwiaWRlbnRpdHlUb2tlbiIsImlkVG9rZW5QYXlsb2FkIiwicGF5bG9hZCIsInNldHVwQXdzUmRzVGFibGVzIiwic2NoZW1hTmFtZSIsImVycm9yRGF0YSIsImluaXRpYWxpemVEYXRhYmFzZSIsImNvb2tpZVRlbmFudElkIiwicmVzdWx0IiwiZW5zdXJlQ29uc2lzdGVudFRlbmFudElkIiwic291cmNlIiwidXNlckF0dHJpYnV0ZXMiLCJjb2duaXRvVGVuYW50SWQiLCJ1cGRhdGVFcnJvciIsImRldGVybWluaXN0aWNUZW5hbnRJZCIsImVuc3VyZVRlbmFudFNjaGVtYSIsInV1aWRFcnJvciIsIm5ld1RlbmFudElkIiwiZmluYWxUZW5hbnRJZCIsImluaXRSZXNwb25zZSIsImluaXREYXRhIiwidGFibGVFeGlzdHMiLCJqc29uRXJyb3IiLCJpbml0RXJyb3IiLCJ0ZW5hbnRSZXNwb25zZSIsImVtYWlsIiwiZm9yY2VDcmVhdGUiLCJ0ZW5hbnREYXRhIiwidGV4dEVycm9yIiwiY29nbml0b0Vycm9yIiwiZ2VuZXJhdGVkVGVuYW50SWQiLCJjaGVja09uYm9hcmRpbmdTdGF0dXMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJoYXNCdXNpbmVzc0lkIiwiaGFzQnVzaW5lc3NOYW1lIiwib25ib2FyZGluZ1N0YXR1cyIsInNldHVwRG9uZSIsInRvTG93ZXJDYXNlIiwiZGVidWciLCJlcnIiLCJhdHRyRXJyb3IiLCJzZXR1cENvbXBsZXRlZCIsImVuY29kZVVSSUNvbXBvbmVudCIsInRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJyZWZyZXNoVXNlckRhdGEiLCJoYW5kbGVTdWJzY3JpcHRpb25TdWNjZXNzIiwic3Vic2NyaXB0aW9uU3VjY2VzcyIsImdldCIsInNlc3Npb25JZCIsInNlc3Npb25faWQiLCJ1cmwiLCJVUkwiLCJocmVmIiwiZGVsZXRlIiwiaGlzdG9yeSIsInJlcGxhY2VTdGF0ZSIsInRpdGxlIiwiT2JqZWN0Iiwia2V5cyIsImZvcm1TdGF0ZSIsInRlbmFudE1hbmFnZXJSZXNwb25zZSIsInRlbmFudF9pZCIsImJ1c2luZXNzX25hbWUiLCJzY2hlbWFSZXN1bHQiLCJpZCIsInV1aWRSZWdleCIsInRlc3QiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/dashboard/DashboardClient.js\n"));

/***/ })

});