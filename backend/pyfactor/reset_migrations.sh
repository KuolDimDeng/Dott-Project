#!/bin/bash

echo "üîÑ Comprehensive Migration Reset Solution"
echo "========================================"

echo ""
echo "Option 1: Manual Migration Fake (Recommended for your current state)"
echo "-------------------------------------------------------------------"
echo "Since page_permissions table already exists, fake the specific migration:"
echo ""
echo "1. Connect to your production database:"
echo "   docker-compose exec backend python manage.py dbshell"
echo ""
echo "2. Check which RBAC tables exist:"
echo "   \\dt *permission*;"
echo "   \\dt *role*;"
echo "   \\dt *invitation*;"
echo ""
echo "3. If all RBAC tables exist, run:"
echo "   \\q"
echo "   docker-compose exec backend python manage.py migrate custom_auth 0012_add_rbac_models --fake"
echo ""
echo "4. Then run remaining migrations:"
echo "   docker-compose exec backend python manage.py migrate"

echo ""
echo "Option 2: Clean Database Reset (Nuclear Option)"
echo "------------------------------------------------"
echo "If you're okay with losing existing data:"
echo ""
echo "1. Drop and recreate the database:"
echo "   docker-compose down"
echo "   docker volume rm projectx_postgres_data"
echo "   docker-compose up -d db"
echo ""
echo "2. Run all migrations fresh:"
echo "   docker-compose exec backend python manage.py migrate"

echo ""
echo "Option 3: Selective Table Cleanup"
echo "-----------------------------------"
echo "Only remove problematic RBAC tables:"
echo ""
echo "1. Connect to database:"
echo "   docker-compose exec backend python manage.py dbshell"
echo ""
echo "2. Remove only RBAC tables:"
echo "   DROP TABLE IF EXISTS page_permissions CASCADE;"
echo "   DROP TABLE IF EXISTS user_page_access CASCADE;"
echo "   DROP TABLE IF EXISTS role_templates CASCADE;"
echo "   DROP TABLE IF EXISTS role_template_pages CASCADE;"
echo "   DROP TABLE IF EXISTS user_invitations CASCADE;"
echo "   DELETE FROM django_migrations WHERE app = 'custom_auth' AND name = '0012_add_rbac_models';"
echo "   \\q"
echo ""
echo "3. Run migrations:"
echo "   docker-compose exec backend python manage.py migrate"

echo ""
echo "Current Status Check Commands:"
echo "------------------------------"
echo "1. Check migration status:"
echo "   docker-compose exec backend python manage.py showmigrations"
echo ""
echo "2. Check database tables:"
echo "   docker-compose exec backend python manage.py dbshell"
echo "   \\dt;"
echo ""
echo "3. Check specific RBAC tables:"
echo "   \\dt *permission*; \\dt *role*; \\dt *invitation*;"
echo ""

echo "‚úÖ Choose the option that best fits your situation."
echo "‚ö†Ô∏è  Option 1 is safest if you have existing data."
echo "üî• Option 2 is fastest but deletes all data."