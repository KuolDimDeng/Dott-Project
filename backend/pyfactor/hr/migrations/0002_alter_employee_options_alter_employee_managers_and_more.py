# Generated by Django 5.1.7 on 2025-03-23 21:28

import uuid
import django.contrib.auth.models
from django.db import migrations, models
import django.utils.timezone

def check_if_role_exists(apps, schema_editor):
    # Check if the role column exists
    db_alias = schema_editor.connection.alias
    cursor = schema_editor.connection.cursor()
    cursor.execute(
        "SELECT column_name FROM information_schema.columns WHERE table_name = 'hr_employee' AND column_name = 'role'"
    )
    role_exists = cursor.fetchone() is not None
    return role_exists

class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('hr', '0001_initial'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='employee',
            options={'verbose_name': 'user', 'verbose_name_plural': 'users'},
        ),
        migrations.AlterModelManagers(
            name='employee',
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='employee',
            name='is_active',
            field=models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active'),
        ),
        migrations.AddField(
            model_name='employee',
            name='is_staff',
            field=models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status'),
        ),
        migrations.AddField(
            model_name='employee',
            name='is_superuser',
            field=models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status'),
        ),
        migrations.AddField(
            model_name='employee',
            name='last_login',
            field=models.DateTimeField(blank=True, null=True, verbose_name='last login'),
        ),
        migrations.AddField(
            model_name='employee',
            name='password',
            field=models.CharField(default='12345', max_length=128, verbose_name='password'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='employee',
            name='password_setup_token',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='employee',
            name='username',
            field=models.CharField(default='abcd', max_length=150, unique=True, verbose_name='username'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='employee',
            name='role',
            field=models.CharField(choices=[('ADMIN', 'Admin'), ('EMPLOYEE', 'Employee')], default='EMPLOYEE', max_length=20, null=True),
        ),
        # Removing all many-to-many relationships that are causing issues
    ]
