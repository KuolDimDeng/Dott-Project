#!/usr/bin/env python
import os
import sys
import django
from django.db import connections, connection, transaction

# Add the current directory and its parent to the Python path
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
sys.path.insert(0, parent_dir)

# Now set up Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'pyfactor.settings')
django.setup()

def execute_sql(sql, params=None):
    """Execute raw SQL against the database"""
    with connection.cursor() as cursor:
        cursor.execute(sql, params)

def create_banking_tables():
    """Create missing banking tables directly with SQL"""
    print("Creating missing banking tables...")
    
    # Create banking_banktransaction table
    sql = """
    CREATE TABLE IF NOT EXISTS banking_banktransaction (
        id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
        date TIMESTAMP WITH TIME ZONE NOT NULL,
        description VARCHAR(255) NOT NULL,
        amount NUMERIC(15, 2) NOT NULL,
        reference_number VARCHAR(100) NULL,
        type VARCHAR(20) NOT NULL,
        account_id BIGINT NOT NULL REFERENCES banking_bankaccount(id)
    );
    """
    
    try:
        execute_sql(sql)
        print("✅ banking_banktransaction table created")
        return True
    except Exception as e:
        print(f"❌ Error creating banking_banktransaction: {e}")
        return False

def mark_migrations_as_applied():
    """Mark banking migrations as applied"""
    print("Marking banking migrations as applied...")
    
    sql = """
    INSERT INTO django_migrations (app, name, applied)
    VALUES ('banking', '0002_banktransaction', NOW())
    ON CONFLICT DO NOTHING;
    """
    
    try:
        # Execute the SQL
        execute_sql(sql)
        print("✅ Marked banking.0002_banktransaction as applied")
        return True
    except Exception as e:
        print(f"❌ Error marking migrations: {e}")
        return False

def disable_database_routers():
    """Temporarily disable database routers"""
    print("Disabling database routers...")
    
    from django.conf import settings
    original_routers = settings.DATABASE_ROUTERS
    settings.DATABASE_ROUTERS = []
    
    print("✅ Database routers disabled")
    return original_routers

def disable_taxes_db():
    """Temporarily disable taxes database connection"""
    print("Temporarily disabling taxes database...")
    
    # Save the original config
    taxes_db_config = None
    if 'taxes' in connections.databases:
        taxes_db_config = connections.databases['taxes'].copy()
        
        # Point to main database temporarily
        connections.databases['taxes'] = connections.databases['default'].copy()
        print("Redirected taxes database to use default database")
    
    return taxes_db_config

def main():
    print("=== Final Migration Fix Script ===")
    
    # Disable taxes database first
    taxes_db_config = disable_taxes_db()
    
    # Disable database routers
    original_routers = disable_database_routers()
    
    try:
        # Create the banking transaction table
        if not create_banking_tables():
            print("Failed to create banking tables. Aborting.")
            return
        
        # Mark specific migrations as applied
        if not mark_migrations_as_applied():
            print("Failed to mark migrations as applied. Aborting.")
            return
        
        # Apply remaining migrations with standard Django command
        print("\nApplying remaining migrations...")
        from django.core.management import call_command
        call_command('migrate', '--fake-initial')
        
        print("\n=== Migration fix complete! ===")
        print("Your database schema has been updated and dependencies have been resolved.")
    except Exception as e:
        print(f"\n❌ Error during migration: {e}")
        print("Migration fix failed. Please check the errors above.")
    finally:
        # Restore original router configuration
        from django.conf import settings
        settings.DATABASE_ROUTERS = original_routers
        print("Original database routers restored")
        
        # Restore taxes database configuration
        if taxes_db_config:
            connections.databases['taxes'] = taxes_db_config
            print("Restored original taxes database configuration")

if __name__ == "__main__":
    main()