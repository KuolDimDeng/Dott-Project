# hr/views.py

from django.http import JsonResponse
from rest_framework import status
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from .models import Employee, Role, EmployeeRole, AccessPermission, PreboardingForm
from .serializers import (
    EmployeeSerializer, 
    RoleSerializer, 
    EmployeeRoleSerializer, 
    AccessPermissionSerializer,
    PreboardingFormSerializer
)
from django.shortcuts import get_object_or_404
from django.db.models import Q
from django.core.mail import send_mail
from django.conf import settings
import uuid
from datetime import datetime

from pyfactor.logging_config import get_logger

logger = get_logger()

@api_view(['GET', 'POST'])
@permission_classes([IsAuthenticated])
def employee_list(request):
    """Get list of employees or create a new employee"""
    if request.method == 'GET':
        """Get list of employees with role-based filtering"""
        user_role = request.user.role
        if user_role.upper() == 'owner':
            employees = Employee.objects.all()
        else:
            employees = Employee.objects.filter(business_id=request.user.business_id)
        
        serializer = EmployeeSerializer(employees, many=True)
        return Response(serializer.data)
    elif request.method == 'POST':
        # Handle employee creation directly instead of delegating
        user_role = request.user.role
        logger.info(f"Creating employee with user role: {user_role}")
        
        if user_role.upper() != 'OWNER':
            logger.error(f"Permission denied: User with role {user_role} tried to create employee")
            return Response(
                {"error": "Only owners can create employees"},
                status=status.HTTP_403_FORBIDDEN
            )

        logger.info(f"Request data: {request.data}")
        serializer = EmployeeSerializer(data=request.data)
        if serializer.is_valid():
            # Set the business_id from the current user
            employee = serializer.save(business_id=request.user.business_id)
            # Set role to user for all employees
            employee.role = "user"
            employee.save()
            
            # Generate a unique token for password setup
            token = str(uuid.uuid4())
            employee.password_setup_token = token
            employee.save()

            # Send invitation email
            subject = 'Welcome to Our Platform - Set Up Your Account'
            message = f"""
            Hello {employee.first_name},

            You have been invited to join our platform. Please click the link below to set up your account:

            {settings.FRONTEND_URL}/setup-password?token={token}

            Best regards,
            Your Team
            """
            
            try:
                send_mail(
                    subject,
                    message,
                    settings.DEFAULT_FROM_EMAIL,
                    [employee.email],
                    fail_silently=False,
                )
                logger.info(f"Invitation email sent to {employee.email}")
            except Exception as e:
                # Log the error but don't fail the request
                logger.error(f"Error sending email: {str(e)}")

            return Response(serializer.data, status=status.HTTP_201_CREATED)
        
        logger.error(f"Validation errors: {serializer.errors}")
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

@api_view(['GET', 'PUT', 'DELETE'])
@permission_classes([IsAuthenticated])
def employee_detail(request, pk):
    """Get, update or delete an employee"""
    employee = get_object_or_404(Employee, pk=pk)
    
    # Check permissions
    if request.user.role.upper() != 'owner' and request.user.business_id != employee.business_id:
        return Response(
            {"error": "You don't have permission to access this employee"},
            status=status.HTTP_403_FORBIDDEN
        )

    if request.method == 'GET':
        serializer = EmployeeSerializer(employee)
        return Response(serializer.data)

    elif request.method == 'PUT':
        serializer = EmployeeSerializer(employee, data=request.data, partial=True)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    elif request.method == 'DELETE':
        if request.user.role.upper() != 'owner':
            return Response(
                {"error": "Only owners can delete employees"},
                status=status.HTTP_403_FORBIDDEN
            )
        employee.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def set_employee_permissions(request, pk):
    """Set menu access permissions for an employee"""
    if request.user.role.upper() != 'owner':
        return Response(
            {"error": "Only owners can set permissions"},
            status=status.HTTP_403_FORBIDDEN
        )

    employee = get_object_or_404(Employee, pk=pk)
    permissions = request.data.get('permissions', [])
    
    # Update employee's access privileges
    employee.site_access_privileges = permissions
    employee.save()
    
    return Response({"message": "Permissions updated successfully"})

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_available_permissions(request):
    """Get list of available menu options for permission setting"""
    menu_options = [
        {'id': 'hr', 'name': 'HR Management'},
        {'id': 'inventory', 'name': 'Inventory'},
        {'id': 'sales', 'name': 'Sales'},
        {'id': 'purchases', 'name': 'Purchases'},
        {'id': 'accounting', 'name': 'Accounting'},
        {'id': 'reports', 'name': 'Reports'},
        {'id': 'settings', 'name': 'Settings'},
    ]
    return Response(menu_options)

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def setup_employee_password(request):
    """Handle employee password setup"""
    token = request.data.get('token')
    password = request.data.get('password')
    
    try:
        employee = Employee.objects.get(password_setup_token=token)
        employee.set_password(password)
        employee.password_setup_token = None
        employee.save()
        return Response({"message": "Password set successfully"})
    except Employee.DoesNotExist:
        return Response(
            {"error": "Invalid or expired token"},
            status=status.HTTP_400_BAD_REQUEST
        )

@api_view(['GET', 'POST'])
@permission_classes([IsAuthenticated])
def role_list(request):
    if request.method == 'GET':
        roles = Role.objects.all()
        serializer = RoleSerializer(roles, many=True)
        return Response(serializer.data)
    elif request.method == 'POST':
        serializer = RoleSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

@api_view(['GET', 'PUT', 'DELETE'])
@permission_classes([IsAuthenticated])
def role_detail(request, pk):
    role = get_object_or_404(Role, pk=pk)

    if request.method == 'GET':
        serializer = RoleSerializer(role)
        return Response(serializer.data)
    elif request.method == 'PUT':
        serializer = RoleSerializer(role, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    elif request.method == 'DELETE':
        role.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)

@api_view(['GET', 'POST'])
@permission_classes([IsAuthenticated])
def employee_role_list(request):
    if request.method == 'GET':
        employee_roles = EmployeeRole.objects.all()
        serializer = EmployeeRoleSerializer(employee_roles, many=True)
        return Response(serializer.data)
    elif request.method == 'POST':
        serializer = EmployeeRoleSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

@api_view(['GET', 'PUT', 'DELETE'])
@permission_classes([IsAuthenticated])
def employee_role_detail(request, pk):
    employee_role = get_object_or_404(EmployeeRole, pk=pk)

    if request.method == 'GET':
        serializer = EmployeeRoleSerializer(employee_role)
        return Response(serializer.data)
    elif request.method == 'PUT':
        serializer = EmployeeRoleSerializer(employee_role, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    elif request.method == 'DELETE':
        employee_role.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)

@api_view(['GET', 'POST'])
@permission_classes([IsAuthenticated])
def access_permission_list(request):
    if request.method == 'GET':
        access_permissions = AccessPermission.objects.all()
        serializer = AccessPermissionSerializer(access_permissions, many=True)
        return Response(serializer.data)
    elif request.method == 'POST':
        serializer = AccessPermissionSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

@api_view(['GET', 'PUT', 'DELETE'])
@permission_classes([IsAuthenticated])
def access_permission_detail(request, pk):
    access_permission = get_object_or_404(AccessPermission, pk=pk)

    if request.method == 'GET':
        serializer = AccessPermissionSerializer(access_permission)
        return Response(serializer.data)
    elif request.method == 'PUT':
        serializer = AccessPermissionSerializer(access_permission, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    elif request.method == 'DELETE':
        access_permission.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)

@api_view(['GET', 'POST'])
@permission_classes([IsAuthenticated])
def preboarding_form_list(request):
    if request.method == 'GET':
        preboarding_forms = PreboardingForm.objects.all()
        serializer = PreboardingFormSerializer(preboarding_forms, many=True)
        return Response(serializer.data)
    elif request.method == 'POST':
        serializer = PreboardingFormSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

@api_view(['GET', 'PUT', 'DELETE'])
@permission_classes([IsAuthenticated])
def preboarding_form_detail(request, pk):
    preboarding_form = get_object_or_404(PreboardingForm, pk=pk)

    if request.method == 'GET':
        serializer = PreboardingFormSerializer(preboarding_form)
        return Response(serializer.data)
    elif request.method == 'PUT':
        serializer = PreboardingFormSerializer(preboarding_form, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    elif request.method == 'DELETE':
        preboarding_form.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)

@api_view(['GET', 'OPTIONS', 'HEAD'])
def health_check(request):
    """Health check endpoint for the HR module that doesn't require tenant ID or authentication"""
    from rest_framework.permissions import AllowAny
    from rest_framework.response import Response
    from rest_framework import status
    from datetime import datetime
    
    # Respond to preflight requests
    if request.method == 'OPTIONS':
        response = Response()
        # Always allow any origin for the health check endpoint
        origin = request.headers.get('Origin', '*')
        response["Access-Control-Allow-Origin"] = origin
        response["Access-Control-Allow-Methods"] = "GET, OPTIONS, HEAD"
        response["Access-Control-Allow-Headers"] = (
            "Content-Type, Authorization, x-tenant-id, X-Tenant-ID, X-TENANT-ID, "
            "access-control-allow-headers, Access-Control-Allow-Headers, "
            "access-control-allow-origin, Access-Control-Allow-Origin, "
            "access-control-allow-methods, Access-Control-Allow-Methods, "
            "x-request-id, cache-control, x-user-id, x-id-token"
        )
        response["Access-Control-Allow-Credentials"] = "true"
        response["Access-Control-Max-Age"] = "86400"
        return response
    
    # Handle HEAD requests
    if request.method == 'HEAD':
        response = Response(status=status.HTTP_200_OK)
        origin = request.headers.get('Origin', '*')
        response["Access-Control-Allow-Origin"] = origin
        response["Access-Control-Allow-Methods"] = "GET, OPTIONS, HEAD"
        response["Access-Control-Allow-Credentials"] = "true"
        return response

    # Create explicit response with CORS headers
    response = Response({
        "status": "healthy",
        "module": "hr",
        "timestamp": datetime.now().isoformat(),
        "auth_required": False,
        "tenant_id": getattr(request, 'tenant_id', None)
    }, status=status.HTTP_200_OK)
    
    # Add CORS headers
    origin = request.headers.get('Origin', '*')
    response["Access-Control-Allow-Origin"] = origin
    response["Access-Control-Allow-Methods"] = "GET, OPTIONS, HEAD"
    response["Access-Control-Allow-Headers"] = (
        "Content-Type, Authorization, x-tenant-id, X-Tenant-ID, "
        "access-control-allow-headers, Access-Control-Allow-Headers, "
        "access-control-allow-origin, Access-Control-Allow-Origin, "
        "access-control-allow-methods, Access-Control-Allow-Methods, "
        "x-request-id, cache-control, x-user-id, x-id-token"
    )
    response["Access-Control-Allow-Credentials"] = "true"
    
    return response