#!/usr/bin/env python
import os
import sys

# Add the current directory and its parent to the Python path
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
sys.path.insert(0, parent_dir)

# Now set up Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'pyfactor.settings')

import django
django.setup()

from django.db import connections, connection, transaction
from django.core.management import call_command

def execute_sql(sql, params=None):
    """Execute raw SQL against the database"""
    with connection.cursor() as cursor:
        cursor.execute(sql, params)

def create_missing_tables():
    """Create missing tables directly with SQL"""
    print("Creating missing tables...")
    
    # Create banking_bankaccount table
    banking_bankaccount_sql = """
    CREATE TABLE IF NOT EXISTS banking_bankaccount (
        id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
        account_name VARCHAR(255) NOT NULL,
        account_number VARCHAR(50) NOT NULL,
        bank_name VARCHAR(255) NOT NULL,
        routing_number VARCHAR(50) NULL,
        balance NUMERIC(15, 2) NOT NULL,
        currency VARCHAR(3) NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE NOT NULL,
        updated_at TIMESTAMP WITH TIME ZONE NOT NULL
    );
    """
    
    # Create users_business table if it doesn't exist
    users_business_sql = """
    CREATE TABLE IF NOT EXISTS users_business (
        id UUID PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
    );
    """
    
    # Create onboarding_onboardingprogress table
    onboarding_progress_sql = """
    CREATE TABLE IF NOT EXISTS onboarding_onboardingprogress (
        id UUID PRIMARY KEY,
        onboarding_status VARCHAR(256) NOT NULL,
        account_status VARCHAR(9) NOT NULL,
        user_role VARCHAR(10) NOT NULL,
        subscription_plan VARCHAR(12) NOT NULL,
        current_step VARCHAR(256) NOT NULL,
        next_step VARCHAR(256) NULL,
        completed_steps JSONB NOT NULL,
        last_active_step VARCHAR(256) NULL,
        created_at TIMESTAMP WITH TIME ZONE NOT NULL,
        updated_at TIMESTAMP WITH TIME ZONE NOT NULL,
        last_login TIMESTAMP WITH TIME ZONE NULL,
        access_token_expiration TIMESTAMP WITH TIME ZONE NULL,
        completed_at TIMESTAMP WITH TIME ZONE NULL,
        attribute_version VARCHAR(10) NOT NULL,
        preferences JSONB NOT NULL,
        setup_error TEXT NULL,
        selected_plan VARCHAR(12) NOT NULL,
        business_id UUID NULL,
        user_id UUID NOT NULL UNIQUE
    );
    """
    
    try:
        # Use transaction to ensure all tables are created together
        with transaction.atomic():
            execute_sql(users_business_sql)
            print("✅ users_business table created")
            
            execute_sql(banking_bankaccount_sql)
            print("✅ banking_bankaccount table created")
            
            execute_sql(onboarding_progress_sql)
            print("✅ onboarding_onboardingprogress table created")
            
        return True
    except Exception as e:
        print(f"❌ Error creating tables: {e}")
        return False

def mark_migrations_as_applied():
    """Mark critical migrations as applied"""
    print("Marking critical migrations as applied...")
    
    migrations_to_mark = [
        ('users', '0001_initial'),
        ('onboarding', '0001_initial'),
        ('banking', '0001_initial'),
    ]
    
    sql = """
    INSERT INTO django_migrations (app, name, applied)
    VALUES (%s, %s, NOW())
    ON CONFLICT DO NOTHING;
    """
    
    try:
        # First make sure the migrations table exists
        execute_sql("""
        CREATE TABLE IF NOT EXISTS django_migrations (
            id SERIAL PRIMARY KEY,
            app VARCHAR(255) NOT NULL,
            name VARCHAR(255) NOT NULL,
            applied TIMESTAMP WITH TIME ZONE NOT NULL
        );
        """)
        
        # Then mark migrations as applied
        with connection.cursor() as cursor:
            for app, name in migrations_to_mark:
                cursor.execute(sql, [app, name])
                print(f"✅ Marked {app}.{name} as applied")
        
        return True
    except Exception as e:
        print(f"❌ Error marking migrations: {e}")
        return False

def disable_database_routers():
    """Temporarily disable database routers to allow migrations"""
    print("Disabling database routers...")
    
    from django.conf import settings
    original_routers = settings.DATABASE_ROUTERS
    settings.DATABASE_ROUTERS = []
    
    print("✅ Database routers disabled")
    return original_routers

def disable_taxes_db():
    """Temporarily disable taxes database connection"""
    print("Temporarily disabling taxes database...")
    
    # Save the original config
    taxes_db_config = None
    if 'taxes' in connections.databases:
        taxes_db_config = connections.databases['taxes'].copy()
        
        # Point to main database temporarily
        connections.databases['taxes'] = connections.databases['default'].copy()
        print("Redirected taxes database to use default database")
    
    return taxes_db_config

def main():
    print("=== Emergency Migration Fix Script ===")
    
    # Disable taxes database first
    taxes_db_config = disable_taxes_db()
    
    # Disable database routers
    original_routers = disable_database_routers()
    
    try:
        # First, create the missing tables directly
        if not create_missing_tables():
            print("Failed to create missing tables. Aborting.")
            return
        
        # Mark critical migrations as applied
        if not mark_migrations_as_applied():
            print("Failed to mark migrations as applied. Aborting.")
            return
        
        # Apply remaining migrations with --fake-initial flag
        print("\nApplying remaining migrations...")
        call_command('migrate', '--fake-initial', verbosity=1)
        
        print("\n=== Migration fix complete! ===")
        print("Your database schema has been updated and dependencies have been resolved.")
    except Exception as e:
        print(f"\n❌ Error during migration: {e}")
        print("Migration fix failed. Please check the errors above.")
    finally:
        # Restore original router configuration
        from django.conf import settings
        settings.DATABASE_ROUTERS = original_routers
        print("Original database routers restored")
        
        # Restore taxes database configuration
        if taxes_db_config:
            connections.databases['taxes'] = taxes_db_config
            print("Restored original taxes database configuration")

if __name__ == "__main__":
    main()