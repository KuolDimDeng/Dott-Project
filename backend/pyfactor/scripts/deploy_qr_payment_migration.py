#!/usr/bin/env python3
"""
Deploy QRPaymentTransaction Migration to Staging
================================================

This script deploys the QRPaymentTransaction model migration to the staging environment.
Run this script to apply the migration on staging before production deployment.

Usage:
    python scripts/deploy_qr_payment_migration.py

Requirements:
    - Django management commands available
    - Database connection configured
    - Migration files present in payments/migrations/
"""

import os
import sys
import subprocess
import logging
from pathlib import Path

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def run_command(command, description, check=True):
    """Run a shell command with logging."""
    logger.info(f"üîÑ {description}")
    logger.info(f"   Command: {command}")
    
    try:
        result = subprocess.run(
            command,
            shell=True,
            capture_output=True,
            text=True,
            check=check
        )
        
        if result.stdout:
            logger.info(f"‚úÖ Output: {result.stdout.strip()}")
        if result.stderr and result.returncode == 0:
            logger.info(f"‚ö†Ô∏è  Warning: {result.stderr.strip()}")
        
        return result
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå Command failed with exit code {e.returncode}")
        if e.stdout:
            logger.error(f"   Stdout: {e.stdout.strip()}")
        if e.stderr:
            logger.error(f"   Stderr: {e.stderr.strip()}")
        raise

def check_migration_exists():
    """Check if the QRPaymentTransaction migration file exists."""
    migration_file = Path(__file__).parent.parent / "payments" / "migrations" / "0006_qr_payment_transaction.py"
    
    if not migration_file.exists():
        logger.error(f"‚ùå Migration file not found: {migration_file}")
        logger.error("   Please ensure the migration file exists before running this script.")
        return False
    
    logger.info(f"‚úÖ Migration file found: {migration_file}")
    return True

def check_django_setup():
    """Check if Django is properly configured."""
    try:
        import django
        from django.conf import settings
        
        if not settings.configured:
            logger.error("‚ùå Django settings not configured")
            return False
        
        logger.info(f"‚úÖ Django configured with database: {settings.DATABASES['default']['NAME']}")
        return True
    except ImportError:
        logger.error("‚ùå Django not installed or not importable")
        return False

def show_migration_plan():
    """Show what migrations will be applied."""
    logger.info("üîç Checking migration plan...")
    
    result = run_command(
        "python manage.py showmigrations payments --plan",
        "Showing migration plan for payments app",
        check=False
    )
    
    if result.returncode == 0:
        logger.info("‚úÖ Migration plan retrieved successfully")
    else:
        logger.warning("‚ö†Ô∏è  Could not retrieve migration plan (this is normal if database is not accessible)")

def run_migration():
    """Apply the QRPaymentTransaction migration."""
    logger.info("üöÄ Applying QRPaymentTransaction migration...")
    
    # Apply all pending migrations for payments app
    result = run_command(
        "python manage.py migrate payments",
        "Applying payments app migrations"
    )
    
    logger.info("‚úÖ QRPaymentTransaction migration applied successfully!")
    return True

def verify_migration():
    """Verify that the migration was applied successfully."""
    logger.info("üîç Verifying migration was applied...")
    
    # Check if the table exists
    result = run_command(
        "python manage.py shell -c \"from payments.models import QRPaymentTransaction; print('Table exists:', QRPaymentTransaction._meta.db_table)\"",
        "Verifying QRPaymentTransaction table exists",
        check=False
    )
    
    if result.returncode == 0:
        logger.info("‚úÖ QRPaymentTransaction model is accessible")
        return True
    else:
        logger.warning("‚ö†Ô∏è  Could not verify table (this may be normal in some environments)")
        return False

def main():
    """Main deployment function."""
    logger.info("üöÄ Starting QRPaymentTransaction Migration Deployment")
    logger.info("=" * 60)
    
    try:
        # Step 1: Check prerequisites
        logger.info("üìã Step 1: Checking prerequisites...")
        
        if not check_migration_exists():
            sys.exit(1)
        
        if not check_django_setup():
            logger.error("   Please ensure Django is properly configured")
            sys.exit(1)
        
        # Step 2: Show migration plan
        logger.info("\nüìã Step 2: Reviewing migration plan...")
        show_migration_plan()
        
        # Step 3: Apply migration
        logger.info("\nüîÑ Step 3: Applying migration...")
        run_migration()
        
        # Step 4: Verify migration
        logger.info("\nüîç Step 4: Verifying migration...")
        verify_migration()
        
        # Success
        logger.info("\n" + "=" * 60)
        logger.info("üéâ QRPaymentTransaction Migration Deployment Complete!")
        logger.info("")
        logger.info("‚úÖ The QRPaymentTransaction model is now available in the database")
        logger.info("‚úÖ API endpoints should now work without 404 errors")
        logger.info("‚úÖ QR payment functionality should be fully operational")
        logger.info("")
        logger.info("Next Steps:")
        logger.info("1. Test the QR payment API endpoints")
        logger.info("2. Verify QR code generation and payment processing")
        logger.info("3. Deploy to production when staging tests pass")
        
    except KeyboardInterrupt:
        logger.info("\n‚ö†Ô∏è  Deployment interrupted by user")
        sys.exit(1)
    except Exception as e:
        logger.error(f"\n‚ùå Deployment failed: {str(e)}")
        logger.error("Please check the error messages above and resolve any issues")
        sys.exit(1)

if __name__ == "__main__":
    # Ensure we're in the correct directory
    script_dir = Path(__file__).parent
    project_root = script_dir.parent
    
    if not (project_root / "manage.py").exists():
        logger.error("‚ùå manage.py not found. Please run this script from the Django project root")
        sys.exit(1)
    
    os.chdir(project_root)
    logger.info(f"üìÅ Working directory: {project_root}")
    
    main()