#!/usr/bin/env python
import os
import sys
import django
from django.db import connections, connection, transaction as db_transaction

# Add the current directory and its parent to the Python path
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
sys.path.insert(0, parent_dir)

# Now set up Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'pyfactor.settings')
django.setup()

def execute_sql(sql, params=None):
    """Execute raw SQL against the database"""
    with connection.cursor() as cursor:
        cursor.execute(sql, params)

def create_all_missing_tables():
    """Create all missing tables directly with SQL"""
    print("Creating all missing tables...")
    
    tables = {
        # Banking tables
        "banking_bankaccount": """
            CREATE TABLE IF NOT EXISTS banking_bankaccount (
                id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                account_name VARCHAR(255) NOT NULL,
                account_number VARCHAR(50) NOT NULL,
                bank_name VARCHAR(255) NOT NULL,
                routing_number VARCHAR(50) NULL,
                balance NUMERIC(15, 2) NOT NULL,
                currency VARCHAR(3) NOT NULL,
                created_at TIMESTAMP WITH TIME ZONE NOT NULL,
                updated_at TIMESTAMP WITH TIME ZONE NOT NULL
            );
        """,
        
        "banking_banktransaction": """
            CREATE TABLE IF NOT EXISTS banking_banktransaction (
                id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                date TIMESTAMP WITH TIME ZONE NOT NULL,
                description VARCHAR(255) NOT NULL,
                amount NUMERIC(15, 2) NOT NULL,
                reference_number VARCHAR(100) NULL,
                type VARCHAR(20) NOT NULL,
                account_id BIGINT NOT NULL REFERENCES banking_bankaccount(id)
            );
        """,
        
        # Users tables
        "users_business": """
            CREATE TABLE IF NOT EXISTS users_business (
                id UUID PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
                updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
            );
        """,
        
        "users_userprofile": """
            CREATE TABLE IF NOT EXISTS users_userprofile (
                id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                bio TEXT NULL,
                phone VARCHAR(15) NULL,
                avatar VARCHAR(100) NULL,
                created_at TIMESTAMP WITH TIME ZONE NOT NULL,
                updated_at TIMESTAMP WITH TIME ZONE NOT NULL,
                user_id UUID NOT NULL UNIQUE,
                business_id UUID NULL REFERENCES users_business(id)
            );
        """,
        
        # Onboarding tables
        "onboarding_onboardingprogress": """
            CREATE TABLE IF NOT EXISTS onboarding_onboardingprogress (
                id UUID PRIMARY KEY,
                onboarding_status VARCHAR(256) NOT NULL,
                account_status VARCHAR(9) NOT NULL,
                user_role VARCHAR(10) NOT NULL,
                subscription_plan VARCHAR(12) NOT NULL,
                current_step VARCHAR(256) NOT NULL,
                next_step VARCHAR(256) NULL,
                completed_steps JSONB NOT NULL,
                last_active_step VARCHAR(256) NULL,
                created_at TIMESTAMP WITH TIME ZONE NOT NULL,
                updated_at TIMESTAMP WITH TIME ZONE NOT NULL,
                last_login TIMESTAMP WITH TIME ZONE NULL,
                access_token_expiration TIMESTAMP WITH TIME ZONE NULL,
                completed_at TIMESTAMP WITH TIME ZONE NULL,
                attribute_version VARCHAR(10) NOT NULL,
                preferences JSONB NOT NULL,
                setup_error TEXT NULL,
                selected_plan VARCHAR(12) NOT NULL,
                business_id UUID NULL REFERENCES users_business(id),
                user_id UUID NOT NULL UNIQUE
            );
        """
    }
    
    try:
        # Use transaction to ensure all tables are created together
        with db_transaction.atomic():
            for table_name, sql in tables.items():
                execute_sql(sql)
                print(f"✅ {table_name} table created")
            
        return True
    except Exception as e:
        print(f"❌ Error creating tables: {e}")
        return False

def mark_migrations_as_applied():
    """Mark critical migrations as applied"""
    print("Marking critical migrations as applied...")
    
    migrations_to_mark = [
        ('users', '0001_initial'),
        ('onboarding', '0001_initial'),
        ('banking', '0001_initial'),
        ('banking', '0002_banktransaction'),
        ('users', '0002_userprofile'),
        ('integrations', '0001_initial')
    ]
    
    sql = """
    INSERT INTO django_migrations (app, name, applied)
    VALUES (%s, %s, NOW())
    ON CONFLICT DO NOTHING;
    """
    
    try:
        # First make sure the migrations table exists
        execute_sql("""
        CREATE TABLE IF NOT EXISTS django_migrations (
            id SERIAL PRIMARY KEY,
            app VARCHAR(255) NOT NULL,
            name VARCHAR(255) NOT NULL,
            applied TIMESTAMP WITH TIME ZONE NOT NULL
        );
        """)
        
        # Then mark migrations as applied
        with connection.cursor() as cursor:
            for app, name in migrations_to_mark:
                cursor.execute(sql, [app, name])
                print(f"✅ Marked {app}.{name} as applied")
        
        return True
    except Exception as e:
        print(f"❌ Error marking migrations: {e}")
        return False

def disable_database_routers():
    """Temporarily disable database routers"""
    print("Disabling database routers...")
    
    from django.conf import settings
    original_routers = settings.DATABASE_ROUTERS
    settings.DATABASE_ROUTERS = []
    
    print("✅ Database routers disabled")
    return original_routers

def disable_taxes_db():
    """Temporarily disable taxes database connection"""
    print("Temporarily disabling taxes database...")
    
    # Save the original config
    taxes_db_config = None
    if 'taxes' in connections.databases:
        taxes_db_config = connections.databases['taxes'].copy()
        
        # Point to main database temporarily
        connections.databases['taxes'] = connections.databases['default'].copy()
        print("Redirected taxes database to use default database")
    
    return taxes_db_config

def main():
    print("=== Comprehensive Migration Fix Script ===")
    
    # Disable taxes database first
    taxes_db_config = disable_taxes_db()
    
    # Disable database routers
    original_routers = disable_database_routers()
    
    try:
        # Create all missing tables
        if not create_all_missing_tables():
            print("Failed to create missing tables. Aborting.")
            return
        
        # Mark specific migrations as applied
        if not mark_migrations_as_applied():
            print("Failed to mark migrations as applied. Aborting.")
            return
        
        # Apply remaining migrations with standard Django command
        print("\nApplying remaining migrations...")
        from django.core.management import call_command
        call_command('migrate', '--fake-initial')
        
        print("\n=== Migration fix complete! ===")
        print("Your database schema has been updated and dependencies have been resolved.")
    except Exception as e:
        print(f"\n❌ Error during migration: {e}")
        print("Migration fix failed. Please check the errors above.")
    finally:
        # Restore original router configuration
        from django.conf import settings
        settings.DATABASE_ROUTERS = original_routers
        print("Original database routers restored")
        
        # Restore taxes database configuration
        if taxes_db_config:
            connections.databases['taxes'] = taxes_db_config
            print("Restored original taxes database configuration")

if __name__ == "__main__":
    main()