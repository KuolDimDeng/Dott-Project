# Generated by Django 5.1.7 on 2025-03-25 18:22

from django.db import migrations, connection, transaction


def forward_userprofile_relations(apps, schema_editor):
    """Transfer FK relationships to UUID fields in UserProfile model"""
    db_alias = schema_editor.connection.alias
    connection = schema_editor.connection
    
    # Safely get the original model data with direct SQL
    print("Starting data migration for UserProfile relationships")
    
    userprofile_tenant_rows = []
    userprofile_business_rows = []
    
    # First check if backup tables exist to avoid transaction abort
    backup_exists = False
    with connection.cursor() as cursor:
        try:
            cursor.execute("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_schema = 'django_migrations_backup'
                    AND table_name = 'users_userprofile'
                )
            """)
            backup_exists = cursor.fetchone()[0]
        except Exception:
            backup_exists = False
    
    # Only try to access backup tables if they exist
    if backup_exists:
        try:
            with connection.cursor() as cursor:
                # Retrieve old UserProfile-Tenant relationships
                cursor.execute("""
                    SELECT id, tenant_id 
                    FROM django_migrations_backup.users_userprofile
                    WHERE tenant_id IS NOT NULL
                """)
                userprofile_tenant_rows = cursor.fetchall()
                
                # Retrieve old UserProfile-Business relationships
                cursor.execute("""
                    SELECT id, business_id 
                    FROM django_migrations_backup.users_userprofile
                    WHERE business_id IS NOT NULL
                """)
                userprofile_business_rows = cursor.fetchall()
        except Exception as e:
            print(f"Error accessing backup tables: {e}")
            # Reset these to empty in case of partial success
            userprofile_tenant_rows = []
            userprofile_business_rows = []
    
    # If backup tables don't exist or error occurred, try fallback method
    if not userprofile_tenant_rows and not userprofile_business_rows:
        try:
            print("Using fallback method for UserProfile relationships...")
            
            # Use a new transaction for the fallback to avoid transaction abort issues
            with transaction.atomic(using=db_alias):
                with connection.cursor() as cursor:
                    # Check if custom_auth_user has tenant_id field
                    cursor.execute("""
                        SELECT EXISTS (
                            SELECT FROM information_schema.columns
                            WHERE table_name = 'custom_auth_user'
                            AND column_name = 'tenant_id'
                        )
                    """)
                    has_user_tenant = cursor.fetchone()[0]
                    
                    # Check if users_businessmember table exists
                    cursor.execute("""
                        SELECT EXISTS (
                            SELECT FROM information_schema.tables
                            WHERE table_name = 'users_businessmember'
                        )
                    """)
                    has_businessmember = cursor.fetchone()[0]
                    
                    if has_user_tenant:
                        # Try to infer tenant relationships from user_tenant relationships
                        cursor.execute("""
                            SELECT up.id, u.tenant_id
                            FROM users_userprofile up
                            JOIN custom_auth_user u ON up.user_id = u.id
                            WHERE u.tenant_id IS NOT NULL
                        """)
                        userprofile_tenant_rows = cursor.fetchall()
                    
                    if has_businessmember:
                        # Try to infer business relationships from business membership
                        cursor.execute("""
                            SELECT up.id, bm.business_id
                            FROM users_userprofile up
                            JOIN users_businessmember bm ON up.user_id = bm.user_id
                            WHERE bm.business_id IS NOT NULL AND bm.role = 'OWNER'
                        """)
                        userprofile_business_rows = cursor.fetchall()
        except Exception as fallback_error:
            print(f"Fallback method failed: {fallback_error}")
            # Ensure we have empty lists rather than None
            userprofile_tenant_rows = []
            userprofile_business_rows = []
    
    # Get the UserProfile model from the apps registry
    UserProfile = apps.get_model('users', 'UserProfile')
    
    # Use a transaction for the data update to ensure consistency
    with transaction.atomic(using=db_alias):
        # Update UserProfile.tenant_id
        print(f"Updating {len(userprofile_tenant_rows)} userprofile-tenant relationships")
        for profile_id, tenant_id in userprofile_tenant_rows:
            try:
                UserProfile.objects.using(db_alias).filter(id=profile_id).update(tenant_id=tenant_id)
            except Exception as e:
                print(f"Error updating userprofile {profile_id} with tenant {tenant_id}: {e}")
        
        # Update UserProfile.business_id
        print(f"Updating {len(userprofile_business_rows)} userprofile-business relationships")
        for profile_id, business_id in userprofile_business_rows:
            try:
                UserProfile.objects.using(db_alias).filter(id=profile_id).update(business_id=business_id)
            except Exception as e:
                print(f"Error updating userprofile {profile_id} with business {business_id}: {e}")


def backward_userprofile_relations(apps, schema_editor):
    """No reverse migration needed since ForeignKey fields are removed"""
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0002_remove_userprofile_users_userp_tenant__d11818_idx_and_more'),
    ]

    operations = [
        migrations.RunPython(forward_userprofile_relations, backward_userprofile_relations),
    ]
