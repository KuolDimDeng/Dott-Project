"""
Migration to add StoreItems functionality to inventory app

To create this migration:
1. Add the models_storeitems import to models.py:
   from .models_storeitems import StoreItem, MerchantStoreItem, StoreItemVerification, StoreItemPriceHistory

2. Add the store_item field to Product model in models.py (after line 316):
   store_item = models.ForeignKey(
       'StoreItem',
       on_delete=models.SET_NULL,
       null=True,
       blank=True,
       related_name='merchant_products',
       help_text='Link to global product catalog'
   )

   barcode = models.CharField(
       max_length=50,
       blank=True,
       null=True,
       db_index=True,
       help_text='Product barcode for scanning'
   )

3. Run:
   python manage.py makemigrations inventory
   python manage.py migrate

4. Populate initial data:
   python manage.py populate_storeitems --source all --limit 1000
"""

# This is a documentation file for the migration process
# The actual migration will be generated by Django

MIGRATION_SQL = """
-- Create store_items table
CREATE TABLE IF NOT EXISTS store_items (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    barcode VARCHAR(50) UNIQUE NOT NULL,
    name VARCHAR(255) NOT NULL,
    brand VARCHAR(100),
    category VARCHAR(100),
    subcategory VARCHAR(100),
    description TEXT,
    image_url TEXT,
    unit VARCHAR(50),
    size VARCHAR(50),
    region_code VARCHAR(10),
    verified BOOLEAN DEFAULT FALSE,
    verification_count INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    created_by_merchant_id INTEGER
);

-- Create indexes
CREATE INDEX idx_store_items_barcode ON store_items(barcode);
CREATE INDEX idx_store_items_name_brand ON store_items(name, brand);
CREATE INDEX idx_store_items_category ON store_items(category, subcategory);
CREATE INDEX idx_store_items_region ON store_items(region_code);
CREATE INDEX idx_store_items_verified ON store_items(verified);

-- Create merchant_store_items table
CREATE TABLE IF NOT EXISTS merchant_store_items (
    id SERIAL PRIMARY KEY,
    merchant_id INTEGER NOT NULL,
    store_item_id UUID REFERENCES store_items(id) ON DELETE CASCADE,
    product_id UUID,
    sell_price DECIMAL(10,2) NOT NULL,
    cost_price DECIMAL(10,2),
    currency VARCHAR(3) DEFAULT 'USD',
    stock_quantity INTEGER DEFAULT 0,
    min_stock INTEGER DEFAULT 5,
    max_stock INTEGER,
    is_active BOOLEAN DEFAULT TRUE,
    out_of_stock BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    last_sold_at TIMESTAMP,
    UNIQUE(merchant_id, store_item_id)
);

-- Create indexes
CREATE INDEX idx_merchant_store_items ON merchant_store_items(merchant_id, store_item_id);
CREATE INDEX idx_merchant_items_active ON merchant_store_items(merchant_id, is_active);
CREATE INDEX idx_merchant_items_stock ON merchant_store_items(merchant_id, stock_quantity);

-- Create store_item_verifications table
CREATE TABLE IF NOT EXISTS store_item_verifications (
    id SERIAL PRIMARY KEY,
    store_item_id UUID REFERENCES store_items(id) ON DELETE CASCADE,
    merchant_id INTEGER NOT NULL,
    is_correct BOOLEAN DEFAULT TRUE,
    notes TEXT,
    verified_at TIMESTAMP DEFAULT NOW(),
    UNIQUE(store_item_id, merchant_id)
);

-- Create index
CREATE INDEX idx_verifications ON store_item_verifications(store_item_id, merchant_id);

-- Create store_item_price_history table
CREATE TABLE IF NOT EXISTS store_item_price_history (
    id SERIAL PRIMARY KEY,
    store_item_id UUID REFERENCES store_items(id) ON DELETE CASCADE,
    merchant_id INTEGER NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    currency VARCHAR(3) DEFAULT 'USD',
    location VARCHAR(100),
    recorded_at TIMESTAMP DEFAULT NOW()
);

-- Create indexes
CREATE INDEX idx_price_history_item ON store_item_price_history(store_item_id, recorded_at);
CREATE INDEX idx_price_history_location ON store_item_price_history(location, recorded_at);

-- Add store_item_id and barcode to existing Product table
ALTER TABLE inventory_product
ADD COLUMN IF NOT EXISTS store_item_id UUID REFERENCES store_items(id) ON DELETE SET NULL,
ADD COLUMN IF NOT EXISTS barcode VARCHAR(50);

CREATE INDEX IF NOT EXISTS idx_product_barcode ON inventory_product(barcode);
"""