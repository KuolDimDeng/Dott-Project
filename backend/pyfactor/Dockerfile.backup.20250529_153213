FROM python:3.12-slim

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    python3-dev \
    libpq-dev \
    curl \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/*

# Set work directory
WORKDIR /app

# Copy requirements first for better caching
COPY requirements-eb.txt ./

# Install Python dependencies with verbose output
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements-eb.txt

# Copy application code
COPY . .

# Create necessary directories
RUN mkdir -p staticfiles logs media

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV DJANGO_SETTINGS_MODULE=pyfactor.settings_eb
ENV PORT=8000

# Collect static files (allow failure for now)
RUN python manage.py collectstatic --noinput || echo "Static files collection failed, continuing..."

# Create a startup script
RUN echo '#!/bin/bash\n\
echo "Starting application..."\n\
echo "Python version: $(python --version)"\n\
echo "Django version: $(python -c "import django; print(django.__version__)")"\n\
echo "Current directory: $(pwd)"\n\
echo "Files in current directory:"\n\
ls -la\n\
echo "Running migrations..."\n\
python manage.py migrate --noinput || echo "Migration failed, continuing..."\n\
echo "Starting Gunicorn..."\n\
exec gunicorn pyfactor.wsgi:application \
    --bind 0.0.0.0:8000 \
    --workers 2 \
    --timeout 120 \
    --access-logfile - \
    --error-logfile - \
    --log-level debug' > /app/start.sh && chmod +x /app/start.sh

# Expose port
EXPOSE 8000

# Health check with longer start period
HEALTHCHECK --interval=30s --timeout=10s --start-period=120s --retries=5 \
  CMD curl -f http://localhost:8000/health/ || exit 1

# Run the startup script
CMD ["/app/start.sh"]
