# Generated by Django 4.2.16 on 2025-06-29 05:04

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('taxes', '0003_incometaxrate_tenant_id_payrolltaxfiling_tenant_id_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='TaxDataEntryControl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tenant_id', models.UUIDField(db_index=True, help_text='The tenant ID this record belongs to. Used by Row Level Security.', null=True)),
                ('control_type', models.CharField(choices=[('income_tax_rates', 'Income Tax Rates'), ('payroll_filings', 'Payroll Tax Filings'), ('tax_forms', 'Tax Forms'), ('api_calls', 'Tax API Calls')], max_length=50)),
                ('max_entries_per_hour', models.IntegerField(default=100)),
                ('max_entries_per_day', models.IntegerField(default=1000)),
                ('max_entries_per_month', models.IntegerField(default=10000)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'unique_together': {('tenant_id', 'control_type')},
            },
        ),
        migrations.CreateModel(
            name='TaxDataAbuseReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tenant_id', models.UUIDField(db_index=True, help_text='The tenant ID this record belongs to. Used by Row Level Security.', null=True)),
                ('report_type', models.CharField(max_length=100)),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('investigating', 'Under Investigation'), ('resolved', 'Resolved'), ('false_positive', 'False Positive'), ('confirmed', 'Confirmed Abuse')], default='pending', max_length=20)),
                ('description', models.TextField()),
                ('evidence', models.JSONField(blank=True, null=True)),
                ('action_taken', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_tax_abuse_reports', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tax_abuse_reports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TaxDataEntryLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tenant_id', models.UUIDField(db_index=True, help_text='The tenant ID this record belongs to. Used by Row Level Security.', null=True)),
                ('control_type', models.CharField(choices=[('income_tax_rates', 'Income Tax Rates'), ('payroll_filings', 'Payroll Tax Filings'), ('tax_forms', 'Tax Forms'), ('api_calls', 'Tax API Calls')], max_length=50)),
                ('entry_type', models.CharField(choices=[('create', 'Create'), ('update', 'Update'), ('delete', 'Delete'), ('bulk_create', 'Bulk Create'), ('bulk_update', 'Bulk Update'), ('api_call', 'API Call')], max_length=20)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('allowed', 'Allowed'), ('rate_limited', 'Rate Limited'), ('blocked', 'Blocked'), ('suspicious', 'Suspicious')], max_length=20)),
                ('entry_count', models.IntegerField(default=1)),
                ('details', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tax_entry_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['tenant_id', 'control_type', 'created_at'], name='taxes_taxda_tenant__d3b917_idx'), models.Index(fields=['user', 'created_at'], name='taxes_taxda_user_id_4cf80b_idx'), models.Index(fields=['status', 'created_at'], name='taxes_taxda_status_88ab59_idx')],
            },
        ),
        migrations.CreateModel(
            name='TaxDataBlacklist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tenant_id', models.UUIDField(db_index=True, help_text='The tenant ID this record belongs to. Used by Row Level Security.', null=True)),
                ('blacklist_type', models.CharField(choices=[('user', 'User'), ('tenant', 'Tenant'), ('ip', 'IP Address')], max_length=20)),
                ('identifier', models.CharField(db_index=True, max_length=255)),
                ('reason', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_tax_blacklists', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('blacklist_type', 'identifier')},
            },
        ),
    ]
