# Generated by Django 4.2.16 on 2025-06-14 23:00

from django.db import migrations, models, connection


def check_and_add_tenant_id(apps, schema_editor):
    """
    Check if tables exist before adding tenant_id fields.
    This handles the case where some models might not have been created yet.
    """
    db_alias = schema_editor.connection.alias
    
    with connection.cursor() as cursor:
        # Get list of existing tables
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name LIKE 'taxes_%'
        """)
        existing_tables = [row[0] for row in cursor.fetchall()]
        
        # Map of model names to table names
        model_table_map = {
            'incometaxrate': 'taxes_incometaxrate',
            'payrolltaxfiling': 'taxes_payrolltaxfiling',
            'state': 'taxes_state',
            'taxapitransaction': 'taxes_taxapitransaction',
            'taxfilinginstruction': 'taxes_taxfilinginstruction',
            'taxform': 'taxes_taxform',
        }
        
        # Add tenant_id to existing tables only
        for model_name, table_name in model_table_map.items():
            if table_name in existing_tables:
                # Check if tenant_id column already exists
                cursor.execute(f"""
                    SELECT column_name 
                    FROM information_schema.columns 
                    WHERE table_name = '{table_name}' 
                    AND column_name = 'tenant_id'
                """)
                
                if not cursor.fetchone():
                    # Add tenant_id column
                    cursor.execute(f"""
                        ALTER TABLE {table_name} 
                        ADD COLUMN tenant_id uuid NULL
                    """)
                    
                    # Add index
                    cursor.execute(f"""
                        CREATE INDEX IF NOT EXISTS {table_name}_tenant_id_idx 
                        ON {table_name}(tenant_id)
                    """)
                    
                    print(f"Added tenant_id to {table_name}")
                else:
                    print(f"tenant_id already exists in {table_name}")
            else:
                print(f"Table {table_name} does not exist, skipping...")


def reverse_tenant_id(apps, schema_editor):
    """Remove tenant_id fields if they exist."""
    with connection.cursor() as cursor:
        # Get list of existing tables
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name LIKE 'taxes_%'
        """)
        existing_tables = [row[0] for row in cursor.fetchall()]
        
        for table_name in existing_tables:
            # Check if tenant_id column exists
            cursor.execute(f"""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = '{table_name}' 
                AND column_name = 'tenant_id'
            """)
            
            if cursor.fetchone():
                cursor.execute(f"ALTER TABLE {table_name} DROP COLUMN tenant_id")
                print(f"Removed tenant_id from {table_name}")


class Migration(migrations.Migration):

    dependencies = [
        ('taxes', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(check_and_add_tenant_id, reverse_tenant_id),
    ]