#!/usr/bin/env python3
"""
Script: create_script.py
Purpose: Utility script to create new scripts with consistent naming and formatting
Date: 2025-04-19
Version: v1.0

This script creates new script files with the correct naming convention and template.
It automatically includes the current date in the filename and adds standard documentation.

Execution:
    cd /Users/kuoldeng/projectx/backend/pyfactor
    python scripts/create_script.py <issue_id> <brief_description>

Example:
    python scripts/create_script.py cors_fix "add middleware to fix CORS issues"
    
    This will create: YYYYMMDD_cors_fix_add_middleware.py
"""

import os
import sys
import datetime
import subprocess
import argparse

def get_current_date():
    """Get the current date in YYYYMMDD format"""
    today = datetime.datetime.now()
    formatted_date = today.strftime("%Y%m%d")
    return formatted_date

def create_filename(issue_id, description):
    """Create a valid filename from the issue ID and description"""
    # Get current date
    date_prefix = get_current_date()
    
    # Convert spaces in description to underscores
    safe_description = description.replace(" ", "_").lower()
    
    # Create filename
    filename = f"{date_prefix}_{issue_id}_{safe_description}.py"
    return filename

def generate_script_template(filename, issue_id, description):
    """Generate a standard template for the script"""
    date_today = datetime.datetime.now().strftime("%Y-%m-%d")
    
    template = f'''#!/usr/bin/env python3
"""
Script: {filename}
Purpose: {description.capitalize()}
Issue: {issue_id}
Author: Generated by create_script.py utility
Date: {date_today}
Version: v1.0

This script:
1. [Add purpose here]
2. [Add another purpose here]
3. [Add another purpose here]

Execution:
    cd /Users/kuoldeng/projectx/backend/pyfactor
    python scripts/{filename}

"""

import os
import sys
import logging
from pathlib import Path
from datetime import datetime

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('scripts/{issue_id}.log')
    ]
)
logger = logging.getLogger('{issue_id}')

# Define paths
SCRIPT_REGISTRY = Path('scripts/script_registry.txt')

def update_script_registry(success):
    """Update the script registry file with information about this script execution"""
    try:
        # Create registry directory if it doesn't exist
        os.makedirs(os.path.dirname(SCRIPT_REGISTRY), exist_ok=True)
        
        status = "SUCCESS" if success else "FAILURE"
        
        # Append to registry file
        with open(SCRIPT_REGISTRY, 'a') as f:
            f.write(f"{{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}} - {filename} - {description.capitalize()} - {{status}}\\n")
        
        logger.info("Updated script registry")
        return True
    except Exception as e:
        logger.error(f"Failed to update script registry: {{e}}")
        return False

def main():
    """Main function to execute the script"""
    logger.info("Starting {description} script")
    
    # Get project root directory
    script_dir = os.path.dirname(os.path.abspath(__file__))
    os.chdir(os.path.dirname(script_dir))  # Change to pyfactor directory
    
    # TODO: Add your implementation here
    
    # Update script registry
    success = True
    update_script_registry(success)
    
    if success:
        logger.info("{description.capitalize()} completed successfully.")
        return True
    else:
        logger.info("{description.capitalize()} completed with issues to address.")
        return False

if __name__ == "__main__":
    sys.exit(0 if main() else 1)
'''
    
    return template

def create_script(issue_id, description):
    """Create a new script file with the given issue ID and description"""
    # Create filename
    filename = create_filename(issue_id, description)
    file_path = os.path.join("scripts", filename)
    
    # Check if file already exists
    if os.path.exists(file_path):
        print(f"Error: File {file_path} already exists!")
        return False
    
    # Generate template
    template = generate_script_template(filename, issue_id, description)
    
    # Write template to file
    with open(file_path, "w") as f:
        f.write(template)
    
    # Make executable
    os.chmod(file_path, 0o755)
    
    print(f"Created script: {file_path}")
    print(f"Make sure to update the script with your implementation!")
    
    return True

def main():
    """Main function to parse arguments and create script"""
    parser = argparse.ArgumentParser(description="Create a new script with consistent naming and formatting")
    parser.add_argument("issue_id", help="Issue ID or brief name (e.g., 'cors_fix')")
    parser.add_argument("description", help="Brief description of the script purpose")
    
    args = parser.parse_args()
    
    # Create script
    success = create_script(args.issue_id, args.description)
    
    return 0 if success else 1

if __name__ == "__main__":
    if len(sys.argv) < 3:
        print("Error: Missing required arguments")
        print("Usage: python create_script.py <issue_id> <brief_description>")
        print("Example: python create_script.py cors_fix \"add middleware to fix CORS issues\"")
        sys.exit(1)
        
    sys.exit(main()) 