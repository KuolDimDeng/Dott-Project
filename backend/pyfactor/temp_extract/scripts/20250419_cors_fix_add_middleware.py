#!/usr/bin/env python3
"""
Script: 20250419_cors_fix_add_middleware.py
Purpose: Add custom CORS middleware to the Django settings to fix CORS issues
         between frontend (localhost:3000) and backend (127.0.0.1:8000)
Issue: Cross-Origin Request Blocked errors when frontend tries to access backend API
Author: Generated by AI assistant
Date: 2025-04-19
Version: v1.0

This script:
1. Adds custom_auth.cors.CorsMiddleware to the MIDDLEWARE list if not already present
2. Updates the CORS settings to accept requests from localhost:3000 with HTTPS
3. Explicitly allows credentials with CORS
4. Makes these changes in both settings.py and any backup settings files

Execution:
    cd /Users/kuoldeng/projectx/backend/pyfactor
    python scripts/20250419_cors_fix_add_middleware.py

"""

import os
import sys
import re
import logging
from pathlib import Path
import fileinput
import shutil
from datetime import datetime

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('scripts/cors_fix.log')
    ]
)
logger = logging.getLogger('cors-fix')

# Define paths
SETTINGS_PATH = Path('pyfactor/settings.py')
SETTINGS_BACKUP = Path('pyfactor/settings.py.cors_backup')
SCRIPT_REGISTRY = Path('scripts/script_registry.txt')

def backup_settings():
    """Create a backup of the settings file before modifying it"""
    try:
        # Create timestamp-based backup
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        backup_path = Path(f'pyfactor/settings.py.{timestamp}.bak')
        
        # Copy the file
        shutil.copy2(SETTINGS_PATH, backup_path)
        logger.info(f"Created backup of settings at {backup_path}")
        
        # Also create a standard backup
        shutil.copy2(SETTINGS_PATH, SETTINGS_BACKUP)
        return True
    except Exception as e:
        logger.error(f"Failed to backup settings file: {e}")
        return False

def update_middleware_list():
    """Add custom_auth.cors.CorsMiddleware to the MIDDLEWARE list if not already present"""
    middleware_updated = False
    cors_middleware_line = "    'custom_auth.cors.CorsMiddleware',"
    cors_position_after = "    'django.middleware.security.SecurityMiddleware',"
    
    try:
        # Read the file content
        with open(SETTINGS_PATH, 'r') as f:
            content = f.read()
        
        # Check if CorsMiddleware is already in the list
        if "custom_auth.cors.CorsMiddleware" in content:
            logger.info("CorsMiddleware is already in the MIDDLEWARE list. No changes needed.")
            return False
        
        # Prepare new content by inserting the cors middleware after SecurityMiddleware
        new_content = content.replace(
            cors_position_after, 
            f"{cors_position_after}\n{cors_middleware_line}"
        )
        
        # Write the updated content back to the file
        with open(SETTINGS_PATH, 'w') as f:
            f.write(new_content)
        
        logger.info("Added custom_auth.cors.CorsMiddleware to MIDDLEWARE list")
        middleware_updated = True
        
    except Exception as e:
        logger.error(f"Failed to update MIDDLEWARE list: {e}")
    
    return middleware_updated

def update_cors_settings():
    """Update CORS settings to ensure they accept requests from localhost:3000 with HTTPS"""
    cors_updated = False
    
    try:
        # Read the file content
        with open(SETTINGS_PATH, 'r') as f:
            content = f.read()
        
        # Check and update CORS settings
        cors_updates = [
            ("CORS_ALLOW_CREDENTIALS = True", "CORS_ALLOW_CREDENTIALS = True"),
            ("CORS_ALLOW_ALL_ORIGINS = True", "CORS_ALLOW_ALL_ORIGINS = False"),  # Change to False for security
        ]
        
        new_content = content
        for old, new in cors_updates:
            if old in content:
                new_content = new_content.replace(old, new)
        
        # Make sure we have all the required origins in CORS_ALLOWED_ORIGINS
        required_origins = [
            '"http://localhost:3000"',
            '"http://127.0.0.1:3000"',
            '"https://localhost:3000"',
            '"https://127.0.0.1:3000"',
            '"https://localhost"',
            '"https://127.0.0.1"',
            '"http://localhost"',
            '"http://127.0.0.1"',
        ]
        
        # Check if we need to add any origins
        if "CORS_ALLOWED_ORIGINS = [" in new_content:
            # Extract the current origins list
            pattern = r"CORS_ALLOWED_ORIGINS = \[(.*?)\]"
            match = re.search(pattern, new_content, re.DOTALL)
            
            if match:
                current_origins = match.group(1)
                updated_origins = current_origins
                
                # Add any missing origins
                for origin in required_origins:
                    if origin not in current_origins:
                        updated_origins += f"    {origin},\n"
                
                # Replace the origins list
                new_content = new_content.replace(match.group(0), f"CORS_ALLOWED_ORIGINS = [{updated_origins}]")
        
        # Update CORS_EXPOSE_HEADERS to include x-tenant-id
        if "CORS_EXPOSE_HEADERS" in new_content and "'x-tenant-id'" not in new_content:
            new_content = new_content.replace(
                "CORS_EXPOSE_HEADERS = [", 
                "CORS_EXPOSE_HEADERS = [\n    'x-tenant-id',  # Add tenant ID header\n"
            )
        
        # Make sure CORS preflight max age is set
        if "CORS_PREFLIGHT_MAX_AGE" not in new_content:
            new_content += "\n# Add this new setting for preflight caching\nCORS_PREFLIGHT_MAX_AGE = 86400\n"
        
        # Write the updated content back to the file if changes were made
        if new_content != content:
            with open(SETTINGS_PATH, 'w') as f:
                f.write(new_content)
            
            logger.info("Updated CORS settings")
            cors_updated = True
        else:
            logger.info("No changes needed for CORS settings")
        
    except Exception as e:
        logger.error(f"Failed to update CORS settings: {e}")
    
    return cors_updated

def update_script_registry():
    """Update the script registry file with information about this script execution"""
    try:
        # Create registry directory if it doesn't exist
        os.makedirs(os.path.dirname(SCRIPT_REGISTRY), exist_ok=True)
        
        # Append to registry file
        with open(SCRIPT_REGISTRY, 'a') as f:
            f.write(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - 20250419_cors_fix_add_middleware.py - Added custom CORS middleware to fix Cross-Origin issues - SUCCESS\n")
        
        logger.info("Updated script registry")
        return True
    except Exception as e:
        logger.error(f"Failed to update script registry: {e}")
        return False

def main():
    """Main function to execute the CORS fix"""
    logger.info("Starting CORS middleware fix script")
    
    # Get project root directory
    script_dir = os.path.dirname(os.path.abspath(__file__))
    os.chdir(os.path.dirname(script_dir))  # Change to pyfactor directory
    
    # Backup settings file
    if not backup_settings():
        logger.error("Failed to backup settings file. Aborting.")
        return False
    
    # Make the changes
    middleware_updated = update_middleware_list()
    cors_updated = update_cors_settings()
    
    # Update script registry
    update_script_registry()
    
    if middleware_updated or cors_updated:
        logger.info("CORS fix completed successfully. Please restart the Django server to apply changes.")
        logger.info("Run: python run_server.py")
    else:
        logger.info("No changes were needed. CORS settings are already correctly configured.")
    
    return True

if __name__ == "__main__":
    sys.exit(0 if main() else 1) 