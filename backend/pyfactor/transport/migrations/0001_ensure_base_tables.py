# Generated by Django 5.2.5 on 2025-08-30 18:47

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


def create_base_tables_if_not_exist(apps, schema_editor):
    """Create base transport tables only if they don't exist"""
    db_alias = schema_editor.connection.alias
    
    # SQL to create Equipment table if not exists
    equipment_sql = """
    CREATE TABLE IF NOT EXISTS transport_equipment (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        name VARCHAR(255) NOT NULL,
        equipment_type VARCHAR(100) NOT NULL,
        make VARCHAR(100),
        model VARCHAR(100),
        year INTEGER,
        vin VARCHAR(100),
        license_plate VARCHAR(50),
        status VARCHAR(50) NOT NULL DEFAULT 'active',
        purchase_date DATE,
        purchase_price DECIMAL(10,2),
        current_value DECIMAL(10,2),
        notes TEXT,
        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
        updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
    );
    """
    
    # SQL to create Driver table if not exists
    driver_sql = """
    CREATE TABLE IF NOT EXISTS transport_driver (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        user_id BIGINT,
        first_name VARCHAR(255) NOT NULL,
        last_name VARCHAR(255) NOT NULL,
        email VARCHAR(254),
        phone VARCHAR(20),
        license_number VARCHAR(100) NOT NULL,
        license_state VARCHAR(100) NOT NULL,
        license_expiration DATE NOT NULL,
        status VARCHAR(50) NOT NULL DEFAULT 'active',
        hire_date DATE,
        notes TEXT,
        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
        updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
        FOREIGN KEY (user_id) REFERENCES custom_auth_user(id) ON DELETE SET NULL
    );
    """
    
    # SQL to create Route table if not exists
    route_sql = """
    CREATE TABLE IF NOT EXISTS transport_route (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        name VARCHAR(255) NOT NULL,
        start_location VARCHAR(255) NOT NULL,
        end_location VARCHAR(255) NOT NULL,
        distance DECIMAL(10,2) NOT NULL,
        estimated_time INTERVAL NOT NULL,
        notes TEXT,
        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
        updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
    );
    """
    
    # SQL to create Load table if not exists
    load_sql = """
    CREATE TABLE IF NOT EXISTS transport_load (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        reference_number VARCHAR(100) UNIQUE NOT NULL,
        customer_id UUID NOT NULL,
        route_id UUID,
        driver_id UUID,
        equipment_id UUID,
        trip_id UUID,
        status VARCHAR(50) NOT NULL DEFAULT 'pending',
        pickup_date TIMESTAMPTZ NOT NULL,
        delivery_date TIMESTAMPTZ NOT NULL,
        pickup_location VARCHAR(255) NOT NULL,
        delivery_location VARCHAR(255) NOT NULL,
        cargo_description TEXT NOT NULL,
        weight DECIMAL(10,2) NOT NULL,
        volume DECIMAL(10,2),
        value DECIMAL(10,2),
        rate DECIMAL(10,2) NOT NULL,
        notes TEXT,
        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
        updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
        FOREIGN KEY (customer_id) REFERENCES crm_customer(id) ON DELETE CASCADE,
        FOREIGN KEY (route_id) REFERENCES transport_route(id) ON DELETE SET NULL,
        FOREIGN KEY (driver_id) REFERENCES transport_driver(id) ON DELETE SET NULL,
        FOREIGN KEY (equipment_id) REFERENCES transport_equipment(id) ON DELETE SET NULL
    );
    """
    
    # SQL to create Expense table if not exists
    expense_sql = """
    CREATE TABLE IF NOT EXISTS transport_expense (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        load_id UUID,
        equipment_id UUID,
        created_by_id BIGINT,
        expense_type VARCHAR(100) NOT NULL,
        amount DECIMAL(10,2) NOT NULL,
        date DATE NOT NULL,
        description TEXT,
        receipt VARCHAR(100),
        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
        updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
        FOREIGN KEY (load_id) REFERENCES transport_load(id) ON DELETE CASCADE,
        FOREIGN KEY (equipment_id) REFERENCES transport_equipment(id) ON DELETE CASCADE,
        FOREIGN KEY (created_by_id) REFERENCES custom_auth_user(id) ON DELETE SET NULL
    );
    """
    
    # SQL to create Maintenance table if not exists
    maintenance_sql = """
    CREATE TABLE IF NOT EXISTS transport_maintenance (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        equipment_id UUID NOT NULL,
        maintenance_type VARCHAR(100) NOT NULL,
        description TEXT NOT NULL,
        date_performed DATE NOT NULL,
        odometer_reading INTEGER,
        cost DECIMAL(10,2) NOT NULL,
        performed_by VARCHAR(255),
        notes TEXT,
        next_maintenance_date DATE,
        next_maintenance_odometer INTEGER,
        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
        updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
        FOREIGN KEY (equipment_id) REFERENCES transport_equipment(id) ON DELETE CASCADE
    );
    """
    
    # SQL to create Compliance table if not exists
    compliance_sql = """
    CREATE TABLE IF NOT EXISTS transport_compliance (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        equipment_id UUID,
        driver_id UUID,
        document_type VARCHAR(100) NOT NULL,
        document_number VARCHAR(100),
        issue_date DATE NOT NULL,
        expiration_date DATE NOT NULL,
        issuing_authority VARCHAR(255),
        document_file VARCHAR(100),
        notes TEXT,
        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
        updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
        FOREIGN KEY (equipment_id) REFERENCES transport_equipment(id) ON DELETE CASCADE,
        FOREIGN KEY (driver_id) REFERENCES transport_driver(id) ON DELETE CASCADE
    );
    """
    
    # Execute all SQL statements
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(equipment_sql)
        cursor.execute(driver_sql)
        cursor.execute(route_sql)
        cursor.execute(load_sql)
        cursor.execute(expense_sql)
        cursor.execute(maintenance_sql)
        cursor.execute(compliance_sql)
        
        # Add foreign key constraint for trip_id after trip table exists
        cursor.execute("""
            DO $$ 
            BEGIN
                IF NOT EXISTS (
                    SELECT 1 FROM information_schema.table_constraints 
                    WHERE constraint_name = 'transport_load_trip_id_fkey'
                    AND table_name = 'transport_load'
                ) THEN
                    ALTER TABLE transport_load 
                    ADD CONSTRAINT transport_load_trip_id_fkey 
                    FOREIGN KEY (trip_id) REFERENCES transport_trip(id) ON DELETE SET NULL;
                END IF;
            END $$;
        """)


def reverse_base_tables(apps, schema_editor):
    """Remove base tables - only use if absolutely necessary"""
    tables = [
        'transport_compliance',
        'transport_maintenance', 
        'transport_expense',
        'transport_load',
        'transport_route',
        'transport_driver',
        'transport_equipment'
    ]
    
    with schema_editor.connection.cursor() as cursor:
        for table in tables:
            cursor.execute(f"DROP TABLE IF EXISTS {table} CASCADE;")


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('crm', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RunPython(create_base_tables_if_not_exist, reverse_base_tables),
    ]