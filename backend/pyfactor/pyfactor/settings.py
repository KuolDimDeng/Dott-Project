"""
Django settings for pyfactor project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
import sys
import logging
import logging.config
from datetime import timedelta
from dotenv import load_dotenv
# from cryptography.fernet import Fernet  # Commented out to avoid import issues

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file
# Simplified path that points directly to the .env file in the pyfactor directory
dotenv_path = os.path.join(BASE_DIR, '.env')

# Load dotenv with a comment about RLS
# RLS: Use tenant_id filtering

if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)
    print(f"‚úÖ Loaded environment variables from: {dotenv_path}")
else:
    print("‚ùå Warning: .env file not found!")



GOOGLE_CLIENT_ID = os.getenv('GOOGLE_CLIENT_ID')

# Accessing Plaid credentials from environment variables
PLAID_CLIENT_ID = os.getenv('PLAID_CLIENT_ID')
PLAID_SECRET = os.getenv('PLAID_SECRET')
PLAID_ENV = os.getenv('PLAID_ENV', 'sandbox')

# Check for Plaid credentials and allow placeholders in development
if not PLAID_CLIENT_ID or not PLAID_SECRET:
    print("Warning: Real Plaid credentials not set. Using placeholders for development.")
    PLAID_CLIENT_ID = PLAID_CLIENT_ID or "placeholder_client_id"
    PLAID_SECRET = PLAID_SECRET or "placeholder_secret"
    
# Verify Plaid credentials aren't empty (which would cause runtime errors)
if not PLAID_CLIENT_ID or not PLAID_SECRET:
    raise ValueError("Plaid credentials are not set in the environment variables.")

# ENCRYPTION_KEY = Fernet.generate_key()  # Commented out to avoid import issues



# Stripe integration settings
STRIPE_PUBLISHABLE_KEY = os.getenv('STRIPE_PUBLISHABLE_KEY', 'placeholder_pub_key')
STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY', 'placeholder_secret_key')
STRIPE_PRICE_ID_MONTHLY = os.getenv('STRIPE_PRICE_ID_MONTHLY', 'placeholder_price_id_monthly')
STRIPE_PRICE_ID_ANNUAL = os.getenv('STRIPE_PRICE_ID_ANNUAL', 'placeholder_price_id_annual')

# Print warning for development mode
if STRIPE_PUBLISHABLE_KEY.startswith('placeholder_') or STRIPE_SECRET_KEY.startswith('placeholder_'):
    print("Warning: Using placeholder Stripe credentials. Payments will not work.")

# AWS Settings
AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID', 'placeholder_aws_key')
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY', 'placeholder_aws_secret')
AWS_REGION = os.getenv('AWS_DEFAULT_REGION', 'us-east-1')

# Print warning for development mode
if AWS_ACCESS_KEY_ID.startswith('placeholder_') or AWS_SECRET_ACCESS_KEY.startswith('placeholder_'):
    print("Warning: Using placeholder AWS credentials. Some AWS services may not work.")

# AWS Cognito Settings
COGNITO_USER_POOL_ID = os.getenv('AWS_COGNITO_USER_POOL_ID', 'us-east-1_JPL8vGfb6')
COGNITO_APP_CLIENT_ID = os.getenv('AWS_COGNITO_CLIENT_ID', '1o5v84mrgn4gt87khtr179uc5b') 
COGNITO_DOMAIN = os.getenv('AWS_COGNITO_DOMAIN', 'pyfactor-dev.auth.us-east-1.amazoncognito.com')

# Check Cognito configuration
if not all([COGNITO_USER_POOL_ID, COGNITO_APP_CLIENT_ID, COGNITO_DOMAIN]):
    print("Warning: Cognito credentials are not fully configured:")
    print(f"User Pool ID: {'Set' if COGNITO_USER_POOL_ID else 'Missing'}")
    print(f"App Client ID: {'Set' if COGNITO_APP_CLIENT_ID else 'Missing'}")
    print(f"Domain: {'Set' if COGNITO_DOMAIN else 'Missing'}")
    
    # Set defaults for development if needed
    COGNITO_USER_POOL_ID = COGNITO_USER_POOL_ID or 'us-east-1_JPL8vGfb6'
    COGNITO_APP_CLIENT_ID = COGNITO_APP_CLIENT_ID or '1o5v84mrgn4gt87khtr179uc5b'
    COGNITO_DOMAIN = COGNITO_DOMAIN or 'pyfactor-dev.auth.us-east-1.amazoncognito.com'
    
    print("Using default Cognito settings for development.")

# Auth0 Settings
AUTH0_DOMAIN = os.getenv('AUTH0_DOMAIN', 'dev-cbyy63jovi6zrcos.us.auth0.com')
AUTH0_CLIENT_ID = os.getenv('AUTH0_CLIENT_ID', 'GZ5tqWE0VWusmykGZXfoxRkKJ6MMvIvJ')
AUTH0_CLIENT_SECRET = os.getenv('AUTH0_CLIENT_SECRET', '')
AUTH0_AUDIENCE = os.getenv('AUTH0_AUDIENCE', None)  # Optional, for API audience

# Check Auth0 configuration
if not all([AUTH0_DOMAIN, AUTH0_CLIENT_ID]):
    print("Warning: Auth0 credentials are not fully configured:")
    print(f"Domain: {'Set' if AUTH0_DOMAIN else 'Missing'}")
    print(f"Client ID: {'Set' if AUTH0_CLIENT_ID else 'Missing'}")
    print(f"Client Secret: {'Set' if AUTH0_CLIENT_SECRET else 'Missing'}")
    print(f"Audience: {'Set' if AUTH0_AUDIENCE else 'Not Set (optional)'}")
else:
    print("‚úÖ Auth0 configuration loaded successfully")

# Authentication Provider Selection
USE_AUTH0 = os.getenv('USE_AUTH0', 'true').lower() in ('true', '1', 'yes')
USE_COGNITO = os.getenv('USE_COGNITO', 'false').lower() in ('true', '1', 'yes')

if USE_AUTH0:
    print("üîê Using Auth0 for authentication")
elif USE_COGNITO:
    print("üîê Using AWS Cognito for authentication")
else:
    print("‚ö†Ô∏è  No authentication provider specified, defaulting to Auth0")

PROJECT_ROOT = os.path.abspath(os.path.dirname(__file__))
sys.path.append(os.path.join(PROJECT_ROOT, '.venv/lib/python3.12/site-packages'))

# Use environment variables
SHOPIFY_API_KEY = os.getenv('SHOPIFY_API_KEY')
SHOPIFY_API_SECRET = os.getenv('SHOPIFY_API_SECRET')
SHOPIFY_SHOP_URL = os.getenv('SHOPIFY_SHOP_URL')
APP_URL = 'https://127.0.0.1:8000'  # or whatever your app's URL is

SHOPIFY_API_VERSION = '2023-07'  # or whatever the latest version is
DEFAULT_USER_ID = 1  # or whatever default value you want to use

USE_TZ = True
SITE_ID = 1
TIME_ZONE = 'UTC'


# Email settings for Gmail
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')

FRONTEND_URL = 'https://localhost:3000'  # Adjust this to your actual frontend URL

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')



# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Always enforce AWS Cognito Authentication even in development mode
USE_AWS_AUTH = True
COGNITO_TOKEN_VERIFY = True

DEBUG_TOOLBAR_CONFIG = {
    'SHOW_TOOLBAR_CALLBACK': lambda request: False,
}

ALLOWED_HOSTS = ['localhost', '127.0.0.1']

# CORS and CSRF configuration
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = False  # Disable this to use specific origins list

CORS_ALLOWED_ORIGINS = [
    # Local development
    'https://localhost:3000',
    'https://127.0.0.1:3000',
    # Backend URLs
    'https://localhost:8000',
    'https://127.0.0.1:8000',
    # Production
    'https://pyfactor.ai',
    'https://*.pyfactor.ai',
]

# Set to False to use the allowed origins list instead
CORS_ORIGIN_ALLOW_ALL = False

APPEND_SLASH = True  # Enable automatic slash appending to fix URL routing issues

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'x-request-id',
    'cache-control',
    'pragma',
    'x-onboarding-step',
    'x-debug-step',
    'x-current-step',
    'x-request-version',
    'x-id-token',
    'x-user-id',
    'x-tenant-id',  # Lowercase tenant ID header
    'X-Tenant-ID',  # Uppercase tenant ID header
    'X-TENANT-ID',  # All caps tenant ID header
    'x-schema-name',  # Lowercase schema name header
    'X-Schema-Name',  # Uppercase schema name header
    'X-SCHEMA-NAME',  # All caps schema name header
    'access-control-allow-origin',
    'access-control-allow-headers',
    'access-control-allow-methods',
    'x-business-id',      # Lowercase business ID header
    'X-Business-ID',      # Standard format business ID header
    'X-BUSINESS-ID',      # Uppercase business ID header
    'X-Requires-Auth'     # Authentication requirement header
]

CORS_EXPOSE_HEADERS = ['access-token',
    'refresh-token',
    'content-type',
    'authorization',
    'cache-control',
    'last-modified',
    'etag',
    'x-debug-step',
    'x-current-step',
    'x-tenant-id',  # Add tenant ID header
    'x-schema-name',  # Add schema name header
    'x-business-id'  # Add business ID header
]

# Add this new setting for preflight caching
CORS_PREFLIGHT_MAX_AGE = 86400

# Add these security headers
SECURE_HSTS_SECONDS = 31536000  # 1 year
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'

# Update CSRF settings
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
CSRF_COOKIE_HTTPONLY = True
CSRF_USE_SESSIONS = True
CSRF_TRUSTED_ORIGINS = [
    "https://localhost:3000",
    "https://127.0.0.1:3000",
    "https://localhost:8000",  # Add HTTPS backend
    "https://127.0.0.1:8000"   # Add HTTPS backend
]

# Authentication settings for dj-rest-auth and allauth
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False  # Disable username requirement
ACCOUNT_USER_MODEL_USERNAME_FIELD = None  # Explicitly set no username field
ACCOUNT_EMAIL_VERIFICATION = 'none'  # Set to 'none' for development
SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'
SOCIALACCOUNT_EMAIL_REQUIRED = False
SOCIALACCOUNT_QUERY_EMAIL = True
SOCIALACCOUNT_AUTO_SIGNUP = True

# Google OAuth2 settings
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': GOOGLE_CLIENT_ID,
            'secret': os.getenv('GOOGLE_CLIENT_SECRET'),
            'key': ''
        },
        'SCOPE': [
            'profile',
            'email',
            'openid',  # Add this
        ],
        'AUTH_PARAMS': {
            'access_type': 'offline',
            'prompt': 'consent',
            'response_type': 'code'  # Add this
        },
        'VERIFIED_EMAIL': True,  # Add this
        'VERSION': 'v2'  # Add this
    }
}

ACCOUNT_DEFAULT_HTTP_PROTOCOL = 'https'  # Always use HTTPS
FRONTEND_URL = 'https://localhost:3000'  # Your React app URL
OAUTH_CALLBACK_URL = f"{FRONTEND_URL}/api/auth/callback/google"

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',  # Add this for social auth
    'custom_auth.backends.CognitoBackend',

]

# Celery Configuration
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 1800              # 30 minutes max task time
CELERY_TASK_SOFT_TIME_LIMIT = 25 * 60
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
CELERY_TASK_PUBLISH_RETRY = True
CELERY_TASK_PUBLISH_RETRY_POLICY = {
    'max_retries': 3,
    'interval_start': 0,
    'interval_step': 0.2,
    'interval_max': 0.5
}
CELERY_WORKER_PREFETCH_MULTIPLIER = 1
CELERY_WORKER_MAX_TASKS_PER_CHILD = 1
CELERY_WORKER_CONCURRENCY = 1              # Limit to a single worker


REDIS_HOST = '127.0.0.1'
REDIS_PORT = 6379
REDIS_DB = 0
# Redis configuration (consolidate with existing Redis settings)
REDIS_URL = f'redis://{REDIS_HOST}:{REDIS_PORT}'
CELERY_REDIS_MAX_CONNECTIONS = 20
CELERY_BROKER_TRANSPORT_OPTIONS = {
    'socket_timeout': 10,
    'socket_connect_timeout': 10,
    'visibility_timeout': 43200,  # 12 hours
    'max_connections': 20,
    'retry_policy': {
        'max_retries': 5
    }
}

# Redis database numbers for different uses
REDIS_TENANT_DB = 2  # Use a separate Redis database for tenant metadata
REDIS_ONBOARDING_DB = 3  # Use a separate Redis database for onboarding sessions

CELERY_BROKER_URL = 'redis://127.0.0.1:6379/0'
CELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379/0'
CELERY_SEND_TASK_SENT_EVENT = True
CELERY_TASK_SEND_SENT_EVENT = True
CELERY_TASK_REMOTE_TRACEBACKS = True
CELERY_TASK_RESULT_EXPIRES = 60 * 60 * 24  # 24 hours
# Add these Celery settings
CELERY_TIMEZONE = TIME_ZONE
CELERY_ENABLE_UTC = True
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# Task routing
CELERY_TASK_ROUTES = {
    'onboarding.tasks.setup_user_schema_task': {'queue': 'setup'},
    'onboarding.tasks.*': {'queue': 'onboard'},
    'custom_auth.tasks.create_tenant_schema': {'queue': 'tenant_ops'},
    'custom_auth.tasks.migrate_tenant_schema': {'queue': 'tenant_ops'},
}

# Task default configuration
CELERY_TASK_DEFAULT_QUEUE = 'default'
CELERY_TASK_DEFAULT_EXCHANGE = 'default'
CELERY_TASK_DEFAULT_ROUTING_KEY = 'default'

# Result backend settings
CELERY_RESULT_EXTENDED = True
CELERY_RESULT_BACKEND_MAX_RETRIES = 10
CELERY_RESULT_BACKEND_TRANSPORT_OPTIONS = {'retry_policy': {
    'max_retries': 5
}}
# Celery monitoring
CELERY_SEND_EVENTS = True
CELERY_EVENT_QUEUE_EXPIRES = 60  # seconds
CELERY_EVENT_QUEUE_TTL = 10  # seconds
# Error handling
CELERY_TASK_ACKS_LATE = True
CELERY_TASK_REJECT_ON_WORKER_LOST = True
CELERY_TASK_ANNOTATIONS = {
    '*': {
        'rate_limit': '10/s',
        'acks_late': True,
        'reject_on_worker_lost': True
    }
}

CLAUDE_API_KEY = os.getenv('CLAUDE_API_KEY', '')
CLAUDE_API_MODEL = os.getenv('CLAUDE_API_MODEL', 'claude-3-opus-20240229')
CLAUDE_API_MAX_TOKENS = 1000

CELERY_QUEUES = {
    'default': {
        'exchange': 'default',
        'routing_key': 'default',
    },
    'setup': {
        'exchange': 'setup',
        'routing_key': 'setup',
    },
    'onboarding': {
        'exchange': 'onboarding',
        'routing_key': 'onboarding',
    },
    'users': {
        'exchange': 'users',
        'routing_key': 'users',
    },
    'tenant_ops': {
        'exchange': 'tenant_ops',
        'routing_key': 'tenant_ops',
}
}

# Define crontab function here to avoid import issues
def get_crontab(*args, **kwargs):
    try:
        from django_celery_beat.schedulers import crontab
        return crontab(*args, **kwargs)
    except ImportError:
        return None

# Define a startup configuration function that will be called after Django initializes
def configure_tasks():
    """
    Configure Celery tasks after Django has fully loaded.
    This function should be imported and called from your AppConfig.ready()
    """
    return {
        'cleanup_expired_onboarding': {
            'task': 'onboarding.views.cleanup_expired_onboarding',
            'schedule': get_crontab(hour='*/2'),  # Every 2 hours
        },
        'update_federal_tax_rates': {
            'task': 'taxes.tasks.update_federal_tax_rates',
            'schedule': get_crontab(day_of_week='1', hour='3', minute='0'),  # Every Monday at 3:00 AM
        },
        'update_state_tax_rates': {
            'task': 'taxes.tasks.update_state_tax_rates',
            'schedule': get_crontab(day_of_week='1', hour='4', minute='0'),  # Every Monday at 4:00 AM
        },
        'monitor_database_connections': {
            'task': 'custom_auth.tasks.monitor_database_connections',
            'schedule': get_crontab(minute='*/5'),  # Every 5 minutes
        },
        'check_and_migrate_tenant_schemas': {
            'task': 'custom_auth.tasks.check_and_migrate_tenant_schemas',
            'schedule': get_crontab(minute='*/15'),  # Every 15 minutes
        },
        'verify_tenant_schemas_daily': {
            'task': 'onboarding.tasks.verify_all_tenant_schemas',
            'schedule': timedelta(days=1),  # Run once per day
        },
    }

# Initialize with an empty CELERY_BEAT_SCHEDULE to avoid the "Apps aren't loaded yet" error
# It will be populated later in the Django lifecycle
CELERY_BEAT_SCHEDULE = {}

# Session and authentication settings
AUTH_USER_MODEL = 'custom_auth.User'
# Session Settings
SESSION_CACHE_ALIAS = "default"
SESSION_COOKIE_AGE = 1209600  # 2 weeks
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_NAME = 'sessionid'
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
SESSION_COOKIE_SAMESITE = 'None'  # Even in development for cross-origin
CSRF_COOKIE_SAMESITE = 'None'

SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'  # Use this instead of 'db'

if DEBUG:
    SESSION_COOKIE_DOMAIN = None
    CSRF_COOKIE_DOMAIN = None
else:
    SESSION_COOKIE_DOMAIN = '.dottapps.com'  # Production domain
    CSRF_COOKIE_DOMAIN = '.dottapps.com'

FILE_UPLOAD_HANDLERS = [
    'django.core.files.uploadhandler.MemoryFileUploadHandler',
    'django.core.files.uploadhandler.TemporaryFileUploadHandler',
]
MAX_UPLOAD_SIZE = 10 * 1024 * 1024  # 10MB

# Update your CACHES setting in settings.py
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379/1',
        'OPTIONS': {
            'db': 1,
            'parser_class': 'redis.connection.DefaultParser',
            'pool_class': 'redis.connection.ConnectionPool',
            'socket_timeout': 5,
            'socket_connect_timeout': 5,
            'retry_on_timeout': True,
            'max_connections': 100,
            
            
            
        },
        'KEY_PREFIX': '{tenant}',  # Moved outside OPTIONS to the correct location
    }
}

# Add these settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
FILE_UPLOAD_PERMISSIONS = 0o644

# Security Settings
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'
if not DEBUG:
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    
DJANGO_ALLOW_ASYNC_UNSAFE = True  # Only for development

# REST framework settings
if USE_AUTH0:
    # Use Auth0 authentication
    REST_FRAMEWORK = {
        'DEFAULT_AUTHENTICATION_CLASSES': [
            'custom_auth.auth0_authentication.Auth0JWTAuthentication',
            'rest_framework.authentication.SessionAuthentication',
        ],
        'DEFAULT_PERMISSION_CLASSES': [
            'custom_auth.permissions.SetupEndpointPermission',
        ],
        'DEFAULT_PARSER_CLASSES': [
            'rest_framework.parsers.JSONParser',
        ],
        'EXCEPTION_HANDLER': 'custom_auth.utils.custom_exception_handler',
        'DEFAULT_RENDERER_CLASSES': [
            'rest_framework.renderers.JSONRenderer',
        ],
        'DEFAULT_THROTTLE_CLASSES': [
            'rest_framework.throttling.AnonRateThrottle',
            'rest_framework.throttling.UserRateThrottle',
        ],
        'DEFAULT_THROTTLE_RATES': {
            'anon': '5/minute',
            'user': '60/minute',
            'tax_calculation': '100/day',  # Custom rate for tax calculations
        },
    }
else:
    # Use Cognito authentication (legacy)
    REST_FRAMEWORK = {
        'DEFAULT_AUTHENTICATION_CLASSES': [
            'custom_auth.jwt.CognitoJWTAuthentication',
            'custom_auth.authentication.CognitoAuthentication',
            'rest_framework.authentication.SessionAuthentication',
        ],
        'DEFAULT_PERMISSION_CLASSES': [
            'custom_auth.permissions.SetupEndpointPermission',
        ],
        'DEFAULT_PARSER_CLASSES': [
            'rest_framework.parsers.JSONParser',
        ],
        'EXCEPTION_HANDLER': 'custom_auth.utils.custom_exception_handler',
        'DEFAULT_RENDERER_CLASSES': [
            'rest_framework.renderers.JSONRenderer',
        ],
        'DEFAULT_THROTTLE_CLASSES': [
            'rest_framework.throttling.AnonRateThrottle',
            'rest_framework.throttling.UserRateThrottle',
        ],
        'DEFAULT_THROTTLE_RATES': {
            'anon': '5/minute',
            'user': '60/minute',
            'tax_calculation': '100/day',  # Custom rate for tax calculations
        },
    }

# Add these JWT settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'sub',
}


# Logging configuration
LOGGING_CONFIG = None

LOGLEVEL = os.getenv('DJANGO_LOGLEVEL', 'DEBUG').upper()

# Import custom logging filters
from pyfactor.log_filters import DeduplicationFilter

# Update logging configuration to include specialized loggers for auth and tenant validation
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(message)s',
        },
        'json': {
            'format': '%(asctime)s %(levelname)s %(name)s %(message)s',
            'datefmt': '%Y-%m-%dT%H:%M:%S%z',
            'class': 'pythonjsonlogger.jsonlogger.JsonFormatter',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'json_console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'json',  # Now use the JSON formatter since the package is installed
        },
        'auth_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'auth.log'),
            'formatter': 'verbose',
        },
        'tenant_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'tenant.log'),
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'custom_auth': {
            'handlers': ['console', 'auth_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'custom_auth.api': {
            'handlers': ['console', 'tenant_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'onboarding': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

# Ensure the logs directory exists
os.makedirs(os.path.join(BASE_DIR, 'logs'), exist_ok=True)

# Cognito Authentication Settings
COGNITO_AWS_REGION = AWS_REGION
COGNITO_USER_POOL = COGNITO_USER_POOL_ID  # Already correct
COGNITO_APP_CLIENT_ID = COGNITO_APP_CLIENT_ID  # Already correct
COGNITO_TOKEN_VERIFY = True
COGNITO_ATTR_MAPPING = {
    'email': 'email',
    'given_name': 'first_name',
    'family_name': 'last_name',
    'custom:userrole': 'role',
    'custom:businessid': 'business_id',
    'custom:businessname': 'business_name',
    'custom:businesstype': 'business_type',
    'custom:businesscountry': 'business_country',
    'custom:legalstructure': 'legal_structure',
    'custom:datefounded': 'date_founded',
    'custom:subplan': 'subscription_plan',
    'custom:subscriptioninterval': 'subscription_interval',
    'custom:onboarding': 'onboarding_status',
    'custom:setupdone': 'setup_complete'
}

logging.config.dictConfig(LOGGING)



MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'custom_auth.cors.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'custom_auth.middleware.TokenRefreshMiddleware',  # Add Token Refresh Middleware
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'custom_auth.enhanced_rls_middleware.EnhancedRowLevelSecurityMiddleware',  # Use enhanced RLS middleware
    'hr.middleware.HrCorsMiddleware',  # Add HR CORS middleware
    'onboarding.middleware.SchemaNameMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'custom_auth.middleware.RequestIDMiddleware',
    'custom_auth.middleware.TenantMiddleware',
    'custom_auth.dashboard_middleware.DashboardMigrationMiddleware',
    # Temporarily disable until we fix the async compatibility issue
    # 'onboarding.middleware.OnboardingSessionMiddleware',
]

# Maximum number of database connections allowed
MAX_DB_CONNECTIONS = 20  # Reduced from 50 to prevent connection exhaustion

# Connection pool configuration
CONNECTION_POOL_CONFIG = {
    'max_connections': 50,
    'min_connections': 5,
    'connection_lifetime': 300,  # 5 minutes
    'idle_timeout': 60,  # 1 minute
}

# Tenant metrics configuration
TENANT_METRICS_CONFIG = {
    'enable_metrics': True,
    'metrics_cache_timeout': 86400,  # 24 hours
    'problematic_tenant_threshold': 0.8,  # 80% of resources
}

# Redis configuration for tenant metadata
REDIS_TENANT_DB = 2  # Use a separate Redis database for tenant metadata

# Check if we're running in ASGI mode
IS_ASGI = any(arg in sys.argv for arg in ['daphne', '--async', 'runserver --async'])



REQUEST_ID_HEADER = 'HTTP_X_REQUEST_ID'
GENERATE_REQUEST_ID_IF_ABSENT = True

ROOT_URLCONF = 'pyfactor.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # Add this line
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

INTERNAL_IPS = [
    '127.0.0.1',
]

WSGI_APPLICATION = 'pyfactor.wsgi.application'
ASGI_APPLICATION = 'pyfactor.asgi.application'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# Add these settings for tenant apps
SHARED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django_celery_beat',
    'corsheaders',
    'rest_framework',
    'rest_framework_simplejwt.token_blacklist',
    'django_countries',
    'rest_framework.authtoken',
    'dj_rest_auth',
    'dj_rest_auth.registration',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'django_cryptography',
    'phonenumber_field',
    'django_extensions',
    'custom_auth',
    'onboarding.apps.OnboardingConfig',
)

TENANT_APPS = (
    'users.apps.UsersConfig',
    'sales',
    'finance',
    'reports',
    'banking',
    'payments',
    'payroll',
    'inventory',
    'analysis',
    'chart',
    'integrations',
    'taxes',
    'purchases',
    'barcode',
    'hr.apps.HrConfig',
    'crm.apps.CrmConfig',
    'transport.apps.TransportConfig',
)

INSTALLED_APPS = list(SHARED_APPS) + [app for app in TENANT_APPS if app not in SHARED_APPS]


# Only enable Debug Toolbar for non-ASGI environments
if DEBUG and not IS_ASGI:  # Make sure DEBUG is True as well
    INSTALLED_APPS.append("debug_toolbar")
    MIDDLEWARE.insert(0, "debug_toolbar.middleware.DebugToolbarMiddleware")  # Add at start
    
    # Debug Toolbar settings
    INTERNAL_IPS = [
        "127.0.0.1",
    ]

# Add database routers
# DATABASE_ROUTERS = [
#     'pyfactor.db_routers.TenantSchemaRouter',   # Schema-based tenant router
#     'taxes.db_router.TaxDatabaseRouter'         # Tax database router
# ]

DATABASES = {
    'default': {
        'ENGINE': 'dj_db_conn_pool.backends.postgresql',
        'NAME': os.getenv('DB_NAME', 'dott_main'),
        'USER': os.getenv('DB_USER', 'dott_admin'),
        'PASSWORD': os.getenv('DB_PASSWORD', 'RRfXU6uPPUbBEg1JqGTJ'),
        'HOST': os.getenv('DB_HOST', 'dott-dev.c12qgo6m085e.us-east-1.rds.amazonaws.com'),
        'PORT': os.getenv('DB_PORT', '5432'),
        'TIME_ZONE': 'UTC',
        'CONN_MAX_AGE': 0,  # Set to 0 to let the pool manage connection lifetime
        'AUTOCOMMIT': True,
        'CONN_HEALTH_CHECKS': True,
        'OPTIONS': {
            'connect_timeout': 10,
            'client_encoding': 'UTF8',
            'application_name': 'dott',
            'sslmode': 'require',
            'options': '',  # Allow router to control schema
            'keepalives': 1,
            'keepalives_idle': 30,
            'keepalives_interval': 10,
            'keepalives_count': 5,
            
            
            
        },
        'POOL_OPTIONS': {
            'POOL_SIZE': 5,            # Reduced from 20
            'MAX_OVERFLOW': 2,         # Reduced from 10
            'RECYCLE': 300,            # Keep at 300 seconds
            'TIMEOUT': 30,             # Keep at 30 seconds
            'RETRY': 3,                # Keep at 3
            'RECONNECT': True,
            'DISABLE_POOLING': False,
        }
    },

    'taxes': {
        'ENGINE': 'dj_db_conn_pool.backends.postgresql',
        'NAME': os.getenv('TAX_DB_NAME', 'dott_main'),
        'USER': os.getenv('TAX_DB_USER', 'dott_admin'),
        'PASSWORD': os.getenv('TAX_DB_PASSWORD', 'RRfXU6uPPUbBEg1JqGTJ'),
        'HOST': os.getenv('TAX_DB_HOST', 'dott-dev.c12qgo6m085e.us-east-1.rds.amazonaws.com'),
        'PORT': os.getenv('TAX_DB_PORT', '5432'),
        'CONN_MAX_AGE': 0,  # Set to 0 to let the pool manage connection lifetime
        'OPTIONS': {
            'connect_timeout': 10,
            'client_encoding': 'UTF8',
            'sslmode': 'require',
            'keepalives': 1,
            'keepalives_idle': 30,
            'keepalives_interval': 10,
            'keepalives_count': 5,
            
            
            
            
            
        },
        'POOL_OPTIONS': {
            'POOL_SIZE': 10,
            'MAX_OVERFLOW': 5,
            'RECYCLE': 300,
            'TIMEOUT': 30,
            'RETRY': 3,
            'RECONNECT': True,
        }
    }
}

# Database pool arguments optimized for better connection management
DATABASE_POOL_ARGS = {
    "pre_ping": True,         # Enable connection validation before use
    "echo": False,            # Disable SQL echo for production
    "timeout": 10,            # Further reduced timeout to 10 seconds
    "recycle": 300,           # Recycle connections after 5 minutes
    "pool_size": 5,           # Maintain 5 connections in the pool
    "max_overflow": 2,        # Allow 2 additional connections when pool is full
    "autocommit": True,       # Use autocommit mode
    "reset_on_return": True,  # Reset transaction state on connection return
}
# Database performance settings to be applied after connection
DATABASE_PERFORMANCE_SETTINGS = {
    'statement_timeout': 30000,  # 30 seconds timeout for queries
    'idle_in_transaction_session_timeout': 60000,  # 1 minute timeout for idle transactions
    'work_mem': '4MB',  # Memory for sorting operations
}


# Initialize the connection pool
# We'll initialize the connection pool in apps.py to avoid circular imports



DATABASE_RESOURCE_LIMITS = {
    'MAX_CONNECTIONS_PER_DB': 50,
    'MAX_DB_SIZE': 1024 * 1024 * 1024,  # 1GB
    'STATEMENT_TIMEOUT': 30000,
    'LOCK_TIMEOUT': 5000,
}

# Add tenant settings
TENANT_SETTINGS = {
    'DEFAULT_SCHEMA': 'public',
    'TENANT_SCHEMA_PREFIX': 'tenant_',
    'MAX_TENANTS': 100000,
    'SCHEMA_NAME_MAX_LENGTH': 63,  # PostgreSQL limit
    'CREATE_SCHEMA_PERMISSIONS': [
        'CREATE',
        'USAGE',
    ],
    'TENANT_MODEL': 'custom_auth.Tenant',
    'TENANT_DOMAIN_MODEL': None,
    'SCHEMA_MIGRATIONS': True,
    'AUTO_CREATE_SCHEMA': True,
    'SCHEMA_CACHE_TTL': 300,  # 5 minutes cache for schema names
}

# Add these settings for schema migrations
DATABASE_SCHEMA_MIGRATIONS = {
    'ENABLE_AUTO_MIGRATE': True,  # Auto migrate schemas
    'MIGRATION_TABLE': 'schema_migrations',
    'MIGRATION_HISTORY_TABLE': 'schema_migration_history',
}


TENANT_CACHE_KEY_PREFIX = 'tenant_{}'
TENANT_CACHE_TIMEOUT = 3600  # 1 hour
# Further optimized connection pool settings for lower resource usage
DB_POOL_OPTIONS = {
    'MIN_CONNS': 3,              # Reduced from 5
    'MAX_CONNS': 15,             # Reduced from 20
    'MAX_QUERIES': 5000,         # Reduced from 50000
    'MAX_IDLE_TIME': 180,        # Reduced from 300 (3 minutes)
    'CONN_LIFETIME': 1800,       # Reduced from 3600 (30 minutes)
    'RETRY_ATTEMPTS': 3,
    'RETRY_DELAY': 0.5,
    'CONNECTION_CHECK_INTERVAL': 60, # Check connection health every minute
    'METRICS_ENABLED': True
}

# Enhanced connection pool configuration with optimized values 
DATABASE_CONNECTION_POOL = {
    'MAX_CONNS': 10,             # Max concurrent connections
    'MIN_CONNS': 2,              # Minimum connections to keep in pool
    'CONN_LIFETIME': 300,        # 5 minutes max lifetime for a connection
    'IDLE_TIMEOUT': 60,          # Close idle connections after 1 minute
    'CONN_TIMEOUT': 5,           # 5 second connection timeout
    'MAX_QUERIES_PER_CONN': 500, # Recycle connections after 500 operations
    'STATEMENT_TIMEOUT': 30000,  # 30 seconds statement timeout
    'LOCK_TIMEOUT': 5000,        # 5 seconds lock timeout
    'MONITOR_INTERVAL': 60,      # Check connections every minute
    'METRICS_ENABLED': True,     # Enable connection metrics
    'SCHEMA_CACHE_TTL': 300,     # Cache schema info for 5 minutes
}
# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en'
LANGUAGES = [('en', 'English')]

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_AUTH_SERIALIZERS = {
    'USER_DETAILS_SERIALIZER': 'users.serializers.UserSerializer',
    'LOGIN_SERIALIZER': 'users.serializers.CustomLoginSerializer',
}

REST_AUTH_REGISTER_SERIALIZERS = {
    'REGISTER_SERIALIZER': 'users.serializers.CustomRegisterSerializer',
}
