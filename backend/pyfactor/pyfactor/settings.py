"""
Django settings for pyfactor project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
from django.conf import settings

from pathlib import Path
from datetime import timedelta
import sys
import os
import logging
import logging.config
from dotenv import load_dotenv
from cryptography.fernet import Fernet
from celery.schedules import crontab



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Load environment variables from .env file
load_dotenv(os.path.join(BASE_DIR, '.env'))

GOOGLE_CLIENT_ID = os.getenv('GOOGLE_CLIENT_ID')


# Accessing Plaid credentials from environment variables
PLAID_CLIENT_ID = os.getenv('PLAID_CLIENT_ID')
PLAID_SECRET = os.getenv('PLAID_SECRET')
PLAID_ENV = os.getenv('PLAID_ENV', 'sandbox')

if not PLAID_CLIENT_ID or not PLAID_SECRET:
    raise ValueError("Plaid credentials are not set in the environment variables.")

ENCRYPTION_KEY = Fernet.generate_key()

print("PLAID_CLIENT_ID: ", PLAID_CLIENT_ID)
print("PLAID_SECRET: ", PLAID_SECRET)



# Stripe settings
STRIPE_PUBLISHABLE_KEY = os.getenv('STRIPE_PUBLISHABLE_KEY')
STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY')
STRIPE_PRICE_ID_MONTHLY = os.getenv('STRIPE_PRICE_ID_MONTHLY')
STRIPE_PRICE_ID_ANNUAL = os.getenv('STRIPE_PRICE_ID_ANNUAL')



PROJECT_ROOT = os.path.abspath(os.path.dirname(__file__))
sys.path.append(os.path.join(PROJECT_ROOT, '.venv/lib/python3.12/site-packages'))

# Use environment variables
SHOPIFY_API_KEY = os.getenv('SHOPIFY_API_KEY')
SHOPIFY_API_SECRET = os.getenv('SHOPIFY_API_SECRET')
SHOPIFY_SHOP_URL = os.getenv('SHOPIFY_SHOP_URL')
APP_URL = 'http://127.0.0.1:8000'  # or whatever your app's URL is

SHOPIFY_API_VERSION = '2023-07'  # or whatever the latest version is
DEFAULT_USER_ID = 1  # or whatever default value you want to use


USE_TZ = True
SITE_ID = 1
TIME_ZONE = 'UTC'

USER_DATABASE_OPTIONS = {
    'connect_timeout': 10,
}
# Email settings for Gmail
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')




FRONTEND_URL = 'http://localhost:3000'  # Adjust this to your actual frontend URL

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

DEBUG_TOOLBAR_CONFIG = {
    'SHOW_TOOLBAR_CALLBACK': lambda request: False,
}

ALLOWED_HOSTS = ['localhost', '127.0.0.1']



# CORS and CSRF configuration
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

APPEND_SLASH = False  # Add this to disable automatic slash appending


CORS_ALLOW_ALL_ORIGINS = DEBUG  # Allow all in development



CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'x-request-id',
    'cache-control',
    'pragma',  # Added this to match the frontend configuration
    'x-onboarding-step',  # Add this line
    'x-debug-step',  # Add this line
    'x-current-step',  # Recommended for your flow
    'x-request-version'  # Optional but useful
]

CORS_EXPOSE_HEADERS = [
    'access-token',
    'refresh-token',
    'content-type',
    'authorization',
    'cache-control',
    'last-modified',
    'etag',
    'x-debug-step',  # Add this
    'x-current-step'  # Add this
]

# Add this new setting for preflight caching
CORS_PREFLIGHT_MAX_AGE = 86400

# Add these security headers
SECURE_HSTS_SECONDS = 31536000  # 1 year
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'



# Update CSRF settings
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
CSRF_COOKIE_HTTPONLY = True
CSRF_USE_SESSIONS = True
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:8000",  # Add this
    "http://127.0.0.1:8000"   # Add this
]


# Authentication settings for dj-rest-auth and allauth
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False  # Disable username requirement
ACCOUNT_USER_MODEL_USERNAME_FIELD = None  # Explicitly set no username field
ACCOUNT_EMAIL_VERIFICATION = 'none'  # Set to 'none' for development
SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'
SOCIALACCOUNT_EMAIL_REQUIRED = False
SOCIALACCOUNT_QUERY_EMAIL = True
SOCIALACCOUNT_AUTO_SIGNUP = True



# Google OAuth2 settings
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': GOOGLE_CLIENT_ID,
            'secret': os.getenv('GOOGLE_CLIENT_SECRET'),
            'key': ''
        },
        'SCOPE': [
            'profile',
            'email',
            'openid',  # Add this
        ],
        'AUTH_PARAMS': {
            'access_type': 'offline',
            'prompt': 'consent',
            'response_type': 'code'  # Add this
        },
        'VERIFIED_EMAIL': True,  # Add this
        'VERSION': 'v2'  # Add this
    }
}

ACCOUNT_DEFAULT_HTTP_PROTOCOL = 'http' if DEBUG else 'https'
FRONTEND_URL = 'http://localhost:3000'  # Your React app URL
OAUTH_CALLBACK_URL = f"{FRONTEND_URL}/api/auth/callback/google"

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',  # Add this for social auth
    'onboarding.auth.WebSocketTokenBackend',

]

# Celery Configuration

CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60
CELERY_TASK_SOFT_TIME_LIMIT = 25 * 60
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
CELERY_TASK_PUBLISH_RETRY = True
CELERY_TASK_PUBLISH_RETRY_POLICY = {
    'max_retries': 3,
    'interval_start': 0,
    'interval_step': 0.2,
    'interval_max': 0.5
}
CELERY_WORKER_PREFETCH_MULTIPLIER = 1
CELERY_WORKER_MAX_TASKS_PER_CHILD = 50


REDIS_HOST = 'localhost'
REDIS_PORT = 6379
REDIS_DB = 0
# Redis configuration (consolidate with existing Redis settings)
REDIS_URL = f'redis://{REDIS_HOST}:{REDIS_PORT}'
CELERY_REDIS_MAX_CONNECTIONS = 20
CELERY_BROKER_TRANSPORT_OPTIONS = {
    'socket_timeout': 10,
    'socket_connect_timeout': 10,
    'visibility_timeout': 43200,  # 12 hours
    'max_connections': 20,
    'retry_policy': {
        'max_retries': 5
    }
}

CELERY_BROKER_URL = f'redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}'
CELERY_RESULT_BACKEND = f'redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}'
CELERY_SEND_TASK_SENT_EVENT = True
CELERY_TASK_SEND_SENT_EVENT = True
CELERY_TASK_REMOTE_TRACEBACKS = True
CELERY_TASK_RESULT_EXPIRES = 60 * 60 * 24  # 24 hours
# Add these Celery settings
CELERY_TIMEZONE = TIME_ZONE
CELERY_ENABLE_UTC = True
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# Task routing
CELERY_TASK_ROUTES = {
    'onboarding.setup_user_database_task': {'queue': 'setup'},
    'onboarding.send_websocket_notification': {'queue': 'default'},
    'onboarding.tasks.*': {'queue': 'onboarding'},
    'users.tasks.*': {'queue': 'users'},
}

# Task default configuration
CELERY_TASK_DEFAULT_QUEUE = 'default'
CELERY_TASK_DEFAULT_EXCHANGE = 'default'
CELERY_TASK_DEFAULT_ROUTING_KEY = 'default'

# Result backend settings
CELERY_RESULT_EXTENDED = True
CELERY_RESULT_BACKEND_MAX_RETRIES = 10
CELERY_RESULT_BACKEND_TRANSPORT_OPTIONS = {'retry_policy': {
    'max_retries': 5
}}
# Celery monitoring
CELERY_SEND_EVENTS = True
CELERY_EVENT_QUEUE_EXPIRES = 60  # seconds
CELERY_EVENT_QUEUE_TTL = 10  # seconds
# Error handling
CELERY_TASK_ACKS_LATE = True
CELERY_TASK_REJECT_ON_WORKER_LOST = True
CELERY_TASK_ANNOTATIONS = {
    '*': {
        'rate_limit': '10/s',
        'acks_late': True,
        'reject_on_worker_lost': True
    }
}

CELERY_QUEUES = {
    'default': {
        'exchange': 'default',
        'routing_key': 'default',
    },
    'setup': {
        'exchange': 'setup',
        'routing_key': 'setup',
    },
    'onboarding': {
        'exchange': 'onboarding',
        'routing_key': 'onboarding',
    },
    'users': {
        'exchange': 'users',
        'routing_key': 'users',
    }
}

CELERY_BEAT_SCHEDULE = {
    'cleanup_expired_onboarding': {
        'task': 'onboarding.views.cleanup_expired_onboarding',
        'schedule': crontab(hour='*/2'),  # Every 2 hours
    },
}

# Session and authentication settings
AUTH_USER_MODEL = 'custom_auth.User'
# Session Settings
SESSION_CACHE_ALIAS = "default"
SESSION_COOKIE_AGE = 1209600  # 2 weeks
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_NAME = 'sessionid'
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
SESSION_COOKIE_SAMESITE = 'None'  # Even in development for cross-origin
CSRF_COOKIE_SAMESITE = 'None'

SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'  # Use this instead of 'db'

if DEBUG:
    SESSION_COOKIE_DOMAIN = None
    CSRF_COOKIE_DOMAIN = None
else:
    SESSION_COOKIE_DOMAIN = '.dottapps.com'  # Production domain
    CSRF_COOKIE_DOMAIN = '.dottapps.com'

FILE_UPLOAD_HANDLERS = [
    'django.core.files.uploadhandler.MemoryFileUploadHandler',
    'django.core.files.uploadhandler.TemporaryFileUploadHandler',
]
MAX_UPLOAD_SIZE = 10 * 1024 * 1024  # 10MB

# Update your CACHES setting in settings.py
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        'LOCATION': f'redis://{REDIS_HOST}:{REDIS_PORT}/1',
        'OPTIONS': {
            'db': 1,
            'parser_class': 'redis.connection.DefaultParser',
            'pool_class': 'redis.connection.ConnectionPool',
            'socket_timeout': 5,
            'socket_connect_timeout': 5,
            'retry_on_timeout': True,
            'max_connections': 100
        }
    }
}


# Add these settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
FILE_UPLOAD_PERMISSIONS = 0o644

# Security Settings
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'
if not DEBUG:
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    
DJANGO_ALLOW_ASYNC_UNSAFE = True  # Only for development




# REST framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
    ],
}
# JWT settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    
    # Add these additional settings
    'AUTH_COOKIE': 'access_token',  # Cookie name for access token
    'AUTH_COOKIE_REFRESH': 'refresh_token',  # Cookie name for refresh token
    'AUTH_COOKIE_DOMAIN': None,  # Specify domain if needed
    'AUTH_COOKIE_SECURE': True,
    'AUTH_COOKIE_HTTP_ONLY': True,  # Prevent JavaScript access
    'AUTH_COOKIE_PATH': '/',  # Cookie path
    'AUTH_COOKIE_SAMESITE': 'None' if DEBUG else 'Lax',
    
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),

    
    'TOKEN_TYPE_CLAIM': 'token_type',
    'JTI_CLAIM': 'jti',
    
    # Add token blacklist settings
    'BLACKLIST_TOKEN_CHECKS': [
        'rest_framework_simplejwt.token_blacklist.check_blacklist',
    ],
}



# Logging configuration
class DeduplicationFilter(logging.Filter):
    def __init__(self, name="", capacity=100):
        super().__init__(name)
        self.capacity = capacity
        self.seen = set()

    def filter(self, record):
        log_entry = (record.name, record.levelno, record.pathname, record.lineno, record.msg)
        if log_entry in self.seen:
            return False
        if len(self.seen) >= self.capacity:
            self.seen.pop()
        self.seen.add(log_entry)
        return True

LOGGING_CONFIG = None

LOGLEVEL = os.getenv('DJANGO_LOGLEVEL', 'DEBUG').upper()

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
 
    'formatters': {
        'default': {
            'format': '%(asctime)s %(levelname)s %(message)s',
        },
        'verbose': {
            'format': '%(asctime)s %(levelname)s [%(name)s:%(lineno)s] %(message)s',
        },
        'colored': {
            'format': '\033[1;34m%(levelname)s\033[0m %(asctime)s \033[1;33m%(name)s\033[0m %(message)s',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'colored',  # Better readability for console logs
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(os.getcwd(), 'debug.log'),  # Adjust to use BASE_DIR if available
            'formatter': 'verbose',
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
        },
    },
    'loggers': {
        '': {  # Root logger
            'handlers': ['console', 'file'],
            'level': LOGLEVEL,
            'propagate': True,
        },
        'django': {
            'handlers': ['console', 'file'],
            'level': LOGLEVEL,
            'propagate': False,
        },
        'django.db.backends': {  # Reduce verbosity for database logs
            'handlers': ['console', 'file'],
            'level': 'INFO',  # Change DEBUG to INFO to suppress detailed SQL logs
            'propagate': False,
        },
        'pyfactor': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'finance.utils': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'chatbot': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },

}

logging.config.dictConfig(LOGGING)

# Application definition
INSTALLED_APPS = [
    'daphne',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django_celery_beat',
    'corsheaders',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',  # Add this for Google auth
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'django_countries',
    'rest_framework.authtoken',
    'dj_rest_auth',
    'django_cryptography',
    'phonenumber_field',
    'channels',  # Add this line
    'users.apps.UsersConfig',  # replace 'users' with your actual app name
    'sales',
    'finance',
    'reports',
    'banking',
    'payroll',
    'inventory',
    'analysis',
    'chatbot',
    'chart',
    'integrations',
    'alerts',
    'taxes',
    'purchases',
    'barcode',
    'django_extensions',
    'custom_auth',  # Add the new auth app
    'hr.apps.HrConfig',
    'business.apps.BusinessConfig',
    'onboarding.apps.OnboardingConfig'


]
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',  # Add this
    'allauth.account.middleware.AccountMiddleware',


]
# Check if we're running in ASGI mode
IS_ASGI = any(arg in sys.argv for arg in ['daphne', '--async', 'runserver --async'])

# Only enable Debug Toolbar for non-ASGI environments
if DEBUG and not IS_ASGI:  # Make sure DEBUG is True as well
    INSTALLED_APPS.append("debug_toolbar")
    MIDDLEWARE.insert(0, "debug_toolbar.middleware.DebugToolbarMiddleware")  # Add at start
    
    # Debug Toolbar settings
    INTERNAL_IPS = [
        "127.0.0.1",
    ]


# Add this setting for WebSocket routing
WEBSOCKET_MIDDLEWARE = [
    'onboarding.middleware.WebSocketAuthMiddleware',
]

CHANNEL_ROUTING = "pyfactor.routing.application"

# Add to existing settings
REQUEST_ID_HEADER = 'HTTP_X_REQUEST_ID'
GENERATE_REQUEST_ID_IF_ABSENT = True

ROOT_URLCONF = 'pyfactor.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # Add this line
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


INTERNAL_IPS = [
    '127.0.0.1',
]

ASGI_APPLICATION = 'pyfactor.asgi.application'

# Update the Redis connection settings
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [(REDIS_HOST, REDIS_PORT)],
            "capacity": 1500,
            "expiry": 120,
        }
    },
}

WEBSOCKET_TIMEOUT = 60  # Seconds
WEBSOCKET_HEARTBEAT = 30  # Seconds
# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME', 'postgres'),
        'USER': os.getenv('DB_USER', 'postgres'),
        'PASSWORD': os.getenv('DB_PASSWORD', 'postgres'),
        'HOST': os.getenv('DB_HOST', 'localhost'),
        'PORT': os.getenv('DB_PORT', '5432'),
        'ATOMIC_REQUESTS': False,
        'TIME_ZONE': 'UTC',
        'CONN_MAX_AGE': 60,
        'AUTOCOMMIT': True,
        'CONN_HEALTH_CHECKS': False,
        'OPTIONS': {
            'connect_timeout': 10,
            'client_encoding': 'UTF8',
            'application_name': 'pyfactor'
        }
    }
}

# Define template settings separately
USER_DATABASE_TEMPLATE = 'template0'

DATABASE_RESOURCE_LIMITS = {
    'MAX_CONNECTIONS_PER_DB': 50,
    'MAX_DB_SIZE': 1024 * 1024 * 1024,  # 1GB
    'STATEMENT_TIMEOUT': 30000,
    'LOCK_TIMEOUT': 5000,
}

USER_DATABASE_TEMPLATE = 'template_db'


DATABASE_ROUTERS = ['pyfactor.userDatabaseRouter.UserDatabaseRouter']

# User database settings
USER_DATABASE_SETTINGS = {
    'CONNECTION_LIMIT': 50,  # Max connections per database
    'POOL_MIN_SIZE': 5,
    'POOL_MAX_SIZE': 20,
    'MAX_USER_DATABASES': 10000,  # Maximum number of user databases
    'TEMPLATE_NAME': 'template_db',  # Template database name
    'SHARD_COUNT': 10,  # Number of database shards
    'MAX_DB_SIZE': 1024 * 1024 * 1024,  # 1GB max size per database
    'BACKUP_RETENTION_DAYS': 30,
}


DB_POOL_OPTIONS = {
    'MIN_CONNS': 5,
    'MAX_CONNS': 20,
    'MAX_QUERIES': 50000,
    'MAX_IDLE_TIME': 300,  # 5 minutes
    'CONN_LIFETIME': 3600,  # 1 hour
    'RETRY_ATTEMPTS': 3,
    'RETRY_DELAY': 0.5,
    'METRICS_ENABLED': True
}

DATABASE_CONNECTION_POOL = {
    'MAX_CONNS': 100,  # Total max connections
    'MIN_CONNS': 20,
    'CONN_LIFETIME': 300,
    'CONN_TIMEOUT': 30,
    'MAX_QUERIES_PER_CONN': 5000,
}

# WebSocket specific settings
# WebSocket configuration
WEBSOCKET_CONFIG = {
    'TIMEOUT': 60,
    'HEARTBEAT': 30,
    'MAX_CONNECTIONS': 1000,
    'AUTH': {
        'TIMEOUT': 10,
        'CACHE_TIMEOUT': 300,
        'MAX_CONNECTIONS_PER_USER': 5,
    }
}  # Add closing brace here

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en'
LANGUAGES = [('en', 'English')]

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_AUTH_SERIALIZERS = {
    'USER_DETAILS_SERIALIZER': 'users.serializers.UserSerializer',
    'LOGIN_SERIALIZER': 'users.serializers.CustomLoginSerializer',
}

REST_AUTH_REGISTER_SERIALIZERS = {
    'REGISTER_SERIALIZER': 'users.serializers.CustomRegisterSerializer',
}
