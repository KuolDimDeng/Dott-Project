# ===== SINGLE SESSION SYSTEM =====
# This project uses a custom session_manager app instead of Django's sessions.
# DO NOT add django.contrib.sessions back to INSTALLED_APPS or MIDDLEWARE.
# All session management is handled by the session_manager app.
# ================================

"""
Django settings for pyfactor project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
import sys
import logging
import logging.config
from datetime import timedelta
from dotenv import load_dotenv
# from cryptography.fernet import Fernet  # Commented out to avoid import issues

# Initialize Sentry for error tracking and monitoring
try:
    import sentry_sdk
    from sentry_sdk.integrations.django import DjangoIntegration
    from sentry_sdk.integrations.logging import LoggingIntegration
    SENTRY_AVAILABLE = True
except ImportError:
    SENTRY_AVAILABLE = False
    print("Warning: Sentry SDK not installed. Error tracking will be disabled.")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file
# Simplified path that points directly to the .env file in the pyfactor directory
dotenv_path = os.path.join(BASE_DIR, '.env')

# Load dotenv with a comment about RLS
# RLS: Use tenant_id filtering

if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)
    print(f"‚úÖ Loaded environment variables from: {dotenv_path}")
else:
    print("‚ùå Warning: .env file not found!")

# Initialize Sentry SDK
SENTRY_DSN = os.getenv('SENTRY_DSN', 'https://128106efe0719c134878b177b736f27f@o4509614361804800.ingest.us.sentry.io/4509619782549504')

if SENTRY_AVAILABLE and SENTRY_DSN:
    sentry_sdk.init(
        dsn=SENTRY_DSN,
        integrations=[
            DjangoIntegration(
                transaction_style='url',
                middleware_spans=True,
                signals_spans=True,
                cache_spans=True,
            ),
            LoggingIntegration(
                level=logging.INFO,        # Capture info and above as breadcrumbs
                event_level=logging.ERROR   # Send errors as events
            ),
        ],
        # Set traces_sample_rate to 1.0 to capture 100%
        # of transactions for performance monitoring.
        traces_sample_rate=0.1 if os.getenv('ENVIRONMENT') == 'production' else 1.0,
        # Set profiles_sample_rate to 1.0 to profile 100%
        # of sampled transactions.
        profiles_sample_rate=0.05 if os.getenv('ENVIRONMENT') == 'production' else 1.0,
        # Send user data (PII) for better debugging
        send_default_pii=True,
        # Environment
        environment=os.getenv('ENVIRONMENT', 'development'),
        # Release tracking
        release=os.getenv('SENTRY_RELEASE', 'dott-api@1.0.0'),
        # Filter sensitive data
        before_send=lambda event, hint: filter_sensitive_data(event),
        # Ignore specific errors
        ignore_errors=[
            'django.core.exceptions.DisallowedHost',
            'django.core.exceptions.ObjectDoesNotExist',
            'django.db.utils.OperationalError',
        ],
        # Debug mode
        debug=False,
    )
    print(f"‚úÖ Sentry initialized for {os.getenv('ENVIRONMENT', 'development')} environment")
elif SENTRY_DSN:
    print("‚ùå Sentry SDK not available but DSN provided. Install sentry-sdk to enable error tracking.")

def filter_sensitive_data(event):
    """Filter out sensitive data before sending to Sentry"""
    if 'request' in event and event['request']:
        # Remove sensitive headers
        if 'headers' in event['request']:
            sensitive_headers = ['authorization', 'cookie', 'x-api-key', 'x-auth-token']
            for header in sensitive_headers:
                event['request']['headers'].pop(header, None)
        
        # Remove sensitive data from request body
        if 'data' in event['request']:
            sensitive_fields = ['password', 'token', 'secret', 'api_key', 'stripe_token']
            if isinstance(event['request']['data'], dict):
                for field in sensitive_fields:
                    event['request']['data'].pop(field, None)
    
    return event



GOOGLE_CLIENT_ID = os.getenv('GOOGLE_CLIENT_ID')

# Accessing Plaid credentials from environment variables
PLAID_CLIENT_ID = os.getenv('PLAID_CLIENT_ID')
PLAID_SECRET = os.getenv('PLAID_SECRET')
PLAID_ENV = os.getenv('PLAID_ENV', 'sandbox')

# Check for Plaid credentials and use sandbox credentials if not set
if not PLAID_CLIENT_ID or not PLAID_SECRET:
    print("Warning: Real Plaid credentials not set. Plaid features will be disabled.")
    PLAID_CLIENT_ID = None
    PLAID_SECRET = None
    # Don't raise an error - allow the app to run without Plaid
    print("üîÑ Application will run without Plaid integration.")
else:
    print("‚úÖ Plaid credentials configured successfully.")

# ENCRYPTION_KEY = Fernet.generate_key()  # Commented out to avoid import issues



# Stripe integration settings
# Try multiple environment variable names for compatibility
STRIPE_PUBLISHABLE_KEY = os.getenv('STRIPE_PUBLISHABLE_KEY') or os.getenv('STRIPE_PUB_KEY') or os.getenv('NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY', 'placeholder_pub_key')
STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY', 'placeholder_secret_key')

# Stripe Price IDs - These are the actual price IDs from your Stripe dashboard
# Professional Plan
STRIPE_PRICE_PROFESSIONAL_MONTHLY = os.getenv('STRIPE_PRICE_PRO_MONTHLY', 'price_1RZMDhFls6i75mQBM7o13PWb')
STRIPE_PRICE_PROFESSIONAL_6MONTH = os.getenv('STRIPE_PRICE_PRO_6MONTH', 'price_1Rhu9dFls6i75mQBZs0ts1uj')
STRIPE_PRICE_PROFESSIONAL_YEARLY = os.getenv('STRIPE_PRICE_PRO_YEARLY', 'price_1RZMDhFls6i75mQB2M0DOulV')

# Enterprise Plan
STRIPE_PRICE_ENTERPRISE_MONTHLY = os.getenv('STRIPE_PRICE_ENT_MONTHLY', 'price_1RZMDhFls6i75mQB9kMjeKtx')
STRIPE_PRICE_ENTERPRISE_6MONTH = os.getenv('STRIPE_PRICE_ENT_6MONTH', 'price_1RhuBCFls6i75mQBGdWAxT9H')
STRIPE_PRICE_ENTERPRISE_YEARLY = os.getenv('STRIPE_PRICE_ENT_YEARLY', 'price_1RZMDiFls6i75mQBqQwHnERW')

# Legacy environment variables for backward compatibility
STRIPE_PRICE_ID_MONTHLY = STRIPE_PRICE_PROFESSIONAL_MONTHLY
STRIPE_PRICE_ID_ANNUAL = STRIPE_PRICE_PROFESSIONAL_YEARLY

# Webhook secrets
STRIPE_WEBHOOK_SECRET = os.getenv('STRIPE_WEBHOOK_SECRET', 'placeholder_webhook_secret')
STRIPE_PAYROLL_WEBHOOK_SECRET = os.getenv('STRIPE_PAYROLL_WEBHOOK_SECRET', 'placeholder_payroll_webhook_secret')
STRIPE_MODE = os.getenv('STRIPE_MODE', 'test')  # 'test' or 'live'

# Print warning for development mode
if STRIPE_PUBLISHABLE_KEY.startswith('placeholder_') or STRIPE_SECRET_KEY.startswith('placeholder_'):
    print("Warning: Using placeholder Stripe credentials. Payments will not work.")

# AWS Settings - COMMENTED OUT (using Auth0 and Render instead)
# AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID', 'placeholder_aws_key')
# AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY', 'placeholder_aws_secret')
# AWS_REGION = os.getenv('AWS_DEFAULT_REGION', 'us-east-1')

# Print warning for development mode - COMMENTED OUT
# if AWS_ACCESS_KEY_ID.startswith('placeholder_') or AWS_SECRET_ACCESS_KEY.startswith('placeholder_'):
#     print("Warning: Using placeholder AWS credentials. Some AWS services may not work.")

# Auth0 Settings (Primary Authentication)
# Dynamic configuration using environment variables
AUTH0_CUSTOM_DOMAIN = os.getenv('AUTH0_CUSTOM_DOMAIN', 'auth.dottapps.com')
AUTH0_DOMAIN = os.getenv('AUTH0_DOMAIN', 'auth.dottapps.com')
AUTH0_ISSUER_DOMAIN = os.getenv('AUTH0_ISSUER_DOMAIN', AUTH0_DOMAIN)  # Default to AUTH0_DOMAIN if not specified
AUTH0_CLIENT_ID = os.getenv('AUTH0_CLIENT_ID', '9i7GSU4bgh6hFtMXnQACwiRxTudpuOSF')
AUTH0_CLIENT_SECRET = os.getenv('AUTH0_CLIENT_SECRET', '')
# Auth0 Management API credentials for user creation and management
AUTH0_MANAGEMENT_CLIENT_ID = os.getenv('AUTH0_MANAGEMENT_CLIENT_ID', '')
AUTH0_MANAGEMENT_CLIENT_SECRET = os.getenv('AUTH0_MANAGEMENT_CLIENT_SECRET', '')
# Use environment variable for audience with sensible default (UPDATED for new Dott API)
AUTH0_AUDIENCE = os.getenv('AUTH0_AUDIENCE', 'https://api.dottapps.com')

# Build issuer URL from the issuer domain
# Handle case where AUTH0_ISSUER_DOMAIN might already include https://
if AUTH0_ISSUER_DOMAIN and AUTH0_ISSUER_DOMAIN.startswith('https://'):
    AUTH0_ISSUER = AUTH0_ISSUER_DOMAIN.rstrip('/') + '/'
else:
    AUTH0_ISSUER = f"https://{AUTH0_ISSUER_DOMAIN}/"

# Check Auth0 configuration
print("üîê Auth0 Configuration (Environment Variables):")
print(f"   Domain: {AUTH0_DOMAIN}")
print(f"   Issuer: {AUTH0_ISSUER}")
print(f"   Audience: {AUTH0_AUDIENCE}")
print(f"   Custom Domain: {AUTH0_CUSTOM_DOMAIN}")
print("‚úÖ Auth0 configuration loaded from environment variables")

USE_AUTH0 = True  # Always use Auth0
print("üîê Using Auth0 for authentication")

PROJECT_ROOT = os.path.abspath(os.path.dirname(__file__))
sys.path.append(os.path.join(PROJECT_ROOT, '.venv/lib/python3.12/site-packages'))

# Use environment variables
SHOPIFY_API_KEY = os.getenv('SHOPIFY_API_KEY')
SHOPIFY_API_SECRET = os.getenv('SHOPIFY_API_SECRET')
SHOPIFY_SHOP_URL = os.getenv('SHOPIFY_SHOP_URL')
APP_URL = 'https://127.0.0.1:8000'  # or whatever your app's URL is

SHOPIFY_API_VERSION = '2023-07'  # or whatever the latest version is
DEFAULT_USER_ID = 1  # or whatever default value you want to use

USE_TZ = True
SITE_ID = 1
TIME_ZONE = 'UTC'


# Email settings - Check for SMTP configuration first, then Resend
if os.getenv('EMAIL_HOST') and os.getenv('EMAIL_HOST_USER'):
    # Use SMTP if configured (Microsoft 365, Gmail, etc.)
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = os.getenv('EMAIL_HOST')
    EMAIL_PORT = int(os.getenv('EMAIL_PORT', 587))
    EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True').lower() == 'true'
    EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
    DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'no-reply@dottapps.com')
elif os.getenv('RESEND_API_KEY'):
    # Use Resend if API key is configured
    EMAIL_BACKEND = 'utils.resend_email.ResendEmailBackend'
    RESEND_API_KEY = os.getenv('RESEND_API_KEY')
    DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'no-reply@dottapps.com')
else:
    # Fallback to console for local development
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    DEFAULT_FROM_EMAIL = 'noreply@dottapps.com'

FRONTEND_URL = 'https://localhost:3000'  # Adjust this to your actual frontend URL

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-fallback-key-change-in-production-1234567890abcdefghijklmnopqrstuvwxyz')



# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False').lower() in ('true', '1', 'yes')

# Cloudflare proxy configuration
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
USE_X_FORWARDED_HOST = True
USE_X_FORWARDED_PORT = True

# Cloudflare IP handling
# Get real client IP from CF-Connecting-IP header
REAL_IP_HEADER = 'HTTP_CF_CONNECTING_IP'

# Trust Cloudflare proxy IPs
CLOUDFLARE_IPS = [
    # IPv4
    '173.245.48.0/20',
    '103.21.244.0/22',
    '103.22.200.0/22',
    '103.31.4.0/22',
    '141.101.64.0/18',
    '108.162.192.0/18',
    '190.93.240.0/20',
    '188.114.96.0/20',
    '197.234.240.0/22',
    '198.41.128.0/17',
    '162.158.0.0/15',
    '104.16.0.0/13',
    '104.24.0.0/14',
    '172.64.0.0/13',
    '131.0.72.0/22',
    # IPv6
    '2400:cb00::/32',
    '2606:4700::/32',
    '2803:f800::/32',
    '2405:b500::/32',
    '2405:8100::/32',
    '2a06:98c0::/29',
    '2c0f:f248::/32',
]

# SSL redirect only in production
if not DEBUG:
    SECURE_SSL_REDIRECT = True

# Configure DEBUG toolbar
DEBUG_TOOLBAR_CONFIG = {
    'SHOW_TOOLBAR_CALLBACK': lambda request: False,
}

# AWS Cognito Authentication - COMMENTED OUT (using Auth0 instead)
# USE_AWS_AUTH = True
# COGNITO_TOKEN_VERIFY = True

# Update ALLOWED_HOSTS for deployment
# Read from environment variable, split by comma, and strip whitespace
allowed_hosts_env = os.getenv('ALLOWED_HOSTS', '')
if allowed_hosts_env:
    ALLOWED_HOSTS = [host.strip() for host in allowed_hosts_env.split(',') if host.strip()]
else:
    # Fallback for local development
    ALLOWED_HOSTS = ['localhost', '127.0.0.1', '.onrender.com', '*']

# Add Cloudflare domains
ALLOWED_HOSTS.extend([
    'dottapps.com',
    'www.dottapps.com',
    'api.dottapps.com',
    '.dottapps.com',  # Allow all subdomains
])

print(f"‚úÖ ALLOWED_HOSTS configured: {ALLOWED_HOSTS}")

# CORS and CSRF configuration
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = False  # Disable this to use specific origins list

CORS_ALLOWED_ORIGINS = [
    # Local development
    'https://localhost:3000',
    'https://127.0.0.1:3000',
    # Backend URLs
    'https://localhost:8000',
    'https://127.0.0.1:8000',
    # Production - Dott domains
    'https://dottapps.com',
    'https://www.dottapps.com',
    'https://app.dottapps.com',
    'https://api.dottapps.com',
    # Sentry domains for error tracking
    'https://sentry.io',
    'https://o4509614361804800.ingest.us.sentry.io',
    'https://browser.sentry-cdn.com',
    # Legacy domains (can be removed later)
    'https://pyfactor.ai',
    'https://*.pyfactor.ai',
]

# Enable credentials for secure cookie authentication
CORS_ALLOW_CREDENTIALS = True

# Set to False to use the allowed origins list instead
CORS_ORIGIN_ALLOW_ALL = False

APPEND_SLASH = False  # Industry standard: be explicit about URLs, no automatic redirects

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'x-request-id',
    'cache-control',
    'pragma',
    'x-onboarding-step',
    'x-debug-step',
    'x-current-step',
    'x-request-version',
    'x-id-token',
    'x-user-id',
    'x-tenant-id',  # Lowercase tenant ID header
    'X-Tenant-ID',  # Uppercase tenant ID header
    'X-TENANT-ID',  # All caps tenant ID header
    'x-schema-name',  # Lowercase schema name header
    'X-Schema-Name',  # Uppercase schema name header
    'X-SCHEMA-NAME',  # All caps schema name header
    'access-control-allow-origin',
    'access-control-allow-headers',
    'access-control-allow-methods',
    'x-business-id',      # Lowercase business ID header
    'X-Business-ID',      # Standard format business ID header
    'X-BUSINESS-ID',      # Uppercase business ID header
    'X-Requires-Auth'     # Authentication requirement header
]

CORS_EXPOSE_HEADERS = ['access-token',
    'refresh-token',
    'content-type',
    'authorization',
    'cache-control',
    'last-modified',
    'etag',
    'x-debug-step',
    'x-current-step',
    'x-tenant-id',  # Add tenant ID header
    'x-schema-name',  # Add schema name header
    'x-business-id'  # Add business ID header
]

# Add this new setting for preflight caching
CORS_PREFLIGHT_MAX_AGE = 86400

# Security headers for Cloudflare compatibility
SECURE_HSTS_SECONDS = 31536000  # 1 year
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

# Additional security headers for production
if not DEBUG:
    # Force HTTPS cookies
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    
    # Strict CSP compatible with Cloudflare
    CSP_DEFAULT_SRC = ("'self'",)
    CSP_SCRIPT_SRC = ("'self'", "'unsafe-inline'", "'unsafe-eval'", 
                      "https://js.stripe.com", "https://client.crisp.chat",
                      "https://cdn.plaid.com", "https://app.posthog.com")
    CSP_STYLE_SRC = ("'self'", "'unsafe-inline'", "https://fonts.googleapis.com")
    CSP_FONT_SRC = ("'self'", "data:", "https://fonts.gstatic.com")
    CSP_IMG_SRC = ("'self'", "data:", "https:", "blob:")
    CSP_CONNECT_SRC = ("'self'", "https://api.dottapps.com", "https://auth.dottapps.com",
                       "https://*.stripe.com", "wss://*.crisp.chat", "https://*.crisp.chat",
                       "https://*.plaid.com", "https://app.posthog.com")
    CSP_FRAME_SRC = ("'self'", "https://js.stripe.com", "https://auth.dottapps.com",
                     "https://client.crisp.chat", "https://*.plaid.com")

# Update CSRF settings
CSRF_COOKIE_HTTPONLY = False  # Must be false for JavaScript access
CSRF_USE_SESSIONS = False
CSRF_COOKIE_NAME = 'csrftoken'
CSRF_COOKIE_SAMESITE = 'Lax'  # Keep CSRF as Lax for security
CSRF_TRUSTED_ORIGINS = [
    # Local development
    "https://localhost:3000",
    "https://127.0.0.1:3000",
    "https://localhost:8000",
    "https://127.0.0.1:8000",
    # Production - Dott domains
    "https://dottapps.com",
    "https://www.dottapps.com",
    "https://app.dottapps.com",
    "https://api.dottapps.com",
    # Cloudflare domains
    "https://*.dottapps.com",
    # Allow HTTP for Cloudflare flexible SSL
    "http://dottapps.com",
    "http://www.dottapps.com",
    "http://api.dottapps.com"
]

# Authentication settings for dj-rest-auth and allauth
ACCOUNT_LOGIN_METHODS = {'email'}  # Updated from deprecated ACCOUNT_AUTHENTICATION_METHOD
ACCOUNT_SIGNUP_FIELDS = ['email*', 'password1*', 'password2*']  # Replaces ACCOUNT_EMAIL_REQUIRED and ACCOUNT_USERNAME_REQUIRED
ACCOUNT_USER_MODEL_USERNAME_FIELD = None  # Explicitly set no username field
ACCOUNT_EMAIL_VERIFICATION = 'none'  # Set to 'none' for development
SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'
SOCIALACCOUNT_EMAIL_REQUIRED = False
SOCIALACCOUNT_QUERY_EMAIL = True
SOCIALACCOUNT_AUTO_SIGNUP = True

# Google OAuth2 settings
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': GOOGLE_CLIENT_ID,
            'secret': os.getenv('GOOGLE_CLIENT_SECRET'),
            'key': ''
        },
        'SCOPE': [
            'profile',
            'email',
            'openid',  # Add this
        ],
        'AUTH_PARAMS': {
            'access_type': 'offline',
            'prompt': 'consent',
            'response_type': 'code'  # Add this
        },
        'VERIFIED_EMAIL': True,  # Add this
        'VERSION': 'v2'  # Add this
    }
}

ACCOUNT_DEFAULT_HTTP_PROTOCOL = 'https'  # Always use HTTPS
FRONTEND_URL = 'https://localhost:3000'  # Your React app URL
OAUTH_CALLBACK_URL = f"{FRONTEND_URL}/api/auth/callback/google"

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',  # For social auth (if needed)
]

# Celery has been removed from this project

# Redis settings - support both REDIS_URL and individual settings
REDIS_URL = os.environ.get('REDIS_URL')
if REDIS_URL:
    # Parse REDIS_URL for components
    from urllib.parse import urlparse
    _parsed = urlparse(REDIS_URL)
    REDIS_HOST = _parsed.hostname
    REDIS_PORT = _parsed.port or 6379
    REDIS_PASSWORD = _parsed.password
    REDIS_SSL = _parsed.scheme == 'rediss'
else:
    # Fallback to individual settings
    REDIS_HOST = os.environ.get('REDIS_HOST')
    REDIS_PORT = int(os.environ.get('REDIS_PORT', 6379))
    REDIS_PASSWORD = os.environ.get('REDIS_PASSWORD')
    REDIS_SSL = os.environ.get('REDIS_SSL', 'False').lower() == 'true'

# Only configure Redis if explicitly provided
if REDIS_URL or REDIS_HOST:
    # If we already have REDIS_URL from environment, keep it as-is
    if not REDIS_URL and REDIS_HOST:
        # Only construct URL if we don't have one
        if REDIS_PASSWORD:
            REDIS_URL = f'redis://:{REDIS_PASSWORD}@{REDIS_HOST}:{REDIS_PORT}'
        else:
            REDIS_URL = f'redis://{REDIS_HOST}:{REDIS_PORT}'
    
    # Build cache location
    if REDIS_PASSWORD:
        cache_location = f'redis://:{REDIS_PASSWORD}@{REDIS_HOST}:{REDIS_PORT}/1'
    else:
        cache_location = f'redis://{REDIS_HOST}:{REDIS_PORT}/1'
    
    # Update your CACHES setting to use Redis when available
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.redis.RedisCache',
            'LOCATION': cache_location,
            'OPTIONS': {
                'db': 1,
                'parser_class': 'redis.connection.DefaultParser',
                'pool_class': 'redis.connection.ConnectionPool',
                'socket_timeout': 2,  # Reduced from 5 to 2 seconds for faster failover
                'socket_connect_timeout': 2,  # Reduced from 5 to 2 seconds
                'retry_on_timeout': False,  # Don't retry to avoid cascading timeouts
                'max_connections': 100,
                'retry_on_error': [ConnectionError, TimeoutError],  # Only retry on specific errors
                'health_check_interval': 30,  # Health check every 30 seconds
            },
            'KEY_PREFIX': '{tenant}',
        }
    }
else:
    # No Redis configured - use dummy cache backend
    REDIS_URL = None
    
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.dummy.DummyCache',
        }
    }

# Redis database numbers for different uses (only used when Redis is available)
REDIS_SESSION_DB = int(os.environ.get('REDIS_SESSION_DB', 1))  # Session storage
REDIS_TENANT_DB = 2  # Use a separate Redis database for tenant metadata
REDIS_ONBOARDING_DB = 3  # Use a separate Redis database for onboarding sessions

CLAUDE_API_KEY = os.getenv('CLAUDE_API_KEY', '')
CLAUDE_API_MODEL = os.getenv('CLAUDE_API_MODEL', 'claude-3-opus-20240229')
CLAUDE_API_MAX_TOKENS = 1000

# Smart Insights specific Claude API configuration
CLAUDE_SMART_INSIGHTS_API_KEY = os.getenv('CLAUDE_SMART_INSIGHTS_API_KEY', '')
CLAUDE_SMART_INSIGHTS_MODEL = os.getenv('CLAUDE_SMART_INSIGHTS_MODEL', 'claude-sonnet-4-20250514')
CLAUDE_SMART_INSIGHTS_MAX_TOKENS = int(os.getenv('CLAUDE_SMART_INSIGHTS_MAX_TOKENS', '1000'))

# PostHog Analytics Configuration
POSTHOG_API_KEY = os.getenv('POSTHOG_API_KEY', None)
POSTHOG_HOST = os.getenv('POSTHOG_HOST', 'https://app.posthog.com')

# Scheduled tasks have been removed with Celery

# Session and authentication settings
AUTH_USER_MODEL = 'custom_auth.User'
# Session Settings
SESSION_CACHE_ALIAS = "default"
SESSION_COOKIE_AGE = 1209600  # 2 weeks
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_NAME = 'sessionid'
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
SESSION_COOKIE_SAMESITE = 'Lax'  # Changed back to Lax for better compatibility
CSRF_COOKIE_SAMESITE = 'Lax'  # Keep CSRF as Lax for security

# SESSION_ENGINE removed - using custom session_manager app

# Configure cookies for cross-subdomain access in production
if os.getenv('ENVIRONMENT') == 'production':
    SESSION_COOKIE_DOMAIN = '.dottapps.com'
    CSRF_COOKIE_DOMAIN = '.dottapps.com'
else:
    # Let cookies default to current domain for development
    SESSION_COOKIE_DOMAIN = None
    CSRF_COOKIE_DOMAIN = None

FILE_UPLOAD_HANDLERS = [
    'django.core.files.uploadhandler.MemoryFileUploadHandler',
    'django.core.files.uploadhandler.TemporaryFileUploadHandler',
]
MAX_UPLOAD_SIZE = 10 * 1024 * 1024  # 10MB

# Add these settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
FILE_UPLOAD_PERMISSIONS = 0o644

# Security Settings (duplicated for clarity - remove if causing issues)
# These are already set above but included here for organization
# SECURE_BROWSER_XSS_FILTER = True
# SECURE_CONTENT_TYPE_NOSNIFF = True
# X_FRAME_OPTIONS = 'DENY'
    
DJANGO_ALLOW_ASYNC_UNSAFE = True  # Only for development

# Ensure the logs directory exists
os.makedirs(os.path.join(BASE_DIR, 'logs'), exist_ok=True)

# Configure Django REST Framework for Auth0 Authentication
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'core.authentication.session_token_auth.SessionTokenAuthentication',  # Primary: Custom session auth (accepts Session/Bearer)
        'session_manager.authentication.SessionAuthentication',  # Fallback: Original session auth
        'custom_auth.auth0_authentication.Auth0JWTAuthentication',  # Secondary: Auth0 JWT
        # Removed rest_framework.authentication.SessionAuthentication - using only custom sessions
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 50,
    'DATETIME_FORMAT': '%Y-%m-%dT%H:%M:%S.%fZ',
}

# Logging configuration
LOGGING_CONFIG = None

LOGLEVEL = os.getenv('DJANGO_LOGLEVEL', 'DEBUG').upper()

# Import custom logging filters
from pyfactor.log_filters import DeduplicationFilter

# Update logging configuration to include specialized loggers for auth and tenant validation
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(message)s',
        },
        'json': {
            'format': '%(asctime)s %(levelname)s %(name)s %(message)s',
            'datefmt': '%Y-%m-%dT%H:%M:%S%z',
            'class': 'pythonjsonlogger.jsonlogger.JsonFormatter',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',  # Changed to DEBUG for detailed logging
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'json_console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'json',  # Now use the JSON formatter since the package is installed
        },
        'auth_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'auth.log'),
            'formatter': 'verbose',
        },
        'tenant_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'tenant.log'),
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'custom_auth': {
            'handlers': ['console', 'auth_file'],
            'level': 'DEBUG',  # Changed to DEBUG for detailed Auth0 logging
            'propagate': False,
        },
        'custom_auth.auth0_authentication': {
            'handlers': ['console', 'auth_file'],
            'level': 'DEBUG',  # Specific logger for Auth0 authentication
            'propagate': False,
        },
        'custom_auth.enhanced_rls_middleware': {
            'handlers': ['console', 'auth_file'],
            'level': 'DEBUG',  # Specific logger for RLS middleware
            'propagate': False,
        },
        'custom_auth.api': {
            'handlers': ['console', 'tenant_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'onboarding': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'taxes': {
            'handlers': ['console', 'json_console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'taxes.middleware': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'taxes.views': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'taxes.views.tenant_tax_settings_views': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

logging.config.dictConfig(LOGGING)



MIDDLEWARE = [
'django.middleware.security.SecurityMiddleware',
'whitenoise.middleware.WhiteNoiseMiddleware',  # Add WhiteNoise for static files
'pyfactor.middleware.cloudflare_middleware.CloudflareMiddleware',  # Cloudflare IP handling
'corsheaders.middleware.CorsMiddleware',
'django.middleware.common.CommonMiddleware',
'django.middleware.csrf.CsrfViewMiddleware',
'custom_auth.middleware.TokenRefreshMiddleware',  # Add Token Refresh Middleware
'session_manager.middleware.SessionMiddleware',  # New session management middleware
    'session_manager.security_middleware.SessionSecurityMiddleware',
    'session_manager.security_middleware.DeviceFingerprintMiddleware',
    'session_manager.security_middleware.SessionHeartbeatMiddleware',
'django.middleware.clickjacking.XFrameOptionsMiddleware',
'custom_auth.enhanced_rls_middleware.EnhancedRowLevelSecurityMiddleware',  # Use enhanced RLS middleware
'hr.middleware.HrCorsMiddleware',  # Add HR CORS middleware
'onboarding.middleware.SchemaNameMiddleware',
'allauth.account.middleware.AccountMiddleware',
'custom_auth.middleware.RequestIDMiddleware',
'custom_auth.middleware.TenantMiddleware',  # Tenant isolation middleware
'audit.middleware.AuditMiddleware',  # Audit trail middleware
'custom_auth.middleware_package.onboarding_middleware.OnboardingMiddleware',  # Onboarding check middleware
'taxes.tax_audit_middleware.TaxAuditMiddleware',  # Tax API audit and logging middleware
'pyfactor.middleware.analytics_middleware.AnalyticsMiddleware',  # PostHog analytics tracking
'custom_auth.dashboard_middleware.DashboardMigrationMiddleware',
'custom_auth.tenant_isolation_middleware.TenantIsolationMiddleware',
'custom_auth.tenant_isolation_middleware.TenantSecurityMiddleware',
]

# Maximum number of database connections allowed
MAX_DB_CONNECTIONS = 20  # Reduced from 50 to prevent connection exhaustion

# Connection pool configuration
CONNECTION_POOL_CONFIG = {
    'max_connections': 50,
    'min_connections': 5,
    'connection_lifetime': 300,  # 5 minutes
    'idle_timeout': 60,  # 1 minute
}

# Tenant metrics configuration
TENANT_METRICS_CONFIG = {
    'enable_metrics': True,
    'metrics_cache_timeout': 86400,  # 24 hours
    'problematic_tenant_threshold': 0.8,  # 80% of resources
}

# Redis configuration for tenant metadata
REDIS_TENANT_DB = 2  # Use a separate Redis database for tenant metadata

# Session management configuration
SESSION_TTL = int(os.getenv('SESSION_TTL', 86400))  # 24 hours default
REDIS_SESSION_DB = 1  # Separate Redis DB for sessions
SESSION_COOKIE_NAME = 'session_token'
SESSION_COOKIE_AGE = SESSION_TTL
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'  # Changed back to Lax for better compatibility
# SESSION_COOKIE_DOMAIN is set above based on environment

# Check if we're running in ASGI mode
IS_ASGI = any(arg in sys.argv for arg in ['daphne', '--async', 'runserver --async'])



REQUEST_ID_HEADER = 'HTTP_X_REQUEST_ID'
GENERATE_REQUEST_ID_IF_ABSENT = True

ROOT_URLCONF = 'pyfactor.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # Add this line
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                # 'django.contrib.messages.context_processors.messages',  # Requires Django sessions
            ],
        },
    },
]

INTERNAL_IPS = [
    '127.0.0.1',
]

WSGI_APPLICATION = 'pyfactor.wsgi.application'
ASGI_APPLICATION = 'pyfactor.asgi.application'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# Add these settings for tenant apps
SHARED_APPS = (
    # 'django.contrib.admin',  # Disabled - requires Django sessions
    'django.contrib.auth',
    'django.contrib.contenttypes',
    # 'django.contrib.messages',  # Requires Django sessions
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'corsheaders',
    'rest_framework',
    'rest_framework_simplejwt.token_blacklist',
    'django_countries',
    'rest_framework.authtoken',
    'dj_rest_auth',
    'dj_rest_auth.registration',
    'allauth',
    'allauth.account',
    'leads.apps.LeadsConfig',  # Lead management system
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'phonenumber_field',
    'django_extensions',
    'custom_auth',
    'onboarding.apps.OnboardingConfig',
    'session_manager.apps.SessionManagerConfig',  # New session management app with signals
    'audit.apps.AuditConfig',  # Audit trail system
    'smart_insights',  # Smart Insights with Claude API integration
)

TENANT_APPS = (
    'users.apps.UsersConfig',
    'sales',
    'finance',
    'reports',
    'banking',
    'payments',
    'payroll',
    'inventory',
    'analysis',
    'timesheets',
    'chart',
    'integrations',
    'taxes',
    'purchases',
    'barcode',
    'hr.apps.HrConfig',
    'crm.apps.CrmConfig',
    'transport.apps.TransportConfig',
    'events.apps.EventsConfig',
    'notifications',
    'whatsapp_business.apps.WhatsappBusinessConfig',
    'data_export',
    'jobs.apps.JobsConfig',
    'communications.apps.CommunicationsConfig',
)

INSTALLED_APPS = list(SHARED_APPS) + [app for app in TENANT_APPS if app not in SHARED_APPS]


# Only enable Debug Toolbar for non-ASGI environments
if DEBUG and not IS_ASGI:  # Make sure DEBUG is True as well
    INSTALLED_APPS.append("debug_toolbar")
    MIDDLEWARE.insert(0, "debug_toolbar.middleware.DebugToolbarMiddleware")  # Add at start
    
    # Debug Toolbar settings
    INTERNAL_IPS = [
        "127.0.0.1",
    ]

# Add database routers
# DATABASE_ROUTERS = [
#     'pyfactor.db_routers.TenantSchemaRouter',   # Schema-based tenant router
#     'taxes.db_router.TaxDatabaseRouter'         # Tax database router
# ]

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',  # Temporarily changed from dj_db_conn_pool.backends.postgresql
        'NAME': os.getenv('DB_NAME', 'dott_production'),
        'USER': os.getenv('DB_USER', 'dott_user'),
        'PASSWORD': os.getenv('DB_PASSWORD', 'SG65SMG79zpPfx8lRDWlIBTfxw1VCVnJ'),
        'HOST': os.getenv('DB_HOST', 'dpg-d0u3s349c44c73a8m3rg-a.oregon-postgres.render.com'),
        'PORT': os.getenv('DB_PORT', '5432'),
        'TIME_ZONE': 'UTC',
        'CONN_MAX_AGE': 0,  # Set to 0 to let the pool manage connection lifetime
        'AUTOCOMMIT': True,
        'CONN_HEALTH_CHECKS': True,
        'OPTIONS': {
            'connect_timeout': 10,
            'client_encoding': 'UTF8',
            'application_name': 'dott',
            'sslmode': os.getenv('DB_SSL_MODE', 'require'),
            'options': '',  # Allow router to control schema
            'keepalives': 1,
            'keepalives_idle': 30,
            'keepalives_interval': 10,
            'keepalives_count': 5,
            
            
            
        },
        # 'POOL_OPTIONS': {  # Commented out since we're not using connection pool temporarily
        #     'POOL_SIZE': 5,            # Reduced from 20
        #     'MAX_OVERFLOW': 2,         # Reduced from 10
        #     'RECYCLE': 300,            # Keep at 300 seconds
        #     'TIMEOUT': 30,             # Keep at 30 seconds
        #     'RETRY': 3,                # Keep at 3
        #     'RECONNECT': True,
        #     'DISABLE_POOLING': False,
        # }
    },

    'taxes': {
        'ENGINE': 'django.db.backends.postgresql',  # Temporarily changed from dj_db_conn_pool.backends.postgresql
        'NAME': os.getenv('TAX_DB_NAME', 'dott_production'),
        'USER': os.getenv('TAX_DB_USER', 'dott_user'),
        'PASSWORD': os.getenv('TAX_DB_PASSWORD', 'SG65SMG79zpPfx8lRDWlIBTfxw1VCVnJ'),
        'HOST': os.getenv('TAX_DB_HOST', 'dpg-d0u3s349c44c73a8m3rg-a.oregon-postgres.render.com'),
        'PORT': os.getenv('TAX_DB_PORT', '5432'),
        'CONN_MAX_AGE': 0,  # Set to 0 to let the pool manage connection lifetime
        'OPTIONS': {
            'connect_timeout': 10,
            'client_encoding': 'UTF8',
            'sslmode': os.getenv('DB_SSL_MODE', 'require'),
            'keepalives': 1,
            'keepalives_idle': 30,
            'keepalives_interval': 10,
            'keepalives_count': 5,
            
            
            
            
            
        },
        # 'POOL_OPTIONS': {  # Commented out since we're not using connection pool temporarily
        #     'POOL_SIZE': 10,
        #     'MAX_OVERFLOW': 5,
        #     'RECYCLE': 300,
        #     'TIMEOUT': 30,
        #     'RETRY': 3,
        #     'RECONNECT': True,
        # }
    }
}

# Database pool arguments optimized for better connection management
DATABASE_POOL_ARGS = {
    "pre_ping": True,         # Enable connection validation before use
    "echo": False,            # Disable SQL echo for production
    "timeout": 10,            # Further reduced timeout to 10 seconds
    "recycle": 300,           # Recycle connections after 5 minutes
    "pool_size": 5,           # Maintain 5 connections in the pool
    "max_overflow": 2,        # Allow 2 additional connections when pool is full
    "autocommit": True,       # Use autocommit mode
    "reset_on_return": True,  # Reset transaction state on connection return
}
# Database performance settings to be applied after connection
DATABASE_PERFORMANCE_SETTINGS = {
    'statement_timeout': 30000,  # 30 seconds timeout for queries
    'idle_in_transaction_session_timeout': 60000,  # 1 minute timeout for idle transactions
    'work_mem': '4MB',  # Memory for sorting operations
}


# Initialize the connection pool
# We'll initialize the connection pool in apps.py to avoid circular imports



DATABASE_RESOURCE_LIMITS = {
    'MAX_CONNECTIONS_PER_DB': 50,
    'MAX_DB_SIZE': 1024 * 1024 * 1024,  # 1GB
    'STATEMENT_TIMEOUT': 30000,
    'LOCK_TIMEOUT': 5000,
}

# Add tenant settings
TENANT_SETTINGS = {
    'DEFAULT_SCHEMA': 'public',
    'TENANT_SCHEMA_PREFIX': 'tenant_',
    'MAX_TENANTS': 100000,
    'SCHEMA_NAME_MAX_LENGTH': 63,  # PostgreSQL limit
    'CREATE_SCHEMA_PERMISSIONS': [
        'CREATE',
        'USAGE',
    ],
    'TENANT_MODEL': 'custom_auth.Tenant',
    'TENANT_DOMAIN_MODEL': None,
    'SCHEMA_MIGRATIONS': True,
    'AUTO_CREATE_SCHEMA': True,
    'SCHEMA_CACHE_TTL': 300,  # 5 minutes cache for schema names
}

# Add these settings for schema migrations
DATABASE_SCHEMA_MIGRATIONS = {
    'ENABLE_AUTO_MIGRATE': True,  # Auto migrate schemas
    'MIGRATION_TABLE': 'schema_migrations',
    'MIGRATION_HISTORY_TABLE': 'schema_migration_history',
}


TENANT_CACHE_KEY_PREFIX = 'tenant_{}'
TENANT_CACHE_TIMEOUT = 3600  # 1 hour
# Further optimized connection pool settings for lower resource usage
DB_POOL_OPTIONS = {
    'MIN_CONNS': 3,              # Reduced from 5
    'MAX_CONNS': 15,             # Reduced from 20
    'MAX_QUERIES': 5000,         # Reduced from 50000
    'MAX_IDLE_TIME': 180,        # Reduced from 300 (3 minutes)
    'CONN_LIFETIME': 1800,       # Reduced from 3600 (30 minutes)
    'RETRY_ATTEMPTS': 3,
    'RETRY_DELAY': 0.5,
    'CONNECTION_CHECK_INTERVAL': 60, # Check connection health every minute
    'METRICS_ENABLED': True
}

# Enhanced connection pool configuration with optimized values 
DATABASE_CONNECTION_POOL = {
    'MAX_CONNS': 10,             # Max concurrent connections
    'MIN_CONNS': 2,              # Minimum connections to keep in pool
    'CONN_LIFETIME': 300,        # 5 minutes max lifetime for a connection
    'IDLE_TIMEOUT': 60,          # Close idle connections after 1 minute
    'CONN_TIMEOUT': 5,           # 5 second connection timeout
    'MAX_QUERIES_PER_CONN': 500, # Recycle connections after 500 operations
    'STATEMENT_TIMEOUT': 30000,  # 30 seconds statement timeout
    'LOCK_TIMEOUT': 5000,        # 5 seconds lock timeout
    'MONITOR_INTERVAL': 60,      # Check connections every minute
    'METRICS_ENABLED': True,     # Enable connection metrics
    'SCHEMA_CACHE_TTL': 300,     # Cache schema info for 5 minutes
}
# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en'
LANGUAGES = [('en', 'English')]

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

# Static files cache control for Cloudflare
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'

# Add cache headers for static files
WHITENOISE_MAX_AGE = 31536000  # 1 year
WHITENOISE_SKIP_COMPRESS_EXTENSIONS = ['jpg', 'jpeg', 'png', 'gif', 'webp', 'zip', 'gz', 'tgz', 'bz2', 'tbz', 'xz', 'br']

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_AUTH_SERIALIZERS = {
    'USER_DETAILS_SERIALIZER': 'users.serializers.UserSerializer',
    'LOGIN_SERIALIZER': 'users.serializers.CustomLoginSerializer',
}

REST_AUTH_REGISTER_SERIALIZERS = {
    'REGISTER_SERIALIZER': 'users.serializers.CustomRegisterSerializer',
}

# Debug: Print all Auth0 environment variables during startup
print("üîç [DEBUG] Django Settings - Auth0 Environment Variables:")
print(f"   AUTH0_DOMAIN: {os.getenv('AUTH0_DOMAIN', 'NOT_SET')}")
print(f"   AUTH0_CLIENT_ID: {os.getenv('AUTH0_CLIENT_ID', 'NOT_SET')}")
print(f"   AUTH0_CLIENT_SECRET: {os.getenv('AUTH0_CLIENT_SECRET', 'NOT_SET')[:8]}..." if os.getenv('AUTH0_CLIENT_SECRET') else "   AUTH0_CLIENT_SECRET: NOT_SET")
print(f"   AUTH0_AUDIENCE: {os.getenv('AUTH0_AUDIENCE', 'NOT_SET')}")
print(f"   AUTH0_ISSUER_BASE_URL: {os.getenv('AUTH0_ISSUER_BASE_URL', 'NOT_SET')}")
print(f"   AUTH0_CUSTOM_DOMAIN: {os.getenv('AUTH0_CUSTOM_DOMAIN', 'NOT_SET')}")
print(f"   Environment: {os.getenv('ENVIRONMENT', 'NOT_SET')}")
print(f"   Debug mode: {DEBUG}")

# Auth0 Configuration
AUTH0_DOMAIN = os.getenv('AUTH0_DOMAIN', 'dev-cbyy63jovi6zrcos.us.auth0.com')
# Force deployment refresh Fri Jun  6 05:44:20 MDT 2025

# ===== ENHANCED SECURITY SETTINGS =====
# Risk thresholds for session security
SESSION_SECURITY_RISK_THRESHOLD_HIGH = 70
SESSION_SECURITY_RISK_THRESHOLD_MEDIUM = 50

# Heartbeat configuration
SESSION_HEARTBEAT_INTERVAL = 60  # seconds
SESSION_HEARTBEAT_GRACE_PERIOD = 120  # seconds

# Device trust configuration
DEVICE_TRUST_DURATION_DAYS = 90
MAX_FAILED_LOGIN_ATTEMPTS = 5
DEVICE_BLOCK_DURATION_HOURS = 1

# Security event retention
SECURITY_EVENT_RETENTION_DAYS = 90
# =====================================

# ===== CLOUDFLARE CONFIGURATION =====
# Enable Cloudflare proxy support
CLOUDFLARE_PROXY_ENABLED = not DEBUG

# Cache control for different content types
CACHE_CONTROL_MAX_AGE = {
    'static': 31536000,  # 1 year for static files
    'media': 86400,      # 1 day for media files
    'api': 0,            # No cache for API responses
    'html': 300,         # 5 minutes for HTML pages
}

# Cloudflare Page Rules compatibility
APPEND_SLASH = False  # Industry standard: be explicit about URLs, no automatic redirects
PREPEND_WWW = False

# Response headers for Cloudflare
DEFAULT_RESPONSE_HEADERS = {
    'X-Powered-By': 'Dott Platform',
    'X-Content-Type-Options': 'nosniff',
    'X-Frame-Options': 'DENY',
}

# Rate limiting (works with Cloudflare rate limiting)
RATELIMIT_ENABLE = True
RATELIMIT_USE_CACHE = 'default'
RATELIMIT_VIEW = 'custom_auth.views.ratelimit_exceeded'

# Cloudflare-specific logging
if CLOUDFLARE_PROXY_ENABLED:
    LOGGING['formatters']['cloudflare'] = {
        'format': '%(asctime)s [%(cf_ray)s] %(levelname)s %(message)s',
        'datefmt': '%Y-%m-%d %H:%M:%S',
    }
# =====================================

# RLS Public Paths - paths that don't require tenant context
RLS_PUBLIC_PATHS = [
    '/api/currency/test-public/',  # Public currency test endpoint
    '/api/currency/list/',         # Public currency list endpoint (for initial setup)
]
