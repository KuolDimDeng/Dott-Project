# Staging Dockerfile - Working around Render's build context
# Assumes entire repo is available
FROM node:18-alpine AS base
ARG CACHEBUST=2025-09-13-staging-v4
RUN apk add --no-cache libc6-compat
WORKDIR /app
RUN npm install -g pnpm@8.10.0

# Copy entire repository first
FROM base AS source
WORKDIR /tmp
# Copy everything from build context (should be repo root)
COPY . .
# Move frontend files to /app
RUN if [ -d "frontend/pyfactor_next" ]; then \
        cp -r frontend/pyfactor_next/* /app/; \
    elif [ -d "pyfactor_next" ]; then \
        cp -r pyfactor_next/* /app/; \
    else \
        cp -r * /app/; \
    fi

# Dependencies stage
FROM base AS deps
WORKDIR /app
# Copy package files from source stage
COPY --from=source /app/package.json ./
COPY --from=source /app/pnpm-lock.yaml* ./
RUN pnpm install --frozen-lockfile || pnpm install

# Build stage
FROM base AS builder
WORKDIR /app

# Copy everything from source stage
COPY --from=source /app ./
# Copy dependencies
COPY --from=deps /app/node_modules ./node_modules

# Verify structure
RUN echo "Current directory:" && pwd && \
    echo "Files in current directory:" && ls -la && \
    echo "Checking for src directory:" && ls -la src/ || echo "No src directory" && \
    echo "Checking for app directory:" && ls -la app/ || echo "No app directory"

# Set build environment
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV BUILD_STANDALONE=true
ENV NODE_OPTIONS="--max-old-space-size=3584"

# Build arguments for staging
ARG NEXT_PUBLIC_API_URL=https://dott-api-staging.onrender.com
ARG NEXT_PUBLIC_BASE_URL=https://staging.dottapps.com
ARG NEXT_PUBLIC_AUTH0_DOMAIN=dev-cbyy63jovi6zrcos.us.auth0.com
ARG NEXT_PUBLIC_AUTH0_CLIENT_ID=9i7GSU4bgh6hFtMXnQACwiRxTudpuOSF
ARG NEXT_PUBLIC_AUTH0_AUDIENCE=https://api-staging.dottapps.com
ARG AUTH0_SECRET
ARG AUTH0_BASE_URL=https://staging.dottapps.com
ARG AUTH0_ISSUER_BASE_URL=https://dev-cbyy63jovi6zrcos.us.auth0.com
ARG AUTH0_CLIENT_ID=9i7GSU4bgh6hFtMXnQACwiRxTudpuOSF
ARG AUTH0_CLIENT_SECRET
ARG NEXT_PUBLIC_CRISP_WEBSITE_ID
ARG NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY
ARG NEXT_PUBLIC_PLAID_ENV=sandbox
ARG NEXT_PUBLIC_GOOGLE_MAPS_API_KEY

# Convert build args to environment variables
ENV NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
ENV NEXT_PUBLIC_BASE_URL=${NEXT_PUBLIC_BASE_URL}
ENV NEXT_PUBLIC_AUTH0_DOMAIN=${NEXT_PUBLIC_AUTH0_DOMAIN}
ENV NEXT_PUBLIC_AUTH0_CLIENT_ID=${NEXT_PUBLIC_AUTH0_CLIENT_ID}
ENV NEXT_PUBLIC_AUTH0_AUDIENCE=${NEXT_PUBLIC_AUTH0_AUDIENCE}

# Build Next.js
RUN pnpm run build || npm run build

# Production runner stage
FROM node:18-alpine AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_OPTIONS="--max-old-space-size=2048"
ENV PORT=10000
ENV HOSTNAME="0.0.0.0"

# Add non-root user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Install pnpm in runner
RUN npm install -g pnpm@8.10.0

# Copy built application
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next ./.next
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./package.json

# Change ownership
RUN chown -R nextjs:nodejs /app

USER nextjs

EXPOSE 10000

# Start command
CMD ["pnpm", "next", "start", "-p", "10000"]