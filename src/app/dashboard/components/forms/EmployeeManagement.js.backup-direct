'use client';
import React, { useState, useEffect, useCallback, memo, Fragment, useRef, useMemo } from 'react';
import { useRouter } from 'next/navigation';
import { v4 as uuidv4 } from 'uuid';
import { axiosInstance, backendHrApiInstance, resetCircuitBreakers } from '@/lib/axiosConfig';
import { countries } from 'countries-list';
import { format, parseISO } from 'date-fns';
import EmployeePermissions from './EmployeePermissions';
import { refreshUserSession } from '@/utils/refreshUserSession';
import { Dialog, Transition } from '@headlessui/react';
import { toast } from 'react-hot-toast';
import { useTable, usePagination, useSortBy } from 'react-table';
import { extractTenantId, getSecureTenantId } from '@/utils/tenantUtils';
import { getCacheValue, setCacheValue } from '@/utils/appCache';
// Import the API utilities
import api from '@/utils/api';
import { logger } from '@/utils/logger';
import { employeeApi } from '@/utils/apiClient';
import { invalidateCache } from '@/utils/apiHelpers';
import { verifyBackendConnection } from '@/lib/axiosConfig';
import BackendConnectionCheck from '../BackendConnectionCheck';

const EmployeeManagement = () => {
  // ... existing code ...
  
  // Function to manually refresh the user session
  const refreshSession = async () => {
    try {
      setLoading(true);
      const refreshed = await refreshUserSession();
      if (refreshed) {
        setError(null);
        toast.success('Session refreshed successfully');
        fetchEmployees(); // Retry fetching data
      } else {
        setError('Failed to refresh session. Please log in again.');
      }
    } catch (error) {
      logger.error('[EmployeeManagement] Error refreshing session:', error);
      setError('Failed to refresh session. Please log in again.');
    } finally {
      setLoading(false);
    }
  };

  // Function to handle login redirection on session expiration
  const redirectToLogin = () => {
    const currentPath = window.location.pathname + window.location.search;
    window.location.href = `/login?expired=true&redirect=${encodeURIComponent(currentPath)}`;
  };

  // ... existing code ...
};

// ... existing code ... 